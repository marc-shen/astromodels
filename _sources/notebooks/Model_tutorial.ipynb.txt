{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fafa0143",
   "metadata": {},
   "source": [
    "# Model tutorial\n",
    "\n",
    "In this tutorial we show how to build a simple model with two point sources, how to save it for later use, and re-load it back. We will also plot the spectra of the two point sources, with their components.\n",
    "\n",
    "See the documents about creating and getting information about functions, point sources and extended sources for details about these operations. Here we only focus on the global model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca27a457",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:10.659755Z",
     "iopub.status.busy": "2024-09-10T14:14:10.659327Z",
     "iopub.status.idle": "2024-09-10T14:14:11.900498Z",
     "shell.execute_reply": "2024-09-10T14:14:11.899838Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# We also import astropy units to show the unit-conversion\n",
    "# feature\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2360113",
   "metadata": {},
   "source": [
    "## Define sources\n",
    "\n",
    "Now let‚Äôs define a point source (see ‚ÄúCreating point sources‚Äù for details and alternative way to accomplish this):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3743370d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:11.903546Z",
     "iopub.status.busy": "2024-09-10T14:14:11.903118Z",
     "iopub.status.idle": "2024-09-10T14:14:11.919126Z",
     "shell.execute_reply": "2024-09-10T14:14:11.917245Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>source_1 (point source): \n",
       "<ul>\n",
       "\n",
       "<li>position: \n",
       "<ul>\n",
       "\n",
       "<li>ra: \n",
       "<ul>\n",
       "\n",
       "<li>value: 125.6</li>\n",
       "\n",
       "<li>desc: Right Ascension</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 360.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>dec: \n",
       "<ul>\n",
       "\n",
       "<li>value: -75.3</li>\n",
       "\n",
       "<li>desc: Declination</li>\n",
       "\n",
       "<li>min_value: -90.0</li>\n",
       "\n",
       "<li>max_value: 90.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>equinox: J2000</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>spectrum: \n",
       "<ul>\n",
       "\n",
       "<li>main: \n",
       "<ul>\n",
       "\n",
       "<li>Powerlaw: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.01</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * source_1 (point source):\n",
       "    * position:\n",
       "      * ra:\n",
       "        * value: 125.6\n",
       "        * desc: Right Ascension\n",
       "        * min_value: 0.0\n",
       "        * max_value: 360.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * dec:\n",
       "        * value: -75.3\n",
       "        * desc: Declination\n",
       "        * min_value: -90.0\n",
       "        * max_value: 90.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * equinox: J2000\n",
       "    * spectrum:\n",
       "      * main:\n",
       "        * Powerlaw:\n",
       "          * K:\n",
       "            * value: 1.0\n",
       "            * desc: Normalization (differential flux at the pivot value)\n",
       "            * min_value: 1.0e-30\n",
       "            * max_value: 1000.0\n",
       "            * unit: keV-1 s-1 cm-2\n",
       "            * is_normalization: true\n",
       "          * piv:\n",
       "            * value: 1.0\n",
       "            * desc: Pivot value\n",
       "            * min_value: null\n",
       "            * max_value: null\n",
       "            * unit: keV\n",
       "            * is_normalization: false\n",
       "          * index:\n",
       "            * value: -2.01\n",
       "            * desc: Photon index\n",
       "            * min_value: -10.0\n",
       "            * max_value: 10.0\n",
       "            * unit: ''\n",
       "            * is_normalization: false\n",
       "        * polarization: {}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #af5fd7; text-decoration-color: #af5fd7; font-weight: bold\">source_1</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold\">üî≠ position</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">ra</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îó‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">dec</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f; font-weight: bold\">üåà spectrum</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">main</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">Powerlaw</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">K</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">piv</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">index</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îó‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">polarization</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;38;5;134msource_1\u001b[0m\n",
       "\u001b[38;5;134m‚î£‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;49müî≠ position\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;49mra\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;49mdec\u001b[0m\n",
       "\u001b[38;5;134m‚îó‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;227müåà spectrum\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mmain\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mPowerlaw\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mK\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mpiv\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mindex\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mpolarization\u001b[0m\n"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's start by defining a simple point source with a power law spectrum\n",
    "powerlaw = Powerlaw()\n",
    "\n",
    "pts1 = PointSource('source_1', ra=125.6, dec=-75.3,\n",
    "                   spectral_shape=powerlaw)\n",
    "\n",
    "# Get some info about what we just created\n",
    "pts1.display()\n",
    "\n",
    "# Have a quicker look\n",
    "pts1.plot_tree()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c02e3c",
   "metadata": {},
   "source": [
    "Now let‚Äôs define another source, this time at Galactic Coordinates l = 11.25, b = -22.5, and with two spectral components:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "92eafd33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:11.923069Z",
     "iopub.status.busy": "2024-09-10T14:14:11.922845Z",
     "iopub.status.idle": "2024-09-10T14:14:11.936870Z",
     "shell.execute_reply": "2024-09-10T14:14:11.935797Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>source_2 (point source): \n",
       "<ul>\n",
       "\n",
       "<li>position: \n",
       "<ul>\n",
       "\n",
       "<li>l: \n",
       "<ul>\n",
       "\n",
       "<li>value: 11.25</li>\n",
       "\n",
       "<li>desc: Galactic longitude</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 360.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: -22.5</li>\n",
       "\n",
       "<li>desc: Galactic latitude</li>\n",
       "\n",
       "<li>min_value: -90.0</li>\n",
       "\n",
       "<li>max_value: 90.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>equinox: J2000</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>spectrum: \n",
       "<ul>\n",
       "\n",
       "<li>synchrotron: \n",
       "<ul>\n",
       "\n",
       "<li>Powerlaw: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.20000000000000004</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -0.75</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>IC: \n",
       "<ul>\n",
       "\n",
       "<li>Powerlaw: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.8</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * source_2 (point source):\n",
       "    * position:\n",
       "      * l:\n",
       "        * value: 11.25\n",
       "        * desc: Galactic longitude\n",
       "        * min_value: 0.0\n",
       "        * max_value: 360.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * b:\n",
       "        * value: -22.5\n",
       "        * desc: Galactic latitude\n",
       "        * min_value: -90.0\n",
       "        * max_value: 90.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * equinox: J2000\n",
       "    * spectrum:\n",
       "      * synchrotron:\n",
       "        * Powerlaw:\n",
       "          * K:\n",
       "            * value: 0.20000000000000004\n",
       "            * desc: Normalization (differential flux at the pivot value)\n",
       "            * min_value: 1.0e-30\n",
       "            * max_value: 1000.0\n",
       "            * unit: keV-1 s-1 cm-2\n",
       "            * is_normalization: true\n",
       "          * piv:\n",
       "            * value: 1.0\n",
       "            * desc: Pivot value\n",
       "            * min_value: null\n",
       "            * max_value: null\n",
       "            * unit: keV\n",
       "            * is_normalization: false\n",
       "          * index:\n",
       "            * value: -0.75\n",
       "            * desc: Photon index\n",
       "            * min_value: -10.0\n",
       "            * max_value: 10.0\n",
       "            * unit: ''\n",
       "            * is_normalization: false\n",
       "        * polarization: {}\n",
       "      * IC:\n",
       "        * Powerlaw:\n",
       "          * K:\n",
       "            * value: 0.8\n",
       "            * desc: Normalization (differential flux at the pivot value)\n",
       "            * min_value: 1.0e-30\n",
       "            * max_value: 1000.0\n",
       "            * unit: keV-1 s-1 cm-2\n",
       "            * is_normalization: true\n",
       "          * piv:\n",
       "            * value: 1.0\n",
       "            * desc: Pivot value\n",
       "            * min_value: null\n",
       "            * max_value: null\n",
       "            * unit: keV\n",
       "            * is_normalization: false\n",
       "          * index:\n",
       "            * value: -1.0\n",
       "            * desc: Photon index\n",
       "            * min_value: -10.0\n",
       "            * max_value: 10.0\n",
       "            * unit: ''\n",
       "            * is_normalization: false\n",
       "        * polarization: {}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Another point source with two spectral components\n",
    "\n",
    "spectrum1 = Powerlaw(K=0.2, index=-0.75)\n",
    "component1 = SpectralComponent('synchrotron',spectrum1)\n",
    "\n",
    "spectrum2 = Powerlaw(K=0.8, index=-1.0)\n",
    "component2 = SpectralComponent('IC',spectrum2)\n",
    "\n",
    "point_source2 = PointSource('source_2', l=11.25, b=-22.5, components=[component1,component2])\n",
    "\n",
    "# Have a look at what we just created\n",
    "\n",
    "point_source2.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19565954",
   "metadata": {},
   "source": [
    "## Create a model\n",
    "\n",
    "Now let‚Äôs create our model, which comprises our two sources:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ccfe3b16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:11.945933Z",
     "iopub.status.busy": "2024-09-10T14:14:11.945706Z",
     "iopub.status.idle": "2024-09-10T14:14:11.951795Z",
     "shell.execute_reply": "2024-09-10T14:14:11.951046Z"
    }
   },
   "outputs": [],
   "source": [
    "# Build a model with the two point sources\n",
    "\n",
    "my_model = Model(pts1, point_source2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1a9cf2e",
   "metadata": {},
   "source": [
    "Of course you can use as many sources as needed, like my_model = Model(pts1, pts2, pts3‚Ä¶)\n",
    "\n",
    "## Getting information about a model\n",
    "\n",
    "Using the ```.display()``` method we can see all free parameters currently in the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "102b48b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:11.954830Z",
     "iopub.status.busy": "2024-09-10T14:14:11.954626Z",
     "iopub.status.idle": "2024-09-10T14:14:11.993170Z",
     "shell.execute_reply": "2024-09-10T14:14:11.992722Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (6):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-2.01</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "      <td>-1</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (7):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (6):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K            1     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index    -2.01       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2.spectrum.IC.Powerlaw.index         -1       -10        10   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2.spectrum.IC.Powerlaw.index                       \n",
       "\n",
       "Fixed parameters (7):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cd9ea93",
   "metadata": {},
   "source": [
    "The model tree can be shown as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "72cc80fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:11.995378Z",
     "iopub.status.busy": "2024-09-10T14:14:11.995253Z",
     "iopub.status.idle": "2024-09-10T14:14:12.000297Z",
     "shell.execute_reply": "2024-09-10T14:14:11.999922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #af5fd7; text-decoration-color: #af5fd7; font-weight: bold\">model</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚î£‚îÅ‚îÅ </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7; font-weight: bold\">‚ú® source_1 </span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold\">üî≠ position</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">ra</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">dec</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f; font-weight: bold\">üåà spectrum</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">main</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">Powerlaw</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">K</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">piv</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">index</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îÉ   </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îó‚îÅ‚îÅ </span><span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">polarization</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">‚îó‚îÅ‚îÅ </span><span style=\"color: #af5fd7; text-decoration-color: #af5fd7; font-weight: bold\">‚ú® source_2 </span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold\">üî≠ position</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">l</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">b</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f; font-weight: bold\">üåà spectrum</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">synchrotron</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">Powerlaw</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">K</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">piv</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">index</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">polarization</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">    ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">IC</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">Powerlaw</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">K</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚î£‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">piv</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îÉ   ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">index</span>\n",
       "<span style=\"color: #af5fd7; text-decoration-color: #af5fd7\">    </span><span style=\"color: #bcbcbc; text-decoration-color: #bcbcbc\">        ‚îó‚îÅ‚îÅ </span><span style=\"color: #ffff5f; text-decoration-color: #ffff5f\">polarization</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;38;5;134mmodel\u001b[0m\n",
       "\u001b[38;5;134m‚î£‚îÅ‚îÅ \u001b[0m\u001b[1;5;38;5;134m‚ú® source_1 \u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;49müî≠ position\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;49mra\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;49mdec\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;227müåà spectrum\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mmain\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mPowerlaw\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mK\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mpiv\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mindex\u001b[0m\n",
       "\u001b[38;5;134m‚îÉ   \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;45mpolarization\u001b[0m\n",
       "\u001b[38;5;134m‚îó‚îÅ‚îÅ \u001b[0m\u001b[1;5;38;5;134m‚ú® source_2 \u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;49müî≠ position\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;49ml\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;49mb\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[1;38;5;227müåà spectrum\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227msynchrotron\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mPowerlaw\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mK\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mpiv\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mindex\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mpolarization\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mIC\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mPowerlaw\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mK\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚î£‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mpiv\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îÉ   \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mindex\u001b[0m\n",
       "\u001b[38;5;134m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m    \u001b[0m\u001b[38;5;250m‚îó‚îÅ‚îÅ \u001b[0m\u001b[38;5;227mpolarization\u001b[0m\n"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_model.plot_tree()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe3026b",
   "metadata": {},
   "source": [
    "A dictionary of free parameters can be obtained like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "45f76d7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.002242Z",
     "iopub.status.busy": "2024-09-10T14:14:12.002107Z",
     "iopub.status.idle": "2024-09-10T14:14:12.008800Z",
     "shell.execute_reply": "2024-09-10T14:14:12.008359Z"
    }
   },
   "outputs": [],
   "source": [
    "free_parameters = my_model.free_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e9006e4",
   "metadata": {},
   "source": [
    "We can use such dictionary to loop over all free parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a43961f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.010708Z",
     "iopub.status.busy": "2024-09-10T14:14:12.010602Z",
     "iopub.status.idle": "2024-09-10T14:14:12.013735Z",
     "shell.execute_reply": "2024-09-10T14:14:12.012985Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter source_1.spectrum.main.Powerlaw.K is free\n",
      "Parameter source_1.spectrum.main.Powerlaw.index is free\n",
      "Parameter source_2.spectrum.synchrotron.Powerlaw.K is free\n",
      "Parameter source_2.spectrum.synchrotron.Powerlaw.index is free\n",
      "Parameter source_2.spectrum.IC.Powerlaw.K is free\n",
      "Parameter source_2.spectrum.IC.Powerlaw.index is free\n"
     ]
    }
   ],
   "source": [
    "for parameter_name, parameter in free_parameters.items():\n",
    "\n",
    "    print(\"Parameter %s is free\" % parameter_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "796316ab",
   "metadata": {},
   "source": [
    "More information on a particular source can be obtained like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2f8c3945",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.017232Z",
     "iopub.status.busy": "2024-09-10T14:14:12.017032Z",
     "iopub.status.idle": "2024-09-10T14:14:12.021532Z",
     "shell.execute_reply": "2024-09-10T14:14:12.021142Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>source_1 (point source): \n",
       "<ul>\n",
       "\n",
       "<li>position: \n",
       "<ul>\n",
       "\n",
       "<li>ra: \n",
       "<ul>\n",
       "\n",
       "<li>value: 125.6</li>\n",
       "\n",
       "<li>desc: Right Ascension</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 360.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>dec: \n",
       "<ul>\n",
       "\n",
       "<li>value: -75.3</li>\n",
       "\n",
       "<li>desc: Declination</li>\n",
       "\n",
       "<li>min_value: -90.0</li>\n",
       "\n",
       "<li>max_value: 90.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>equinox: J2000</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>spectrum: \n",
       "<ul>\n",
       "\n",
       "<li>main: \n",
       "<ul>\n",
       "\n",
       "<li>Powerlaw: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.01</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * source_1 (point source):\n",
       "    * position:\n",
       "      * ra:\n",
       "        * value: 125.6\n",
       "        * desc: Right Ascension\n",
       "        * min_value: 0.0\n",
       "        * max_value: 360.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * dec:\n",
       "        * value: -75.3\n",
       "        * desc: Declination\n",
       "        * min_value: -90.0\n",
       "        * max_value: 90.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * equinox: J2000\n",
       "    * spectrum:\n",
       "      * main:\n",
       "        * Powerlaw:\n",
       "          * K:\n",
       "            * value: 1.0\n",
       "            * desc: Normalization (differential flux at the pivot value)\n",
       "            * min_value: 1.0e-30\n",
       "            * max_value: 1000.0\n",
       "            * unit: keV-1 s-1 cm-2\n",
       "            * is_normalization: true\n",
       "          * piv:\n",
       "            * value: 1.0\n",
       "            * desc: Pivot value\n",
       "            * min_value: null\n",
       "            * max_value: null\n",
       "            * unit: keV\n",
       "            * is_normalization: false\n",
       "          * index:\n",
       "            * value: -2.01\n",
       "            * desc: Photon index\n",
       "            * min_value: -10.0\n",
       "            * max_value: 10.0\n",
       "            * unit: ''\n",
       "            * is_normalization: false\n",
       "        * polarization: {}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.source_1.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b4cdbb",
   "metadata": {},
   "source": [
    "More information about a particular instance of a function can be obtained like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ed859dd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.023501Z",
     "iopub.status.busy": "2024-09-10T14:14:12.023361Z",
     "iopub.status.idle": "2024-09-10T14:14:12.027173Z",
     "shell.execute_reply": "2024-09-10T14:14:12.026687Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A simple power-law</li>\n",
       "\n",
       "<li>formula: $ K~\\frac{x}{piv}^{index} $</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.01</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.20099999999999998</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A simple power-law\n",
       "  * formula: $ K~\\frac{x}{piv}^{index} $\n",
       "  * parameters:\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: Normalization (differential flux at the pivot value)\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: 1000.0\n",
       "      * unit: keV-1 s-1 cm-2\n",
       "      * is_normalization: true\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * piv:\n",
       "      * value: 1.0\n",
       "      * desc: Pivot value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: keV\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false\n",
       "    * index:\n",
       "      * value: -2.01\n",
       "      * desc: Photon index\n",
       "      * min_value: -10.0\n",
       "      * max_value: 10.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.20099999999999998\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.source_1.spectrum.main.Powerlaw.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49d1d2f1",
   "metadata": {},
   "source": [
    "## Accessing and modifying sources and parameters from the model instance\n",
    "\n",
    "### Fully-qualified paths\n",
    "\n",
    "Each source and each parameter has a precise path within the model. These paths are displayed by the .display() method of the model instance (see above), and can be used like ```my_model.[path]```. For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "15963fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.029174Z",
     "iopub.status.busy": "2024-09-10T14:14:12.029059Z",
     "iopub.status.idle": "2024-09-10T14:14:12.039056Z",
     "shell.execute_reply": "2024-09-10T14:14:12.038589Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (6):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-2.01</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "      <td>-1</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (7):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (6):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K            1     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index    -2.01       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2.spectrum.IC.Powerlaw.index         -1       -10        10   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2.spectrum.IC.Powerlaw.index                       \n",
       "\n",
       "Fixed parameters (7):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5d74bd74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.041081Z",
     "iopub.status.busy": "2024-09-10T14:14:12.040933Z",
     "iopub.status.idle": "2024-09-10T14:14:12.043044Z",
     "shell.execute_reply": "2024-09-10T14:14:12.042674Z"
    }
   },
   "outputs": [],
   "source": [
    "# Access the logK parameters of the powerlaw spectrum of the main component for source 1:\n",
    "\n",
    "my_model.source_1.spectrum.main.Powerlaw.logK = -0.5\n",
    "\n",
    "# Access the logK parameters of the spectrum of the IC component of source 2:\n",
    "\n",
    "my_model.source_2.spectrum.IC.Powerlaw.logK = -0.32"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1530384c",
   "metadata": {},
   "source": [
    "The structure of these paths is easy to understand. The model is a tree-like structure. The root of the tree is always the model instance itself. The second level is constituted by the various sources. The structure within a source can be understood by calling the ```.display``` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d51d7ed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.045002Z",
     "iopub.status.busy": "2024-09-10T14:14:12.044879Z",
     "iopub.status.idle": "2024-09-10T14:14:12.049000Z",
     "shell.execute_reply": "2024-09-10T14:14:12.048504Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>source_1 (point source): \n",
       "<ul>\n",
       "\n",
       "<li>position: \n",
       "<ul>\n",
       "\n",
       "<li>ra: \n",
       "<ul>\n",
       "\n",
       "<li>value: 125.6</li>\n",
       "\n",
       "<li>desc: Right Ascension</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 360.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>dec: \n",
       "<ul>\n",
       "\n",
       "<li>value: -75.3</li>\n",
       "\n",
       "<li>desc: Declination</li>\n",
       "\n",
       "<li>min_value: -90.0</li>\n",
       "\n",
       "<li>max_value: 90.0</li>\n",
       "\n",
       "<li>unit: deg</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>equinox: J2000</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>spectrum: \n",
       "<ul>\n",
       "\n",
       "<li>main: \n",
       "<ul>\n",
       "\n",
       "<li>Powerlaw: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization (differential flux at the pivot value)</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: keV-1 s-1 cm-2</li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: keV</li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.01</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * source_1 (point source):\n",
       "    * position:\n",
       "      * ra:\n",
       "        * value: 125.6\n",
       "        * desc: Right Ascension\n",
       "        * min_value: 0.0\n",
       "        * max_value: 360.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * dec:\n",
       "        * value: -75.3\n",
       "        * desc: Declination\n",
       "        * min_value: -90.0\n",
       "        * max_value: 90.0\n",
       "        * unit: deg\n",
       "        * is_normalization: false\n",
       "      * equinox: J2000\n",
       "    * spectrum:\n",
       "      * main:\n",
       "        * Powerlaw:\n",
       "          * K:\n",
       "            * value: 1.0\n",
       "            * desc: Normalization (differential flux at the pivot value)\n",
       "            * min_value: 1.0e-30\n",
       "            * max_value: 1000.0\n",
       "            * unit: keV-1 s-1 cm-2\n",
       "            * is_normalization: true\n",
       "          * piv:\n",
       "            * value: 1.0\n",
       "            * desc: Pivot value\n",
       "            * min_value: null\n",
       "            * max_value: null\n",
       "            * unit: keV\n",
       "            * is_normalization: false\n",
       "          * index:\n",
       "            * value: -2.01\n",
       "            * desc: Photon index\n",
       "            * min_value: -10.0\n",
       "            * max_value: 10.0\n",
       "            * unit: ''\n",
       "            * is_normalization: false\n",
       "        * polarization: {}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.source_1.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69df74c8",
   "metadata": {},
   "source": [
    "Each indentation represents one level, so to access the ‚Äúra‚Äù element we can follow the levels shown by the ```.display()``` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ac39e79b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.051189Z",
     "iopub.status.busy": "2024-09-10T14:14:12.051077Z",
     "iopub.status.idle": "2024-09-10T14:14:12.054098Z",
     "shell.execute_reply": "2024-09-10T14:14:12.053562Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter ra = 125.6 [deg]\n",
       "(min_value = 0.0, max_value = 360.0, delta = 12.56, free = False)"
      ],
      "text/plain": [
       "Parameter ra = 125.6 [deg]\n",
       "(min_value = 0.0, max_value = 360.0, delta = 12.56, free = False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ra_parameter = my_model.source_1.position.ra\n",
    "\n",
    "ra_parameter.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32fe7872",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note:** this is a Parameter instance. To get the position of the source as a floating point number, use:\n",
    "    ```my_model.source_1.position.get_ra()```\n",
    "    which will work for any source\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac5511e6",
   "metadata": {},
   "source": [
    "while to access the index parameter of the power law function we can do"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "37fa0435",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.056600Z",
     "iopub.status.busy": "2024-09-10T14:14:12.056409Z",
     "iopub.status.idle": "2024-09-10T14:14:12.059356Z",
     "shell.execute_reply": "2024-09-10T14:14:12.058972Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True)"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "K_parameter = my_model.source_1.spectrum.main.Powerlaw.K\n",
    "\n",
    "K_parameter.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "021a2494",
   "metadata": {},
   "source": [
    "You can find much more information in the document ‚ÄúAdditional features for scripts and applications‚Äù.\n",
    "\n",
    "These fully-qualified paths are unique to each element, are very descriptive and easy to understand. They can always be used and are encouraged in general, but especially in scripts, when the effort spent writing them is paid off in terms of clarity. However, there is an alternative way which might be more convenient in certain situation, especially when models are simple and the chances of getting confused are low. This alternative method is described below.\n",
    "\n",
    "### Using shortcuts\n",
    "\n",
    "Exploiting the feature of the python language, we can create names (‚Äúshortcuts‚Äù) for objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4ab62840",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.061852Z",
     "iopub.status.busy": "2024-09-10T14:14:12.061711Z",
     "iopub.status.idle": "2024-09-10T14:14:12.070105Z",
     "shell.execute_reply": "2024-09-10T14:14:12.069550Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create a \"shortcut\" for the spectrum of a source\n",
    "\n",
    "powerlaw_1 = my_model.source_1.spectrum.main.Powerlaw\n",
    "\n",
    "# Now we can change the values of that power law as:\n",
    "powerlaw_1.K = 1.2\n",
    "\n",
    "# GOTCHA: while it is possible to create shortcuts for parameters, it is not encouraged\n",
    "# Indeed, this will not work:\n",
    "# logK_1 = my_model.source_1.spectrum.main.powerlaw.logK\n",
    "# logK_1 = -1.2 # WILL NOT WORK\n",
    "# In order to use a shortcut for a parameter to change its value, you have to explicitly\n",
    "# set its property 'value':\n",
    "# logK_1.value = -1.2 # This will work"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d51f277",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**GOTACH:** while it is possible to create shortcuts for parameters, it is not encouraged. Indeed, this will not work:\n",
    "   \n",
    "</div>\n",
    "\n",
    "K_1 = my_model.source_1.spectrum.main.powerlaw.K\n",
    "\n",
    "K_1 = 1.2  *WILL NOT WORK*\n",
    "    \n",
    "In order to use a shortcut for a parameter to change its value, you have to explicitly\n",
    "set its property 'value':\n",
    "K_1.value = 1.2  *This will work*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72856062",
   "metadata": {},
   "source": [
    "Shortcut can point at any point of the tree:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b5c84555",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.072176Z",
     "iopub.status.busy": "2024-09-10T14:14:12.072071Z",
     "iopub.status.idle": "2024-09-10T14:14:12.080692Z",
     "shell.execute_reply": "2024-09-10T14:14:12.080317Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create a shortcut of a source\n",
    "source_1 = my_model.source_1\n",
    "\n",
    "# Now we can do:\n",
    "source_1.spectrum.main.Powerlaw.index = -2.3\n",
    "\n",
    "# Create a shortcut for a component\n",
    "\n",
    "main_component = my_model.source_1.spectrum.main\n",
    "\n",
    "# Now we can do:\n",
    "main_component.Powerlaw.index = -1.3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a10167",
   "metadata": {},
   "source": [
    "If you are ever in doubt of what a particular shortcut stands for, you can always retrieve the full path of the element the shortcut is pointing to like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d137752d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.082703Z",
     "iopub.status.busy": "2024-09-10T14:14:12.082588Z",
     "iopub.status.idle": "2024-09-10T14:14:12.085044Z",
     "shell.execute_reply": "2024-09-10T14:14:12.084627Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source_1.spectrum.main\n"
     ]
    }
   ],
   "source": [
    "print(main_component.path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76446bd0",
   "metadata": {},
   "source": [
    "## Saving a model to file\n",
    "\n",
    "An existing model can be saved to a file with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ce286106",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.087368Z",
     "iopub.status.busy": "2024-09-10T14:14:12.087207Z",
     "iopub.status.idle": "2024-09-10T14:14:12.112358Z",
     "shell.execute_reply": "2024-09-10T14:14:12.111891Z"
    }
   },
   "outputs": [],
   "source": [
    "# Save the model to a file, overwriting it if already existing\n",
    "\n",
    "my_model.save('my_model.yml', overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e929c0",
   "metadata": {},
   "source": [
    "The content of the file is YAML code, which is human-readable and very easy to understand. Let‚Äôs have a look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a718b601",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.114694Z",
     "iopub.status.busy": "2024-09-10T14:14:12.114588Z",
     "iopub.status.idle": "2024-09-10T14:14:12.117548Z",
     "shell.execute_reply": "2024-09-10T14:14:12.117165Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source_1 (point source):\n",
      "\n",
      "  position:\n",
      "\n",
      "    ra:\n",
      "\n",
      "      value: 125.6\n",
      "\n",
      "      desc: Right Ascension\n",
      "\n",
      "      min_value: 0.0\n",
      "\n",
      "      max_value: 360.0\n",
      "\n",
      "      unit: deg\n",
      "\n",
      "      is_normalization: false\n",
      "\n",
      "      delta: 12.56\n",
      "\n",
      "      free: false\n",
      "\n",
      "    dec:\n",
      "\n",
      "      value: -75.3\n",
      "\n",
      "      desc: Declination\n",
      "\n",
      "      min_value: -90.0\n",
      "\n",
      "      max_value: 90.0\n",
      "\n",
      "      unit: deg\n",
      "\n",
      "      is_normalization: false\n",
      "\n",
      "      delta: 7.53\n",
      "\n",
      "      free: false\n",
      "\n",
      "    equinox: J2000\n",
      "\n",
      "  spectrum:\n",
      "\n",
      "    main:\n",
      "\n",
      "      Powerlaw:\n",
      "\n",
      "        K:\n",
      "\n",
      "          value: 1.2\n",
      "\n",
      "          desc: Normalization (differential flux at the pivot value)\n",
      "\n",
      "          min_value: 1.0e-30\n",
      "\n",
      "          max_value: 1000.0\n",
      "\n",
      "          unit: keV-1 s-1 cm-2\n",
      "\n",
      "          is_normalization: true\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: true\n",
      "\n",
      "        piv:\n",
      "\n",
      "          value: 1.0\n",
      "\n",
      "          desc: Pivot value\n",
      "\n",
      "          min_value: null\n",
      "\n",
      "          max_value: null\n",
      "\n",
      "          unit: keV\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: false\n",
      "\n",
      "        index:\n",
      "\n",
      "          value: -1.3\n",
      "\n",
      "          desc: Photon index\n",
      "\n",
      "          min_value: -10.0\n",
      "\n",
      "          max_value: 10.0\n",
      "\n",
      "          unit: ''\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.20099999999999998\n",
      "\n",
      "          free: true\n",
      "\n",
      "      polarization: {}\n",
      "\n",
      "source_2 (point source):\n",
      "\n",
      "  position:\n",
      "\n",
      "    l:\n",
      "\n",
      "      value: 11.25\n",
      "\n",
      "      desc: Galactic longitude\n",
      "\n",
      "      min_value: 0.0\n",
      "\n",
      "      max_value: 360.0\n",
      "\n",
      "      unit: deg\n",
      "\n",
      "      is_normalization: false\n",
      "\n",
      "      delta: 1.125\n",
      "\n",
      "      free: false\n",
      "\n",
      "    b:\n",
      "\n",
      "      value: -22.5\n",
      "\n",
      "      desc: Galactic latitude\n",
      "\n",
      "      min_value: -90.0\n",
      "\n",
      "      max_value: 90.0\n",
      "\n",
      "      unit: deg\n",
      "\n",
      "      is_normalization: false\n",
      "\n",
      "      delta: 2.25\n",
      "\n",
      "      free: false\n",
      "\n",
      "    equinox: J2000\n",
      "\n",
      "  spectrum:\n",
      "\n",
      "    synchrotron:\n",
      "\n",
      "      Powerlaw:\n",
      "\n",
      "        K:\n",
      "\n",
      "          value: 0.20000000000000004\n",
      "\n",
      "          desc: Normalization (differential flux at the pivot value)\n",
      "\n",
      "          min_value: 1.0e-30\n",
      "\n",
      "          max_value: 1000.0\n",
      "\n",
      "          unit: keV-1 s-1 cm-2\n",
      "\n",
      "          is_normalization: true\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: true\n",
      "\n",
      "        piv:\n",
      "\n",
      "          value: 1.0\n",
      "\n",
      "          desc: Pivot value\n",
      "\n",
      "          min_value: null\n",
      "\n",
      "          max_value: null\n",
      "\n",
      "          unit: keV\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: false\n",
      "\n",
      "        index:\n",
      "\n",
      "          value: -0.75\n",
      "\n",
      "          desc: Photon index\n",
      "\n",
      "          min_value: -10.0\n",
      "\n",
      "          max_value: 10.0\n",
      "\n",
      "          unit: ''\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.20099999999999998\n",
      "\n",
      "          free: true\n",
      "\n",
      "      polarization: {}\n",
      "\n",
      "    IC:\n",
      "\n",
      "      Powerlaw:\n",
      "\n",
      "        K:\n",
      "\n",
      "          value: 0.8\n",
      "\n",
      "          desc: Normalization (differential flux at the pivot value)\n",
      "\n",
      "          min_value: 1.0e-30\n",
      "\n",
      "          max_value: 1000.0\n",
      "\n",
      "          unit: keV-1 s-1 cm-2\n",
      "\n",
      "          is_normalization: true\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: true\n",
      "\n",
      "        piv:\n",
      "\n",
      "          value: 1.0\n",
      "\n",
      "          desc: Pivot value\n",
      "\n",
      "          min_value: null\n",
      "\n",
      "          max_value: null\n",
      "\n",
      "          unit: keV\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.1\n",
      "\n",
      "          free: false\n",
      "\n",
      "        index:\n",
      "\n",
      "          value: -1.0\n",
      "\n",
      "          desc: Photon index\n",
      "\n",
      "          min_value: -10.0\n",
      "\n",
      "          max_value: 10.0\n",
      "\n",
      "          unit: ''\n",
      "\n",
      "          is_normalization: false\n",
      "\n",
      "          delta: 0.20099999999999998\n",
      "\n",
      "          free: true\n",
      "\n",
      "      polarization: {}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open('my_model.yml') as yaml_file:\n",
    "\n",
    "    print(\"\".join(yaml_file.readlines()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebac0436",
   "metadata": {},
   "source": [
    "## Load a model from a file\n",
    "\n",
    "Now suppose that you want to load back a file you created in a previous session. You can do it with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4754458b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.119692Z",
     "iopub.status.busy": "2024-09-10T14:14:12.119553Z",
     "iopub.status.idle": "2024-09-10T14:14:12.141800Z",
     "shell.execute_reply": "2024-09-10T14:14:12.141399Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (6):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "      <td>-1</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (7):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (6):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2.spectrum.IC.Powerlaw.index         -1       -10        10   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2.spectrum.IC.Powerlaw.index                       \n",
       "\n",
       "Fixed parameters (7):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model = load_model('my_model.yml')\n",
    "\n",
    "# Explore the model we just loaded back\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3efae5db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.143768Z",
     "iopub.status.busy": "2024-09-10T14:14:12.143621Z",
     "iopub.status.idle": "2024-09-10T14:14:12.922618Z",
     "shell.execute_reply": "2024-09-10T14:14:12.921673Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Flux (ph cm$^{-2}$ s$^{-1}$ keV$^{-1}$')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now evaluate and plot our models. You need matplotlib for this\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "# Energies where we want to evaluate the model\n",
    "\n",
    "e = np.geomspace(1,1000,100)\n",
    "\n",
    "# Loop over the sources\n",
    "\n",
    "for src_name, src in my_model.point_sources.items():\n",
    "\n",
    "    # Loop over the components of each source\n",
    "\n",
    "    for comp_name, component in src.components.items():\n",
    "\n",
    "        # Get the differential flux (in ph/cm2/s)\n",
    "\n",
    "        flux = component.shape(e)\n",
    "\n",
    "        # this can also be accomplished with:\n",
    "        # flux = component.powerlaw(e)\n",
    "        # but this requires to know the name of the\n",
    "        # spectral shape which was used\n",
    "\n",
    "        # Plot this component for this source\n",
    "\n",
    "        ax.loglog(e, flux,label=\"%s of %s\" % (component.name, src.name))\n",
    "\n",
    "ax.legend(loc=0)\n",
    "\n",
    "ax.set_xlabel(\"Energy\")\n",
    "ax.set_ylabel(r\"Flux (ph cm$^{-2}$ s$^{-1}$ keV$^{-1}$\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdd48181",
   "metadata": {},
   "source": [
    "## Linking parameters\n",
    "\n",
    "Sometimes you want to link two parameters of a model so that they have the same value. This can be easily accomplished in astromodels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "30dfd9a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.926023Z",
     "iopub.status.busy": "2024-09-10T14:14:12.925735Z",
     "iopub.status.idle": "2024-09-10T14:14:12.938075Z",
     "shell.execute_reply": "2024-09-10T14:14:12.937595Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (9):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (1):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>linked to</th>\n",
       "      <td>source_1.spectrum.main.Powerlaw.index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>function</th>\n",
       "      <td>Line</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>current value</th>\n",
       "      <td>-1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "\n",
       "Fixed parameters (9):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (1):\n",
       "----------------------\n",
       "\n",
       "                 source_2.spectrum.IC.Powerlaw.index\n",
       "linked to      source_1.spectrum.main.Powerlaw.index\n",
       "function                                        Line\n",
       "current value                                   -1.3\n",
       "unit                                                \n",
       "\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Link the photon index of the first source with the\n",
    "# photon index of the IC component of the second source\n",
    "\n",
    "my_model.link(my_model.source_2.spectrum.IC.Powerlaw.index,\n",
    "              my_model.source_1.spectrum.main.Powerlaw.index)\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a115ed3f",
   "metadata": {},
   "source": [
    "### Advanced use of linking: arbitrary functions\n",
    "\n",
    "Astromodels takes this a step further. Parameters can be linked to each other through any function. The parameters of the linking function become parameters of the model like any other, and can be left free to vary or fixed. For example, let‚Äôs consider the case where we want the photon index of the IC component of the second source (p2) to be equal to the photon index of the first source (p1) plus a constant. We can link the two parameters with the ‚Äòbias‚Äô function $f(x) = x + k$, so that $p2(p1) = p1 + k$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5302f1ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.940293Z",
     "iopub.status.busy": "2024-09-10T14:14:12.940136Z",
     "iopub.status.idle": "2024-09-10T14:14:12.951640Z",
     "shell.execute_reply": "2024-09-10T14:14:12.950742Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (6):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.Line.a</th>\n",
       "      <td>2</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (8):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (1):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>linked to</th>\n",
       "      <td>source_1.spectrum.main.Powerlaw.index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>function</th>\n",
       "      <td>Line</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>current value</th>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (6):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2...a                                 2      None      None   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2...a                                              \n",
       "\n",
       "Fixed parameters (8):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (1):\n",
       "----------------------\n",
       "\n",
       "                 source_2.spectrum.IC.Powerlaw.index\n",
       "linked to      source_1.spectrum.main.Powerlaw.index\n",
       "function                                        Line\n",
       "current value                                    0.7\n",
       "unit                                                \n",
       "\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Link the photon indexes through the 'linear' function, i.e.,\n",
    "# the photon index of the IC component of the second source is fixed to be the\n",
    "# photon index of the first source plus a constant k\n",
    "\n",
    "link_function = Line(a=2, b=1)\n",
    "link_function.b.fix=True\n",
    "\n",
    "my_model.link(my_model.source_2.spectrum.IC.Powerlaw.index,\n",
    "              my_model.source_1.spectrum.main.Powerlaw.index,\n",
    "              link_function)\n",
    "\n",
    "# The parameters of the linking function become parameters\n",
    "# of the model, and are put in the model tree under the parameter they are\n",
    "# linking.\n",
    "# In this case the only parameter of the 'linear' function ('k') becomes then\n",
    "# my_model.source_2.spectrum.IC.powerlaw.logK.bias.k\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91e5ec9d",
   "metadata": {},
   "source": [
    "If we want to fix say $p2 = p1 - 1.2$, we can fix k to that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "12fde430",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.956402Z",
     "iopub.status.busy": "2024-09-10T14:14:12.956193Z",
     "iopub.status.idle": "2024-09-10T14:14:12.975586Z",
     "shell.execute_reply": "2024-09-10T14:14:12.973549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (9):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (1):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>linked to</th>\n",
       "      <td>source_1.spectrum.main.Powerlaw.index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>function</th>\n",
       "      <td>Line</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>current value</th>\n",
       "      <td>-2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -0.75       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "\n",
       "Fixed parameters (9):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (1):\n",
       "----------------------\n",
       "\n",
       "                 source_2.spectrum.IC.Powerlaw.index\n",
       "linked to      source_1.spectrum.main.Powerlaw.index\n",
       "function                                        Line\n",
       "current value                                   -2.5\n",
       "unit                                                \n",
       "\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.source_2.spectrum.IC.Powerlaw.index.Line.a = -1.2\n",
    "my_model.source_2.spectrum.IC.Powerlaw.index.Line.a.fix = True\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "461290fb",
   "metadata": {},
   "source": [
    "As another example, we might link the two parameters using a power law function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "50d6da49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:12.980956Z",
     "iopub.status.busy": "2024-09-10T14:14:12.980711Z",
     "iopub.status.idle": "2024-09-10T14:14:12.999175Z",
     "shell.execute_reply": "2024-09-10T14:14:12.998647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (7):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.Powerlaw.K</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.Powerlaw.index</th>\n",
       "      <td>-2.01</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (10):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (1):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>linked to</th>\n",
       "      <td>source_1.spectrum.main.Powerlaw.index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>function</th>\n",
       "      <td>Powerlaw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>current value</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (7):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -2.01       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2...K                                 1     1e-30      1000   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2...K                                              \n",
       "\n",
       "Fixed parameters (10):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (1):\n",
       "----------------------\n",
       "\n",
       "                 source_2.spectrum.IC.Powerlaw.index\n",
       "linked to      source_1.spectrum.main.Powerlaw.index\n",
       "function                                    Powerlaw\n",
       "current value                                    NaN\n",
       "unit                                                \n",
       "\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.link(my_model.source_2.spectrum.IC.Powerlaw.index,\n",
    "              my_model.source_1.spectrum.main.Powerlaw.index,\n",
    "              Powerlaw())\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2069864d",
   "metadata": {},
   "source": [
    "We can use arbitrarily complex functions as link function, if needed (see ‚ÄúCreating and modifying functions‚Äù for more info on how to create composite functions):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d560ed9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.001338Z",
     "iopub.status.busy": "2024-09-10T14:14:13.001221Z",
     "iopub.status.idle": "2024-09-10T14:14:13.012862Z",
     "shell.execute_reply": "2024-09-10T14:14:13.012469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (12):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.K</th>\n",
       "      <td>1.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_1.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.3</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.K</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.synchrotron.Powerlaw.index</th>\n",
       "      <td>-0.75</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.K</th>\n",
       "      <td>0.8</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.Powerlaw.K</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.Powerlaw.index</th>\n",
       "      <td>-2.01</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.composite.K_1</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-30</td>\n",
       "      <td>1000</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.composite.index_1</th>\n",
       "      <td>-2.01</td>\n",
       "      <td>-10</td>\n",
       "      <td>10</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.composite.F_2</th>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.composite.mu_2</th>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index.composite.sigma_2</th>\n",
       "      <td>1</td>\n",
       "      <td>1e-12</td>\n",
       "      <td>None</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (11):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (1):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_2.spectrum.IC.Powerlaw.index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>linked to</th>\n",
       "      <td>source_1.spectrum.main.Powerlaw.index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>function</th>\n",
       "      <td>composite</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>current value</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     2\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (12):\n",
       "--------------------\n",
       "\n",
       "                                         value min_value max_value  \\\n",
       "source_1.spectrum.main.Powerlaw.K          1.2     1e-30      1000   \n",
       "source_1.spectrum.main.Powerlaw.index     -1.3       -10        10   \n",
       "source_2.spectrum.synchrotron.Powerlaw.K   0.2     1e-30      1000   \n",
       "source_2...index                         -2.01       -10        10   \n",
       "source_2.spectrum.IC.Powerlaw.K            0.8     1e-30      1000   \n",
       "source_2...K                                 1     1e-30      1000   \n",
       "source_2...K_1                               1     1e-30      1000   \n",
       "source_2...index_1                       -2.01       -10        10   \n",
       "source_2...F_2                               1      None      None   \n",
       "source_2...mu_2                              0      None      None   \n",
       "source_2...sigma_2                           1     1e-12      None   \n",
       "\n",
       "                                                    unit  \n",
       "source_1.spectrum.main.Powerlaw.K         keV-1 s-1 cm-2  \n",
       "source_1.spectrum.main.Powerlaw.index                     \n",
       "source_2.spectrum.synchrotron.Powerlaw.K  keV-1 s-1 cm-2  \n",
       "source_2...index                                          \n",
       "source_2.spectrum.IC.Powerlaw.K           keV-1 s-1 cm-2  \n",
       "source_2...K                                              \n",
       "source_2...K_1                                            \n",
       "source_2...index_1                                        \n",
       "source_2...F_2                                            \n",
       "source_2...mu_2                                           \n",
       "source_2...sigma_2                                        \n",
       "\n",
       "Fixed parameters (11):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (1):\n",
       "----------------------\n",
       "\n",
       "                 source_2.spectrum.IC.Powerlaw.index\n",
       "linked to      source_1.spectrum.main.Powerlaw.index\n",
       "function                                   composite\n",
       "current value                                    NaN\n",
       "unit                                                \n",
       "\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A random composite function (see \"Creating and modifying functions\" for more info)\n",
    "crazy_link = Powerlaw() + Gaussian()\n",
    "\n",
    "my_model.link(my_model.source_2.spectrum.IC.Powerlaw.index,\n",
    "              my_model.source_1.spectrum.main.Powerlaw.index,\n",
    "              crazy_link)\n",
    "\n",
    "my_model.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b7cf5d7",
   "metadata": {},
   "source": [
    "## Time-varying models and other independent variables\n",
    "\n",
    "In astromodels parameters can become functions of independent variables such as time. This is accomplished in a way which is similar to the procedure to link parameters described above. First, let‚Äôs create an independent variable. An IndependentVariable instance is created and added to the model like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a3bd3adb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.014858Z",
     "iopub.status.busy": "2024-09-10T14:14:13.014711Z",
     "iopub.status.idle": "2024-09-10T14:14:13.021091Z",
     "shell.execute_reply": "2024-09-10T14:14:13.020700Z"
    }
   },
   "outputs": [],
   "source": [
    "# Add the time as an independent variable of the model\n",
    "\n",
    "time = IndependentVariable(\"time\",0.0, unit='s')\n",
    "\n",
    "my_model.add_independent_variable(time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa473b55",
   "metadata": {},
   "source": [
    "The IndependentVariable instance is inserted at the root of the model tree. In this case, can be accessed as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7610b9dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.023078Z",
     "iopub.status.busy": "2024-09-10T14:14:13.022975Z",
     "iopub.status.idle": "2024-09-10T14:14:13.025691Z",
     "shell.execute_reply": "2024-09-10T14:14:13.025269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "IndependentVariable time = 0.0\n",
       "(min_value = None, max_value = None)"
      ],
      "text/plain": [
       "IndependentVariable time = 0.0\n",
       "(min_value = None, max_value = None)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_model.time.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9001ca89",
   "metadata": {},
   "source": [
    "We can now link any parameter to be a function of time, like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b2b84560",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.027698Z",
     "iopub.status.busy": "2024-09-10T14:14:13.027565Z",
     "iopub.status.idle": "2024-09-10T14:14:13.029575Z",
     "shell.execute_reply": "2024-09-10T14:14:13.029208Z"
    }
   },
   "outputs": [],
   "source": [
    "# First define the function. In this case, a linear function ax+b\n",
    "law = Line(a=-2,b=-0.02)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68bb8d4a",
   "metadata": {},
   "source": [
    "Now link the index of the sync. component of source_2 to be law(t)\n",
    "i.e., $index = law(t) = a*t + b$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "81e94d86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.031518Z",
     "iopub.status.busy": "2024-09-10T14:14:13.031384Z",
     "iopub.status.idle": "2024-09-10T14:14:13.039466Z",
     "shell.execute_reply": "2024-09-10T14:14:13.039081Z"
    }
   },
   "outputs": [],
   "source": [
    "my_model.link(my_model.source_2.spectrum.synchrotron.Powerlaw.index,\n",
    "             time,\n",
    "             law)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ec1ace1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.041332Z",
     "iopub.status.busy": "2024-09-10T14:14:13.041234Z",
     "iopub.status.idle": "2024-09-10T14:14:13.073660Z",
     "shell.execute_reply": "2024-09-10T14:14:13.073035Z"
    }
   },
   "outputs": [],
   "source": [
    "my_model.save(\"time_dependent.yml\",overwrite=True)\n",
    "\n",
    "my_model = load_model(\"time_dependent.yml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e3a8dea",
   "metadata": {},
   "source": [
    "This would show the link:\n",
    "```my_model.display()```\n",
    "\n",
    "Now changing the value of time will change the value of the parameter\n",
    "according to the law. For example, let's loop over 10 s and print\n",
    "the value of the parameter\n",
    "\n",
    "\n",
    "```python\n",
    "# Reset time\n",
    "my_model.time = 0.0\n",
    "\n",
    "for i in range(10):\n",
    "\n",
    "    my_model.time = my_model.time.value + 1.0\n",
    "\n",
    "    print(\"At time %s s the value of the parameter is %s\" % (my_model.time.value,\n",
    "                    my_model.source_2.spectrum.synchrotron.Powerlaw.index.value))\n",
    "```\n",
    "\n",
    "Now plot the synch. spectrum of the source at different times\n",
    "(you will need matplotlib for this)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "719481f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:14:13.075995Z",
     "iopub.status.busy": "2024-09-10T14:14:13.075882Z",
     "iopub.status.idle": "2024-09-10T14:14:13.456100Z",
     "shell.execute_reply": "2024-09-10T14:14:13.455487Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Differential flux (ph. cm$^{-2}$ s$^{-1}$ keV$^{-1}$)')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "# Prepare 100 logarithmically distributed energies between 1 and 100 keV\n",
    "energies = np.geomspace(1,100,100)\n",
    "\n",
    "# Compute and plot the sync. spectrum every 10 s between 0 and 50 seconds\n",
    "\n",
    "times = np.linspace(0,50,6)\n",
    "\n",
    "my_model.time = 0.0\n",
    "\n",
    "for tt in times:\n",
    "\n",
    "    my_model.time = tt\n",
    "\n",
    "    ax.loglog(energies, my_model.source_2.spectrum.synchrotron(energies),label='t = %s' % my_model.time.value)\n",
    "\n",
    "ax.legend(loc=1,ncol=2)\n",
    "ax.set_xlabel(\"Energy (keV)\")\n",
    "ax.set_ylabel(r\"Differential flux (ph. cm$^{-2}$ s$^{-1}$ keV$^{-1}$)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f85c89de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
