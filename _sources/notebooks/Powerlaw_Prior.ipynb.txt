{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a7a25211",
   "metadata": {
    "papermill": {
     "duration": 0.008957,
     "end_time": "2025-02-05T00:54:15.276594",
     "exception": false,
     "start_time": "2025-02-05T00:54:15.267637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d2492cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:15.288317Z",
     "iopub.status.busy": "2025-02-05T00:54:15.287633Z",
     "iopub.status.idle": "2025-02-05T00:54:16.692619Z",
     "shell.execute_reply": "2025-02-05T00:54:16.692127Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.412454,
     "end_time": "2025-02-05T00:54:16.693929",
     "exception": false,
     "start_time": "2025-02-05T00:54:15.281475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e67f4865",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.697131Z",
     "iopub.status.busy": "2025-02-05T00:54:16.696800Z",
     "iopub.status.idle": "2025-02-05T00:54:16.698969Z",
     "shell.execute_reply": "2025-02-05T00:54:16.698587Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004931,
     "end_time": "2025-02-05T00:54:16.700089",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.695158",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cffa80c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.702698Z",
     "iopub.status.busy": "2025-02-05T00:54:16.702552Z",
     "iopub.status.idle": "2025-02-05T00:54:16.704433Z",
     "shell.execute_reply": "2025-02-05T00:54:16.704040Z"
    },
    "papermill": {
     "duration": 0.004487,
     "end_time": "2025-02-05T00:54:16.705606",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.701119",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b22c089",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.708227Z",
     "iopub.status.busy": "2025-02-05T00:54:16.708092Z",
     "iopub.status.idle": "2025-02-05T00:54:16.717155Z",
     "shell.execute_reply": "2025-02-05T00:54:16.716768Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011552,
     "end_time": "2025-02-05T00:54:16.718224",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.706672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad3cbf6b",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001015,
     "end_time": "2025-02-05T00:54:16.720293",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.719278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3d36d80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.722817Z",
     "iopub.status.busy": "2025-02-05T00:54:16.722671Z",
     "iopub.status.idle": "2025-02-05T00:54:16.726613Z",
     "shell.execute_reply": "2025-02-05T00:54:16.726188Z"
    },
    "papermill": {
     "duration": 0.006454,
     "end_time": "2025-02-05T00:54:16.727704",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.721250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ed53dfa",
   "metadata": {
    "papermill": {
     "duration": 0.001101,
     "end_time": "2025-02-05T00:54:16.730060",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.728959",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "78ef243c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.732805Z",
     "iopub.status.busy": "2025-02-05T00:54:16.732669Z",
     "iopub.status.idle": "2025-02-05T00:54:16.799853Z",
     "shell.execute_reply": "2025-02-05T00:54:16.799518Z"
    },
    "papermill": {
     "duration": 0.070001,
     "end_time": "2025-02-05T00:54:16.801115",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.731114",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "968c208d",
   "metadata": {
    "papermill": {
     "duration": 0.001407,
     "end_time": "2025-02-05T00:54:16.805088",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.803681",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1352ed20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:16.808490Z",
     "iopub.status.busy": "2025-02-05T00:54:16.808344Z",
     "iopub.status.idle": "2025-02-05T00:54:17.119037Z",
     "shell.execute_reply": "2025-02-05T00:54:17.118654Z"
    },
    "papermill": {
     "duration": 0.313884,
     "end_time": "2025-02-05T00:54:17.120353",
     "exception": false,
     "start_time": "2025-02-05T00:54:16.806469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.920848,
   "end_time": "2025-02-05T00:54:17.456522",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-02-05T00:54:14.535674",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}