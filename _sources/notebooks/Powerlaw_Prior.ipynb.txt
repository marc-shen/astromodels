{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "748966d6",
   "metadata": {
    "papermill": {
     "duration": 0.003976,
     "end_time": "2024-05-08T20:08:19.638264",
     "exception": false,
     "start_time": "2024-05-08T20:08:19.634288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e86d89f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:19.644425Z",
     "iopub.status.busy": "2024-05-08T20:08:19.644111Z",
     "iopub.status.idle": "2024-05-08T20:08:22.014315Z",
     "shell.execute_reply": "2024-05-08T20:08:22.013456Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.377208,
     "end_time": "2024-05-08T20:08:22.017895",
     "exception": false,
     "start_time": "2024-05-08T20:08:19.640687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35326e34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.024977Z",
     "iopub.status.busy": "2024-05-08T20:08:22.024480Z",
     "iopub.status.idle": "2024-05-08T20:08:22.028095Z",
     "shell.execute_reply": "2024-05-08T20:08:22.027445Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008403,
     "end_time": "2024-05-08T20:08:22.030263",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.021860",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f336fec5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.034237Z",
     "iopub.status.busy": "2024-05-08T20:08:22.033939Z",
     "iopub.status.idle": "2024-05-08T20:08:22.043016Z",
     "shell.execute_reply": "2024-05-08T20:08:22.042364Z"
    },
    "papermill": {
     "duration": 0.01344,
     "end_time": "2024-05-08T20:08:22.045018",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.031578",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8381f862",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.049063Z",
     "iopub.status.busy": "2024-05-08T20:08:22.048829Z",
     "iopub.status.idle": "2024-05-08T20:08:22.054088Z",
     "shell.execute_reply": "2024-05-08T20:08:22.052450Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009712,
     "end_time": "2024-05-08T20:08:22.056191",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.046479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dbe2b53",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001068,
     "end_time": "2024-05-08T20:08:22.058573",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.057505",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5932a27d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.061701Z",
     "iopub.status.busy": "2024-05-08T20:08:22.061509Z",
     "iopub.status.idle": "2024-05-08T20:08:22.072758Z",
     "shell.execute_reply": "2024-05-08T20:08:22.072000Z"
    },
    "papermill": {
     "duration": 0.015197,
     "end_time": "2024-05-08T20:08:22.074900",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.059703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890a2ccb",
   "metadata": {
    "papermill": {
     "duration": 0.001276,
     "end_time": "2024-05-08T20:08:22.077793",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.076517",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0b92afcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.081419Z",
     "iopub.status.busy": "2024-05-08T20:08:22.081199Z",
     "iopub.status.idle": "2024-05-08T20:08:22.219568Z",
     "shell.execute_reply": "2024-05-08T20:08:22.218686Z"
    },
    "papermill": {
     "duration": 0.144883,
     "end_time": "2024-05-08T20:08:22.223851",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.078968",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad86b693",
   "metadata": {
    "papermill": {
     "duration": 0.00188,
     "end_time": "2024-05-08T20:08:22.227924",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.226044",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f35b6f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T20:08:22.231869Z",
     "iopub.status.busy": "2024-05-08T20:08:22.231670Z",
     "iopub.status.idle": "2024-05-08T20:08:22.693133Z",
     "shell.execute_reply": "2024-05-08T20:08:22.689929Z"
    },
    "papermill": {
     "duration": 0.466022,
     "end_time": "2024-05-08T20:08:22.695286",
     "exception": false,
     "start_time": "2024-05-08T20:08:22.229264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.27528,
   "end_time": "2024-05-08T20:08:23.232468",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-08T20:08:18.957188",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}