{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f0998c60",
   "metadata": {
    "papermill": {
     "duration": 0.010442,
     "end_time": "2025-04-29T23:54:02.416918",
     "exception": false,
     "start_time": "2025-04-29T23:54:02.406476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b46ae797",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:02.431915Z",
     "iopub.status.busy": "2025-04-29T23:54:02.431273Z",
     "iopub.status.idle": "2025-04-29T23:54:03.838431Z",
     "shell.execute_reply": "2025-04-29T23:54:03.837961Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.415721,
     "end_time": "2025-04-29T23:54:03.839720",
     "exception": false,
     "start_time": "2025-04-29T23:54:02.423999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a27980a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.842758Z",
     "iopub.status.busy": "2025-04-29T23:54:03.842429Z",
     "iopub.status.idle": "2025-04-29T23:54:03.844683Z",
     "shell.execute_reply": "2025-04-29T23:54:03.844283Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004784,
     "end_time": "2025-04-29T23:54:03.845726",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.840942",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b218a93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.848220Z",
     "iopub.status.busy": "2025-04-29T23:54:03.848074Z",
     "iopub.status.idle": "2025-04-29T23:54:03.854950Z",
     "shell.execute_reply": "2025-04-29T23:54:03.854541Z"
    },
    "papermill": {
     "duration": 0.009322,
     "end_time": "2025-04-29T23:54:03.856012",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.846690",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5f8bad03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.858607Z",
     "iopub.status.busy": "2025-04-29T23:54:03.858466Z",
     "iopub.status.idle": "2025-04-29T23:54:03.867225Z",
     "shell.execute_reply": "2025-04-29T23:54:03.866812Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011175,
     "end_time": "2025-04-29T23:54:03.868232",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.857057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7a3f593",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001024,
     "end_time": "2025-04-29T23:54:03.870339",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.869315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "76196fe3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.872981Z",
     "iopub.status.busy": "2025-04-29T23:54:03.872837Z",
     "iopub.status.idle": "2025-04-29T23:54:03.876755Z",
     "shell.execute_reply": "2025-04-29T23:54:03.876283Z"
    },
    "papermill": {
     "duration": 0.006436,
     "end_time": "2025-04-29T23:54:03.877775",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.871339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "286bafa8",
   "metadata": {
    "papermill": {
     "duration": 0.001143,
     "end_time": "2025-04-29T23:54:03.880070",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.878927",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c66913b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.882886Z",
     "iopub.status.busy": "2025-04-29T23:54:03.882738Z",
     "iopub.status.idle": "2025-04-29T23:54:03.949552Z",
     "shell.execute_reply": "2025-04-29T23:54:03.949214Z"
    },
    "papermill": {
     "duration": 0.069602,
     "end_time": "2025-04-29T23:54:03.950807",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.881205",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a733d32",
   "metadata": {
    "papermill": {
     "duration": 0.001421,
     "end_time": "2025-04-29T23:54:03.953820",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.952399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1774445",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:54:03.957042Z",
     "iopub.status.busy": "2025-04-29T23:54:03.956894Z",
     "iopub.status.idle": "2025-04-29T23:54:04.277287Z",
     "shell.execute_reply": "2025-04-29T23:54:04.276779Z"
    },
    "papermill": {
     "duration": 0.323315,
     "end_time": "2025-04-29T23:54:04.278419",
     "exception": false,
     "start_time": "2025-04-29T23:54:03.955104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.725684,
   "end_time": "2025-04-29T23:54:04.610604",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-04-29T23:54:01.884920",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}