{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "58d56ba2",
   "metadata": {
    "papermill": {
     "duration": 0.003291,
     "end_time": "2023-11-01T22:37:21.759436",
     "exception": false,
     "start_time": "2023-11-01T22:37:21.756145",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "837ad943",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:21.767494Z",
     "iopub.status.busy": "2023-11-01T22:37:21.766912Z",
     "iopub.status.idle": "2023-11-01T22:37:25.208393Z",
     "shell.execute_reply": "2023-11-01T22:37:25.206211Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.450807,
     "end_time": "2023-11-01T22:37:25.213284",
     "exception": false,
     "start_time": "2023-11-01T22:37:21.762477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "00596c87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.222674Z",
     "iopub.status.busy": "2023-11-01T22:37:25.221142Z",
     "iopub.status.idle": "2023-11-01T22:37:25.228716Z",
     "shell.execute_reply": "2023-11-01T22:37:25.227238Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017538,
     "end_time": "2023-11-01T22:37:25.233492",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.215954",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5df6ca3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.241369Z",
     "iopub.status.busy": "2023-11-01T22:37:25.240910Z",
     "iopub.status.idle": "2023-11-01T22:37:25.247527Z",
     "shell.execute_reply": "2023-11-01T22:37:25.245265Z"
    },
    "papermill": {
     "duration": 0.015396,
     "end_time": "2023-11-01T22:37:25.251821",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.236425",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2760b07a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.258961Z",
     "iopub.status.busy": "2023-11-01T22:37:25.258540Z",
     "iopub.status.idle": "2023-11-01T22:37:25.267390Z",
     "shell.execute_reply": "2023-11-01T22:37:25.265746Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01774,
     "end_time": "2023-11-01T22:37:25.272120",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.254380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c42b00ea",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003246,
     "end_time": "2023-11-01T22:37:25.277976",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.274730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "810e0a5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.286947Z",
     "iopub.status.busy": "2023-11-01T22:37:25.286484Z",
     "iopub.status.idle": "2023-11-01T22:37:25.302306Z",
     "shell.execute_reply": "2023-11-01T22:37:25.300686Z"
    },
    "papermill": {
     "duration": 0.025894,
     "end_time": "2023-11-01T22:37:25.307258",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.281364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfa16d07",
   "metadata": {
    "papermill": {
     "duration": 0.003515,
     "end_time": "2023-11-01T22:37:25.313772",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.310257",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "06f2a989",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.323274Z",
     "iopub.status.busy": "2023-11-01T22:37:25.322686Z",
     "iopub.status.idle": "2023-11-01T22:37:25.638057Z",
     "shell.execute_reply": "2023-11-01T22:37:25.635794Z"
    },
    "papermill": {
     "duration": 0.325881,
     "end_time": "2023-11-01T22:37:25.642917",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.317036",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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oBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBBdJgDXrl2bIUOGZO3ate+7p1KpZM6cOTnyyCNz2GGH5dvf/nZWr17dcnzz5s259tprc9RRR+VTn/pUxo8fn0ceeaQjxgcAAOjyukQAvvHGG5k5c2a2bNnygfvmzp2bu+66K9OnT8+8efOyadOmnHvuuS3Hf/CDH+TOO+/M1KlTc//99+cv/uIvct555+WFF17Y1U8BAACgy+vW2QNcdtllueeee/7TfZVKJbfeemsmTZqUz3/+80mS6dOn5+ijj87zzz+fQw89NPfee2/OPvvsjB8/PklSX1+fRYsW5e67786MGTN26fMAAADo6jr9CuA555yT+fPn58orr/zAfS+//HJWr16dMWPGtKz1798/AwcOzOLFi9PY2Jg99tgjw4YN2+rr+vbtm1WrVu2S2QEAAHYnnX4FsH///unfv3/WrVv3gfuWL1+e6urqDBgwYKv1fv36Zc2aNdlzzz3zxBNPbHXsD3/4Q5566ql885vfbO+xAQAAdjudHoA7qqGhITU1Namu3vqiZa9evdLQ0LDN/sceeyyXXXZZ+vTpkzPOOKPN33f06NHve2zy5Mk56KCD2vzYAAAAHanTXwK6o2pra9PY2Jjm5uat1hsbG1NbW9vy57Vr12bixImZOHFihg4dmnvuuSd77713R48LAADQ5ew2VwDr6upSqVSycuXK9O/fv2V95cqV+cIXvpAkWbFiRU477bQ0Nzfn+uuvz7hx43b6+y5cuPB9jy1btmy7Vx8BAAC6ot3mCmB9fX3233//PPnkky1rK1asyPLly1tepnnZZZelZ8+emT9/frvEHwAAwIdJl74C+Prrryd590Yv1dXVmTBhQmbPnp26urr06NEjV111VcaOHZsDDzwwa9euzaJFizJjxoy8/fbbefvtt1sep0ePHunXr19nPQ0AAIAuoUsH4Pnnn58kmTdvXpJ3PzJi48aNmTJlSt55552MHTs206ZNS5K88sorqVQqueSSS7Z5nM9+9rMtjwEAAFCqqkqlUunsIXZX770HsHfv3qmvr+/scQAAgAK1pkt2m/cAAgAAsaFICXXnppli5d2t6zAAAAsAu1KQD/+Z//OaeeemrGjRuX66+/PitWrGjvuQAAAGhnbQrARYsWZfbs2Rk8eHB+/OMf59hjj82ECRNy3333Zf369e09IwAAAO2gqlKpVHbmATZs2JCf/exnWbBgQRYuXJg99tgjxx13XE499dTU19e315xd0rJly9LQ0JDevXt/6J8rAADQNbWmS3b6JjC9evXKMccck/Hjx+fTn/50Nm7cmAcffDAnnnhizjzzzCxfvnxnvwUAAADtoM0BuGnTpixYsCCTJk3KyJEjc8EFF2Tz5s2ZMWNGlixZkrlz5+bNN9/MBRdc0J7zAgAA0Ebd2vJFf/u3f5snnngiGzduzIABA3LGGWfkS1/6Ug444ICWPaNGjcrZZ58tAAEAALqINgXgL37xi3zxi1/MiSeemOHDh7/vvsGDB+e73/1um4cDAACg/bQpAK+55pocdthhqa2t3ebYW2+9leXLl2fo0KEZNGhQBg0atLMzAgAA0A7a9B7Ac845J88///x2jz311FM59dRTd2ooAAAA2t8OXwG87bbbcttttyVJKpVKLrjggtTU1Gyz780338x+++3XbgMCAADQPnY4AAcOHJiRI0cmSR566KHU19enX79+2+zr3bt3TjzxxPabEAAAgHaxwwF4zDHH5JhjjkmSvPLKK/m7v/u7HHroobtsMAAAANrXDgdgc3Nzqqvffcvg7bff3rL2ft7bCwAAQNewwwF4yCGH5Mc//nGOPPLIDBkyJFVVVe+7t6qqKv/6r//aLgMCAADQPnY4ACdOnNjyQe8TJ078wAAEAACg66mqVCqVzh5id7Vs2bI0NDSkd+/eqa+v7+xxAACAArWmS3b4CuCiRYtaNcR7dwwFAACga9jhAPyrv/qrVFVV5YMuGL53vKqqKi+++GK7DAgAAED72OEA/MlPfrIr5wAAAGAX2+EA/OxnP7sr5wAAAGAX2+EAnDNnTk488cQccMABmTNnzgfuraqqyqRJk3Z6OAAAANrPDgfgD3/4wxx++OE54IAD8sMf/vAD9wpAAACArmeHA3DZsmXb/XcAAAB2DzscgNvT2NiYf/u3f0tTU1MGDhyY/fbbr73mAgAAoJ21KQArlUpmz56dn/zkJ9m0aVPL+sc//vH87d/+bY455ph2GxAAAID20aYAvOmmm3LjjTfmz//8zzN+/Pj06dMnK1euzD//8z/nv//3/55Zs2blS1/6UjuPCgAAwM5oUwDec889OfHEEzNr1qyt1v/yL/8yf//3f58bb7xRAAIAAHQx1W35otWrV+fP//zPt3vs2GOPzauvvrozMwEAALALtCkADz744PzmN7/Z7rFXXnklgwYN2pmZAAAA2AXaFIAXXnhh7rjjjsyfPz9NTU1Jkqampjz88MO59dZbM3Xq1HYdEgAAgJ1XValUKjuysb6+PlVVVS1/fu/Lqqqqstdee2XDhg1pbm5Ot27dstdee2XRokWtGmTt2rUZPXp0Fi5cmD59+mx3T6VSyXXXXZd77703GzZsyJFHHplp06Zt9fETd9xxR3784x/nzTffzKc//elcfvnl+dM//dNWzbKjli1bloaGhvTu3Tv19fW75HsAAAB8kNZ0yQ7fBOaqq67aKgDb0xtvvJHvfve72bJlywfumzt3bu66667MnDkz/fr1y+zZs3Puuefm3nvvTZIsWLAg3/ve93LFFVekvr4+t956a84888w88sgj6dGjxy6ZHQAAYHexwwH45S9/eYf2rV27Nq+88soOD3DZZZflnnvu+U/3VSqV3HrrrZk0aVI+//nPJ0mmT5+eo48+Os8//3wOPfTQzJ07N6eeemrLHUivuOKKHHHEEfn5z3+eL3zhCzs80+6oubmSdW83d/YYAABQjNq9q1NdvWsuku0qbfoYiCRZt25dfvOb32Tz5s1brS9evDi33357/uVf/mWHHuecc87JhAkT8utf/zqXXHLJ++57+eWXs3r16owZM6ZlrX///hk4cGAWL16cP/3TP80LL7yQ888/v+V4jx49MnTo0CxevPhDH4Dr3m7Ol894rbPHAACAYjx4y0ezz0f26OwxWqVNAbh06dKcddZZ2bRp03aPjxo1aocfq3///unfv3/WrVv3gfuWL1+e6urqDBgwYKv1fv36Zc2aNXnllVfS3Nycj33sY9s93lajR49+32OTJ0/OQQcd1ObHBgAA6EhtCsAbbrghgwYNypQpU3L33Xene/fuOemkk/Lkk0/mf//v/505c+a095xpaGhITU1Nqqu3vnFpr1690tDQkIaGhiTZ5r1+vXr12qkABAAA+LBoUwC+8MIL+c53vpORI0fm7bffzk9+8pOMHDkyI0eOzKpVq/KDH/wgU6ZMaddBa2tr09jYmObm5q0isLGxMbW1tamtrU2SbNy4cauva2pqajnWFgsXLnzfY+/dbQcAAGB30KYAbGpqSq9evZIkAwYMyO9///uWY0cffXRmzZrV7gFYV1eXSqWSlStXpn///i3rK1euzBe+8IXsv//+SZLXXnstAwcObDn+2muvZciQIe06S1dUu3d1Hrzlo509BgAAFKN27zZ9rHqnalMAfuITn8hjjz2WY489NgceeGDLnT8HDhyYP/7xj3n77bfbe87U19dn//33z5NPPpmvfOUrSZIVK1Zk+fLlGT16dPbZZ58MHTo0CxcuzPDhw5Mk69evz69+9at861vfavd5uprq6qrd7g2oAABAx2pTAJ599tmZPHlyXnvttcybNy+f/exnc9ZZZ2XMmDH5p3/6pxx++OHtMtzrr7+e5N0buVRXV2fChAmZPXt26urq0qNHj1x11VUZO3ZsDjzwwCTJKaeckiuuuCIHH3xwPvrRj+a6667LoEGDcsQRR7TLPAAAALuzNgXguHHjcuedd+all15KksyYMSMXXnhh7r///gwdOjTTp09vl+He+0iHefPmJXn3IyM2btyYKVOm5J133snYsWMzbdq0lv1f+tKXsnbt2syaNStvv/12RowYkR/96Efb3DgGAACgRFWVSqXS2UPsrt67CUzv3r1TX1/f2eMAAAAFak2XtPmD4FevXp277747L7zwQpqamjJgwICMGjXqQ/+B6wAAALurNgXgSy+9lNNOOy1vvfVWDjjggPTp0ye/+MUvcu+992bw4MG5+eabs99++7X3rAAAAOyENgXgP/zDP6SmpiYPPPBADjnkkJb1pUuXZvLkyZk1a1a+//3vt9uQAAAA7Lw23R1l6dKlmThx4lbxlySHH354/uZv/iZPPPFEuwwHAABA+2lTAPbs2TM9e/bc7rG+ffu66yYAAEAX1KZSO/7443P33Xdny5YtW61XKpXcd999bgQDAADQBe3wewCvv/76ln/v0aNHfv3rX+e4447LuHHjst9++2Xt2rV57LHH8sYbb+TII4/cJcMCAADQdjv8OYBjx47d8QetqsrPfvazNg+1u/A5gAAAQGfbJZ8D+Pjjj+/0YAAAAHSeNn8QfJL867/+a5599tls2LAhdXV1GTVqVOrq6tprNgAAANpRmwJwy5YtmTJlSh555JH8v68g7datW0477bRceOGF7TYgAAAA7aNNAXjzzTfnscceyyWXXJJx48Zlr732yquvvpqHH344t9xyS/r27ZuzzjqrvWcFAABgJ7QpAB944IF861vfyimnnNKy9olPfCJ/93d/l27duuX+++8XgAAAAF1Mmz4H8LXXXsvBBx+83WODBw/Oq6++ulNDAQAA0P7aFID9+vXLiy++uN1jL730Umpra3dqKAAAANpfmwLwhBNOyE033ZQ777wzmzZtSvLujWEeeeSR3HTTTRk3bly7DgkAAMDOa9N7ACdOnJjf/e53mT59eq688srss88+WbduXbZs2ZJhw4bl/PPPb+85AQAA2EltCsBu3bplzpw5+eUvf5knn3wyq1evzl577ZXDDz88Y8eOTXV1my4sAgAAsAu1OgDfeeedXH755Tn99NPzmc98Jp/5zGd2xVwAAAC0s1ZfquvevXueeeaZPPvss7tiHgAAAHaRNr1Wc8qUKfnRj36U5557rr3nAQAAYBdp03sAb7jhhjQ0NORrX/taamtr07Nnz62OV1VV5f/8n//TLgMCAADQPtoUgIMHD87gwYPbexYAAAB2oTYF4KxZs9p7DgAAAHaxNgVgkjQ1NeXRRx/Nc889l40bN6Zv3745/P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fm6aefbvkcv//4j//I9OnTs3Tp0nTv3j1f/vKXc95556W6+t0LmevXr88Pf/jDPProo1m9enUGDhyY008/PV/96ld3yezvvQS0d+/eqa+v3yXfAwAA4IO0pks6PQB3ZwIQAADobK3pkk59DyAAAAAdRwACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUotMDsKmpKZdffnlGjBiR4cOH56KLLkpDQ8N2927YsCEXXXRRhg8fnsMPPzwTJ07MG2+8sdWeZ599Nl/72tcydOjQHHXUUbnppps64mkAAAB0eZ0egLNmzcpTTz2V2bNn56abbsqyZcty8cUXb3fvzJkzs3jx4lx99dW55ZZbsnHjxpxzzjlpbm5OkqxYsSJnnXVWhg0blnvvvTdnnnlmZs+enaeeeqojnxIAAECX1K0zv/m6dety33335YYbbsjIkSOTJN/5znfyjW98I2vWrEnfvn232vvQQw/lf/yP/5HPfe5zSZKrr746Rx55ZJYsWZKRI0fmtttuy8c//vFcdNFFSZL6+vr86le/ylNPPZVRo0Z1/BMEAADoQjr1CuCzzz6bJC3xlyTDhg1Lt27dsmTJkq32/v73v8+WLVtyyCGHtKz16dMn++67b5YuXZokWbhwYY477ritvu6aa67J+eefv6ueAgAAwG6jU68ALl++PHV1dampqWlZq6mpSZ8+fbJmzZqt9vbp0ydJsmrVqvzJn/xJkmTTpk156623snr16jQ1NbVE4plnnpnnnnsuf/Inf5JvfvObOemkk9o84+jRo9/32OTJk3PQQQe1+bEBAAA6UqdeAWxoaEiPHj22We/Vq9c2N4IZMGBAhg0bljlz5mTNmjVZv359rrjiimzZsiVJ8sc//jFJcv3112fMmDG55ZZbcuKJJ+bSSy/Nww8/vOufDAAAQBfXqVcAa2trs2nTpm3WGxsbU1tbu9VaVVVVrr766px33nkZNWpUqqqqMnr06AwdOjT77rtvy41gTjrppHzzm99Mkhx66KF5/vnn88ADD+S//tf/2qYZFy5c+L7Hli1b9r53LAUAAOhqOjUA6+rqsmrVqjQ1NbW8DHTz5s1ZtWpVBgwYsM3+Aw44IPfff3/efPPNNDc3p0+fPjniiCNyyCGHZN99980ee+yxzUsy/+zP/iwLFizokOcDAADQlXXqS0BHjBiRSqWSX/7yly1rzzzzTCqVSoYPH77V3g0bNuTYY4/NkiVLsu+++6Zv375ZvHhxGhsbM2LEiNTU1GTw4MF58cUXt/q6l156yfv0AAAA0gVeAnrCCSdkxowZmT59ejZs2JBp06bl5JNPTq9evbJmzZps2rQpAwYMSK9evdKnT59cc801mTJlSt58881Mnz49p59+evbee+8kydlnn53zzz8/H//4xzNixIgsWbIkjz32WO66667OfJoAAABdQlWlUql05gAbN27MzJkzs2DBgnTr1i3HH398LrzwwnTv3j1Tp07N008/nccffzxJ8h//8R+ZPn16li5dmu7du+fLX/5yzjvvvFRX/98Lmf/0T/+UG264Ia+++moGDRqUyZMnZ9y4cbtk9vfeA9i7d+/U19fvku8BAADwQVrTJZ0egLszAQgAAHS21nRJp74HEAAAgI4jAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAArRrbMH2J01NjYmSTZu3Jhly5Z18jQAAECJNm7cmOT/9skHEYA7obm5ueV/GxoaOnkaAACgZO/1yQcRgDuhpqYmTU1Nqa6uzp577tnZ4yRJnn/++STJoYce2smTsDtzHtFenEu0B+cR7cW5RHvoiudRY2NjmpubU1NT85/urapUKpUOmIkOMnr06CTJwoULO3kSdmfOI9qLc4n24DyivTiXaA+7+3nkJjAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFcBdQAACAQrgCCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBuJtpamrK5ZdfnhEjRmT48OG56KKL0tDQ8L7777jjjhx99NH59Kc/nW9+85v593//9w6clq6sNefS5s2bc+211+aoo47Kpz71qYwfPz6PPPJIB09MV9Tan0nv+d3vfpdhw4bl0Ucf7YAp2R209lx6/PHHc/zxx+fQQw/NMccck4ceeqgDp6Wras15VKlUcuutt2bcuHH5L//lv+T000/Pyy+/3MET09WtXbs2Q4YMydq1a993T6VSyZw5c3LkkUfmsMMOy7e//e2sXr26A6dsHQG4m5k1a1aeeuqpzJ49OzfddFOWLVuWiy++eLt7FyxYkO9973uZPHly7r777vTr1y9nnnlmNm3a1MFT0xW15lz6wQ9+kDvvvDNTp07N/fffn7/4i7/IeeedlxdeeKGDp6arac159J4tW7Zk6tSpfhaxldacS//yL/+SSZMm5fjjj899992X4447LhdffHH+7d/+rYOnpqtpzXn0wAMP5Prrr8/f//3f5/bbb0+vXr1y1lln7dBfYlGGN954IzNnzsyWLVs+cN/cuXNz1113Zfr06Zk3b142bdqUc889t4OmbIMKu40//vGPlUMOOaTy85//vGXt6aefrtTX11dWr169zf6TTjqp8r3vfa/lzxs3bqwMGzassmDBgg6Zl66rtefSkUceWbnxxhu3Wvva175WueSSS3b5rHRdrT2P3nPjjTdWTjvttMonP/lJP4+oVCqtP5f++q//ujJ58uSt1k4++eTK//yf/3NXj0oX1trz6Otf/3rlyiuvbPnz2rVrKwcffHDliSee6JB56douvfTSyic/+cmWf9asWbPdfc3NzZVRo0ZV7rjjjpa1V199tfLJT36y8txzz3XUuK3iCuBu5Nlnn02SjBw5smVt2LBh6datW5YsWbLV3vXr1+eFF17ImDFjWtZ69OiRoUOHZvHixR0zMF1Wa86lxsbG7LHHHhk2bNhW63379s2qVat2/bB0Wa05j97z29/+NnPnzs3MmTM7ZEZ2D605lzZv3pzFixfnuOOO22r9rrvuyimnnLLrh6XLau3PpHXr1qVXr14tf95zzz1TVVWVpqamXT8sXd4555yT+fPn58orr/zAfS+//HJWr1691e/c/fv3z8CBA7vs79wCcDeyfPny1NXVpaampmWtpqYmffr0yZo1a7ba+8orr6S5uTkf+9jHtlrv16/fNnspT2vOpT333DNPPPFERowY0bL2hz/8IU899VQGDx7cYTPT9bTmPEre/cV96tSpmTRp0jY/myhba86lFStWZOPGjXnrrbcyYcKEDB8+PCeddFIef/zxjh6bLqa1P5PGjBmTBx98ML/5zW/S2NiYa665Jr169crw4cM7cmy6qP79+2fw4ME54IADPnDf8uXLU11dnQEDBmy13pV/5xaAu5GGhob06NFjm/VevXpt83r19/78/9+/vb2UpzXn0v/fY489lgkTJqRPnz4544wzdtWI7AZaex796Ec/Su/evfP1r3+9I8ZjN9Kac+mPf/xjkuTaa6/NX/7lX2bu3LkZNWpUJk6cmF/+8pcdMi9dU2t/Jv3N3/xNevbsmRNOOCHDhg3LvHnz8td//df5yEc+0hHj8iHR0NCQmpqaVFdvnVVd+Xfubp09ADuutrZ2uzdNaGxsTG1t7TZ7k2Tjxo1brTc1NW2zl/K05lx6z9q1a3PppZfmsccey9FHH50rr7wye++9964elS6sNefRiy++mNtvvz0PPvhgqqqqOmpEdhOtOZeam5uTJGeffXZOOumkJMnQoUOzZMmSzJ8/P5/5zGd2/cB0Sa39b9u5556bmpqa3Hjjjdlvv/3y85//PNdee20+8YlP5Oijj+6IkfkQqK2tTWNjY5qbm7eKwA/6naqzCcDdSF1dXVatWpWmpqaWlzds3rw5q1at2uay8/77758kee211zJw4MCW9ddeey1DhgzpuKHpklpzLiXvvuTqtNNOS3Nzc66//vqMGzeuo0emC2rNebRkyZKsX78+48eP32r9/PPPz9y5c3Pfffd12Nx0Pa05l/r27ZskOeigg7Za/7M/+zPvSy5ca86j3/zmN3n66adzxx13tPylwac+9an8+te/zkMPPSQA2WF1dXWpVCpZuXJl+vfv37K+cuXKfOELX+jEyd6fl4DuRkaMGJFKpbLVS1yeeeaZVCqVbV6vvs8++2To0KFZuHBhy9r69evzq1/9KqNHj+6wmemaWnMuJclll12Wnj17Zv78+eKPFq05j0488cQ8/PDDmT9/fss/STJlypRce+21HTk2XVBrzqWPfexj6du3b1588cWt1l966aVtopCytOY8er/b+tfU1GTPPffcpXPy4VJfX5/9998/Tz75ZMvaihUrsnz58i77O7crgLuR2tranHDCCZkxY0amT5+eDRs2ZNq0aTn55JPTq1evrFmzJps2bWr5W65TTjklV1xxRQ4++OB89KMfzXXXXZdBgwbliCOO6ORnQmdrzbm0du3aLFq0KDNmzMjbb7+dt99+u+VxevTokX79+nXiM6EzteY8+shHPrLd99XU1dVt9SoFytSac6m6ujpnnnlmbrjhhuy///4ZMmRIHn300bz00ku57rrrOvup0Ilacx7V19fnk5/8ZK644opccMEF6devXxYtWpSf/exn+fGPf9zZT4Uu7vXXX0/y7o1eqqurM2HChMyePTt1dXXp0aNHrrrqqowdOzYHHnhgJ0+6fVWVSqXS2UOw4zZu3JiZM2dmwYIF6datW44//vhceOGF6d69e6ZOnZqnn356qzuh3XLLLbn11lvz9ttvZ8SIEZk+fbpf2Emy4+fSc889l6985SvbfYzPfvazmTdvXgdPTlfS2p9J/6+DDz44c+bM6bIvkaFjtfZcuu2223Lbbbdl9erVqa+vz4UXXujujbTqPFq9enWuu+66/PznP8+6dety0EEH5dxzz80xxxzTyc+CrmTJkiX5xje+kUWLFqVPnz5JktNOOy1JWn4H2rJlS6699trcd999eeeddzJ27NhMmzYte+21V6fN/UEEIAAAQCG8BxAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAOtgdd9yRgw8+OHPnzm1Ze+mll/KpT30q3/nOdzpxMgA+7KoqlUqls4cAgJJUKpV84xvfyPPPP5+HH344/fv3z4QJE7Jy5co8/PDD2XvvvTt7RAA+pAQgAHSC5cuX54QTTsjw4cMzZsyYzJw5MzfffHOOOuqozh4NgA8xAQgAneT222/PVVddlW7duuVLX/pSZs6c2dkjAfAh5z2AANBJTjrppPTo0SObN2/Oqaee2tnjAFAAAQgAneT73/9+mpubs/fee2fWrFnxohwAdjUBCACdYMmSJbnrrrvyrW99K1OmTMmSJUty5513dvZYAHzIeQ8gAHSwDRs25IQTTsgee+yRn/70p+nevXtOO+20vPDCC/npT3+agQMHdvaIAHxIuQIIAB3s+9//flasWJFp06alpqYmVVVVmTFjRrZs2ZKLL77YS0EB2GVcAQQAACiEK4AAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACF+P8AgvdJvzigGYoAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71eb5fe5",
   "metadata": {
    "papermill": {
     "duration": 0.005282,
     "end_time": "2023-11-01T22:37:25.653046",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.647764",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "df463927",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T22:37:25.664945Z",
     "iopub.status.busy": "2023-11-01T22:37:25.664399Z",
     "iopub.status.idle": "2023-11-01T22:37:26.700269Z",
     "shell.execute_reply": "2023-11-01T22:37:26.698758Z"
    },
    "papermill": {
     "duration": 1.047709,
     "end_time": "2023-11-01T22:37:26.705833",
     "exception": false,
     "start_time": "2023-11-01T22:37:25.658124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.784816,
   "end_time": "2023-11-01T22:37:27.447610",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-01T22:37:20.662794",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}