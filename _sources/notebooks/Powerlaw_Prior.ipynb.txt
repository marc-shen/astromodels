{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6fb7111",
   "metadata": {
    "papermill": {
     "duration": 0.010706,
     "end_time": "2024-09-10T20:24:05.425210",
     "exception": false,
     "start_time": "2024-09-10T20:24:05.414504",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "37645fd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:05.438267Z",
     "iopub.status.busy": "2024-09-10T20:24:05.437643Z",
     "iopub.status.idle": "2024-09-10T20:24:06.844141Z",
     "shell.execute_reply": "2024-09-10T20:24:06.843650Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.414395,
     "end_time": "2024-09-10T20:24:06.845653",
     "exception": false,
     "start_time": "2024-09-10T20:24:05.431258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2ff491a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.848824Z",
     "iopub.status.busy": "2024-09-10T20:24:06.848502Z",
     "iopub.status.idle": "2024-09-10T20:24:06.856931Z",
     "shell.execute_reply": "2024-09-10T20:24:06.856551Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011423,
     "end_time": "2024-09-10T20:24:06.858269",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.846846",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5785f850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.860946Z",
     "iopub.status.busy": "2024-09-10T20:24:06.860799Z",
     "iopub.status.idle": "2024-09-10T20:24:06.868472Z",
     "shell.execute_reply": "2024-09-10T20:24:06.868107Z"
    },
    "papermill": {
     "duration": 0.010418,
     "end_time": "2024-09-10T20:24:06.869732",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.859314",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "46e12d71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.872383Z",
     "iopub.status.busy": "2024-09-10T20:24:06.872238Z",
     "iopub.status.idle": "2024-09-10T20:24:06.881239Z",
     "shell.execute_reply": "2024-09-10T20:24:06.880852Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011714,
     "end_time": "2024-09-10T20:24:06.882485",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.870771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dae336df",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001036,
     "end_time": "2024-09-10T20:24:06.884595",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.883559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b43315b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.887307Z",
     "iopub.status.busy": "2024-09-10T20:24:06.887169Z",
     "iopub.status.idle": "2024-09-10T20:24:06.891109Z",
     "shell.execute_reply": "2024-09-10T20:24:06.890601Z"
    },
    "papermill": {
     "duration": 0.00674,
     "end_time": "2024-09-10T20:24:06.892416",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.885676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28e9023f",
   "metadata": {
    "papermill": {
     "duration": 0.001125,
     "end_time": "2024-09-10T20:24:06.894661",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.893536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2682aa3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.897431Z",
     "iopub.status.busy": "2024-09-10T20:24:06.897287Z",
     "iopub.status.idle": "2024-09-10T20:24:06.985272Z",
     "shell.execute_reply": "2024-09-10T20:24:06.984948Z"
    },
    "papermill": {
     "duration": 0.090937,
     "end_time": "2024-09-10T20:24:06.986664",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.895727",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eb4a408",
   "metadata": {
    "papermill": {
     "duration": 0.00145,
     "end_time": "2024-09-10T20:24:06.989675",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.988225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1ae7eb04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:24:06.993056Z",
     "iopub.status.busy": "2024-09-10T20:24:06.992918Z",
     "iopub.status.idle": "2024-09-10T20:24:07.318768Z",
     "shell.execute_reply": "2024-09-10T20:24:07.318416Z"
    },
    "papermill": {
     "duration": 0.329253,
     "end_time": "2024-09-10T20:24:07.320211",
     "exception": false,
     "start_time": "2024-09-10T20:24:06.990958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.737867,
   "end_time": "2024-09-10T20:24:07.654279",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-09-10T20:24:04.916412",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}