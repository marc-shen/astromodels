{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6a22743",
   "metadata": {
    "papermill": {
     "duration": 0.009307,
     "end_time": "2024-09-11T21:49:53.300680",
     "exception": false,
     "start_time": "2024-09-11T21:49:53.291373",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ab5bbd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:53.313427Z",
     "iopub.status.busy": "2024-09-11T21:49:53.312228Z",
     "iopub.status.idle": "2024-09-11T21:49:54.706005Z",
     "shell.execute_reply": "2024-09-11T21:49:54.705530Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.401526,
     "end_time": "2024-09-11T21:49:54.707564",
     "exception": false,
     "start_time": "2024-09-11T21:49:53.306038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4fd413e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.710734Z",
     "iopub.status.busy": "2024-09-11T21:49:54.710432Z",
     "iopub.status.idle": "2024-09-11T21:49:54.718835Z",
     "shell.execute_reply": "2024-09-11T21:49:54.718465Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011398,
     "end_time": "2024-09-11T21:49:54.720159",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.708761",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6a1bca7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.722783Z",
     "iopub.status.busy": "2024-09-11T21:49:54.722635Z",
     "iopub.status.idle": "2024-09-11T21:49:54.730399Z",
     "shell.execute_reply": "2024-09-11T21:49:54.730026Z"
    },
    "papermill": {
     "duration": 0.010427,
     "end_time": "2024-09-11T21:49:54.731619",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.721192",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b3376c3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.734305Z",
     "iopub.status.busy": "2024-09-11T21:49:54.734167Z",
     "iopub.status.idle": "2024-09-11T21:49:54.736920Z",
     "shell.execute_reply": "2024-09-11T21:49:54.736538Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005457,
     "end_time": "2024-09-11T21:49:54.738123",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.732666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61d4042b",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000968,
     "end_time": "2024-09-11T21:49:54.740102",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.739134",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1f7a3b37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.742568Z",
     "iopub.status.busy": "2024-09-11T21:49:54.742437Z",
     "iopub.status.idle": "2024-09-11T21:49:54.746458Z",
     "shell.execute_reply": "2024-09-11T21:49:54.746067Z"
    },
    "papermill": {
     "duration": 0.006688,
     "end_time": "2024-09-11T21:49:54.747718",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.741030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f39cd95",
   "metadata": {
    "papermill": {
     "duration": 0.001137,
     "end_time": "2024-09-11T21:49:54.749954",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.748817",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1ac001d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.752884Z",
     "iopub.status.busy": "2024-09-11T21:49:54.752733Z",
     "iopub.status.idle": "2024-09-11T21:49:54.850746Z",
     "shell.execute_reply": "2024-09-11T21:49:54.850331Z"
    },
    "papermill": {
     "duration": 0.101115,
     "end_time": "2024-09-11T21:49:54.852129",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.751014",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e702d29b",
   "metadata": {
    "papermill": {
     "duration": 0.001351,
     "end_time": "2024-09-11T21:49:54.855067",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.853716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a05c4b8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:54.858290Z",
     "iopub.status.busy": "2024-09-11T21:49:54.858142Z",
     "iopub.status.idle": "2024-09-11T21:49:55.190168Z",
     "shell.execute_reply": "2024-09-11T21:49:55.189806Z"
    },
    "papermill": {
     "duration": 0.335314,
     "end_time": "2024-09-11T21:49:55.191632",
     "exception": false,
     "start_time": "2024-09-11T21:49:54.856318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.963233,
   "end_time": "2024-09-11T21:49:55.532002",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-09-11T21:49:52.568769",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}