{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6337a439",
   "metadata": {
    "papermill": {
     "duration": 0.004098,
     "end_time": "2024-02-06T22:19:24.792385",
     "exception": false,
     "start_time": "2024-02-06T22:19:24.788287",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71da4b5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:24.799609Z",
     "iopub.status.busy": "2024-02-06T22:19:24.799091Z",
     "iopub.status.idle": "2024-02-06T22:19:27.190388Z",
     "shell.execute_reply": "2024-02-06T22:19:27.187241Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.399603,
     "end_time": "2024-02-06T22:19:27.194494",
     "exception": false,
     "start_time": "2024-02-06T22:19:24.794891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "caa63b21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.200949Z",
     "iopub.status.busy": "2024-02-06T22:19:27.200583Z",
     "iopub.status.idle": "2024-02-06T22:19:27.205858Z",
     "shell.execute_reply": "2024-02-06T22:19:27.204721Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012367,
     "end_time": "2024-02-06T22:19:27.209274",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.196907",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4eccf80a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.215119Z",
     "iopub.status.busy": "2024-02-06T22:19:27.214821Z",
     "iopub.status.idle": "2024-02-06T22:19:27.219859Z",
     "shell.execute_reply": "2024-02-06T22:19:27.218805Z"
    },
    "papermill": {
     "duration": 0.011963,
     "end_time": "2024-02-06T22:19:27.223410",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.211447",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a213f0e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.229413Z",
     "iopub.status.busy": "2024-02-06T22:19:27.229058Z",
     "iopub.status.idle": "2024-02-06T22:19:27.238904Z",
     "shell.execute_reply": "2024-02-06T22:19:27.237368Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016849,
     "end_time": "2024-02-06T22:19:27.242480",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.225631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caae442c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002452,
     "end_time": "2024-02-06T22:19:27.247196",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.244744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dda71b9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.253250Z",
     "iopub.status.busy": "2024-02-06T22:19:27.252901Z",
     "iopub.status.idle": "2024-02-06T22:19:27.264160Z",
     "shell.execute_reply": "2024-02-06T22:19:27.262807Z"
    },
    "papermill": {
     "duration": 0.018499,
     "end_time": "2024-02-06T22:19:27.267879",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.249380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be007dab",
   "metadata": {
    "papermill": {
     "duration": 0.002587,
     "end_time": "2024-02-06T22:19:27.273141",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.270554",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cd09f864",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.279848Z",
     "iopub.status.busy": "2024-02-06T22:19:27.279441Z",
     "iopub.status.idle": "2024-02-06T22:19:27.464702Z",
     "shell.execute_reply": "2024-02-06T22:19:27.463317Z"
    },
    "papermill": {
     "duration": 0.19273,
     "end_time": "2024-02-06T22:19:27.468286",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.275556",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "721b1e06",
   "metadata": {
    "papermill": {
     "duration": 0.002876,
     "end_time": "2024-02-06T22:19:27.474397",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.471521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c46b5fa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:19:27.481680Z",
     "iopub.status.busy": "2024-02-06T22:19:27.481284Z",
     "iopub.status.idle": "2024-02-06T22:19:28.566578Z",
     "shell.execute_reply": "2024-02-06T22:19:28.563828Z"
    },
    "papermill": {
     "duration": 1.093416,
     "end_time": "2024-02-06T22:19:28.570524",
     "exception": false,
     "start_time": "2024-02-06T22:19:27.477108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.184496,
   "end_time": "2024-02-06T22:19:29.108815",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-02-06T22:19:23.924319",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}