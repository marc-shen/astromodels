{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bbf55544",
   "metadata": {
    "papermill": {
     "duration": 0.011083,
     "end_time": "2024-09-10T14:37:43.950250",
     "exception": false,
     "start_time": "2024-09-10T14:37:43.939167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "31db1074",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:43.965234Z",
     "iopub.status.busy": "2024-09-10T14:37:43.964490Z",
     "iopub.status.idle": "2024-09-10T14:37:45.404568Z",
     "shell.execute_reply": "2024-09-10T14:37:45.403976Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.449351,
     "end_time": "2024-09-10T14:37:45.406136",
     "exception": false,
     "start_time": "2024-09-10T14:37:43.956785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8f5b7192",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.409556Z",
     "iopub.status.busy": "2024-09-10T14:37:45.409203Z",
     "iopub.status.idle": "2024-09-10T14:37:45.411475Z",
     "shell.execute_reply": "2024-09-10T14:37:45.411080Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005366,
     "end_time": "2024-09-10T14:37:45.412767",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.407401",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6f9de974",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.415501Z",
     "iopub.status.busy": "2024-09-10T14:37:45.415355Z",
     "iopub.status.idle": "2024-09-10T14:37:45.417774Z",
     "shell.execute_reply": "2024-09-10T14:37:45.417351Z"
    },
    "papermill": {
     "duration": 0.00526,
     "end_time": "2024-09-10T14:37:45.419083",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.413823",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "75547953",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.422071Z",
     "iopub.status.busy": "2024-09-10T14:37:45.421900Z",
     "iopub.status.idle": "2024-09-10T14:37:45.425014Z",
     "shell.execute_reply": "2024-09-10T14:37:45.424549Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006092,
     "end_time": "2024-09-10T14:37:45.426350",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.420258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "770d926c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001043,
     "end_time": "2024-09-10T14:37:45.428588",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.427545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd3f3c00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.431375Z",
     "iopub.status.busy": "2024-09-10T14:37:45.431200Z",
     "iopub.status.idle": "2024-09-10T14:37:45.435466Z",
     "shell.execute_reply": "2024-09-10T14:37:45.435068Z"
    },
    "papermill": {
     "duration": 0.007235,
     "end_time": "2024-09-10T14:37:45.436821",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.429586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f83d0153",
   "metadata": {
    "papermill": {
     "duration": 0.001199,
     "end_time": "2024-09-10T14:37:45.439346",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.438147",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cd2779a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.442137Z",
     "iopub.status.busy": "2024-09-10T14:37:45.441988Z",
     "iopub.status.idle": "2024-09-10T14:37:45.540826Z",
     "shell.execute_reply": "2024-09-10T14:37:45.540376Z"
    },
    "papermill": {
     "duration": 0.101824,
     "end_time": "2024-09-10T14:37:45.542223",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.440399",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "def01da3",
   "metadata": {
    "papermill": {
     "duration": 0.001449,
     "end_time": "2024-09-10T14:37:45.545345",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.543896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e43c4e69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:37:45.548789Z",
     "iopub.status.busy": "2024-09-10T14:37:45.548645Z",
     "iopub.status.idle": "2024-09-10T14:37:45.880103Z",
     "shell.execute_reply": "2024-09-10T14:37:45.879727Z"
    },
    "papermill": {
     "duration": 0.334814,
     "end_time": "2024-09-10T14:37:45.881561",
     "exception": false,
     "start_time": "2024-09-10T14:37:45.546747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.977458,
   "end_time": "2024-09-10T14:37:46.327242",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-09-10T14:37:43.349784",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}