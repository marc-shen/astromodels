{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e29cfccd",
   "metadata": {
    "papermill": {
     "duration": 0.010486,
     "end_time": "2024-05-17T21:51:20.388287",
     "exception": false,
     "start_time": "2024-05-17T21:51:20.377801",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e8067589",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:20.402941Z",
     "iopub.status.busy": "2024-05-17T21:51:20.402277Z",
     "iopub.status.idle": "2024-05-17T21:51:21.820812Z",
     "shell.execute_reply": "2024-05-17T21:51:21.820284Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.426899,
     "end_time": "2024-05-17T21:51:21.822313",
     "exception": false,
     "start_time": "2024-05-17T21:51:20.395414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fbccf9ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.825536Z",
     "iopub.status.busy": "2024-05-17T21:51:21.825208Z",
     "iopub.status.idle": "2024-05-17T21:51:21.827351Z",
     "shell.execute_reply": "2024-05-17T21:51:21.826992Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005049,
     "end_time": "2024-05-17T21:51:21.828657",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.823608",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fbc769fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.831219Z",
     "iopub.status.busy": "2024-05-17T21:51:21.831075Z",
     "iopub.status.idle": "2024-05-17T21:51:21.837164Z",
     "shell.execute_reply": "2024-05-17T21:51:21.836752Z"
    },
    "papermill": {
     "duration": 0.008708,
     "end_time": "2024-05-17T21:51:21.838346",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.829638",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5406558",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.840918Z",
     "iopub.status.busy": "2024-05-17T21:51:21.840778Z",
     "iopub.status.idle": "2024-05-17T21:51:21.843493Z",
     "shell.execute_reply": "2024-05-17T21:51:21.843137Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005399,
     "end_time": "2024-05-17T21:51:21.844743",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.839344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1af5734e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000962,
     "end_time": "2024-05-17T21:51:21.846715",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.845753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d0fa35d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.849248Z",
     "iopub.status.busy": "2024-05-17T21:51:21.849111Z",
     "iopub.status.idle": "2024-05-17T21:51:21.853036Z",
     "shell.execute_reply": "2024-05-17T21:51:21.852550Z"
    },
    "papermill": {
     "duration": 0.006658,
     "end_time": "2024-05-17T21:51:21.854297",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.847639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2861f3fa",
   "metadata": {
    "papermill": {
     "duration": 0.001099,
     "end_time": "2024-05-17T21:51:21.856533",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.855434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "334f40b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.859234Z",
     "iopub.status.busy": "2024-05-17T21:51:21.859096Z",
     "iopub.status.idle": "2024-05-17T21:51:21.952083Z",
     "shell.execute_reply": "2024-05-17T21:51:21.951737Z"
    },
    "papermill": {
     "duration": 0.095954,
     "end_time": "2024-05-17T21:51:21.953500",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.857546",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e98b3528",
   "metadata": {
    "papermill": {
     "duration": 0.001422,
     "end_time": "2024-05-17T21:51:21.956543",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.955121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "558644c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:51:21.959967Z",
     "iopub.status.busy": "2024-05-17T21:51:21.959812Z",
     "iopub.status.idle": "2024-05-17T21:51:22.291473Z",
     "shell.execute_reply": "2024-05-17T21:51:22.291071Z"
    },
    "papermill": {
     "duration": 0.33494,
     "end_time": "2024-05-17T21:51:22.292778",
     "exception": false,
     "start_time": "2024-05-17T21:51:21.957838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.788528,
   "end_time": "2024-05-17T21:51:22.623065",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-17T21:51:19.834537",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}