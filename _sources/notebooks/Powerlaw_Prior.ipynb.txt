{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "75effbea",
   "metadata": {
    "papermill": {
     "duration": 0.004477,
     "end_time": "2024-05-08T19:33:11.694984",
     "exception": false,
     "start_time": "2024-05-08T19:33:11.690507",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42f40c4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:11.704782Z",
     "iopub.status.busy": "2024-05-08T19:33:11.704074Z",
     "iopub.status.idle": "2024-05-08T19:33:13.368989Z",
     "shell.execute_reply": "2024-05-08T19:33:13.366992Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.674834,
     "end_time": "2024-05-08T19:33:13.373569",
     "exception": false,
     "start_time": "2024-05-08T19:33:11.698735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f269b915",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.379781Z",
     "iopub.status.busy": "2024-05-08T19:33:13.379139Z",
     "iopub.status.idle": "2024-05-08T19:33:13.383778Z",
     "shell.execute_reply": "2024-05-08T19:33:13.382573Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011221,
     "end_time": "2024-05-08T19:33:13.387145",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.375924",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66681e31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.391993Z",
     "iopub.status.busy": "2024-05-08T19:33:13.391390Z",
     "iopub.status.idle": "2024-05-08T19:33:13.395878Z",
     "shell.execute_reply": "2024-05-08T19:33:13.394170Z"
    },
    "papermill": {
     "duration": 0.010448,
     "end_time": "2024-05-08T19:33:13.399078",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.388630",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8341cf10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.404232Z",
     "iopub.status.busy": "2024-05-08T19:33:13.403991Z",
     "iopub.status.idle": "2024-05-08T19:33:13.414499Z",
     "shell.execute_reply": "2024-05-08T19:33:13.413828Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015379,
     "end_time": "2024-05-08T19:33:13.416359",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.400980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb50272a",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001059,
     "end_time": "2024-05-08T19:33:13.418720",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.417661",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "680d6093",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.421785Z",
     "iopub.status.busy": "2024-05-08T19:33:13.421599Z",
     "iopub.status.idle": "2024-05-08T19:33:13.426292Z",
     "shell.execute_reply": "2024-05-08T19:33:13.425809Z"
    },
    "papermill": {
     "duration": 0.007969,
     "end_time": "2024-05-08T19:33:13.427771",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.419802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "747623f7",
   "metadata": {
    "papermill": {
     "duration": 0.001256,
     "end_time": "2024-05-08T19:33:13.430431",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.429175",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1d1f89c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.433852Z",
     "iopub.status.busy": "2024-05-08T19:33:13.433662Z",
     "iopub.status.idle": "2024-05-08T19:33:13.539866Z",
     "shell.execute_reply": "2024-05-08T19:33:13.538312Z"
    },
    "papermill": {
     "duration": 0.111513,
     "end_time": "2024-05-08T19:33:13.543226",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.431713",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f98e16d2",
   "metadata": {
    "papermill": {
     "duration": 0.001496,
     "end_time": "2024-05-08T19:33:13.547321",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.545825",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8cf7c3ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:33:13.550980Z",
     "iopub.status.busy": "2024-05-08T19:33:13.550783Z",
     "iopub.status.idle": "2024-05-08T19:33:13.896021Z",
     "shell.execute_reply": "2024-05-08T19:33:13.895686Z"
    },
    "papermill": {
     "duration": 0.348871,
     "end_time": "2024-05-08T19:33:13.897584",
     "exception": false,
     "start_time": "2024-05-08T19:33:13.548713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.24419,
   "end_time": "2024-05-08T19:33:14.334569",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-08T19:33:11.090379",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}