{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "464129f9",
   "metadata": {
    "papermill": {
     "duration": 0.003248,
     "end_time": "2023-11-01T23:57:55.434741",
     "exception": false,
     "start_time": "2023-11-01T23:57:55.431493",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7be70f10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:55.441461Z",
     "iopub.status.busy": "2023-11-01T23:57:55.441104Z",
     "iopub.status.idle": "2023-11-01T23:57:57.918158Z",
     "shell.execute_reply": "2023-11-01T23:57:57.916523Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.485324,
     "end_time": "2023-11-01T23:57:57.922555",
     "exception": false,
     "start_time": "2023-11-01T23:57:55.437231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95d3cfd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:57.929742Z",
     "iopub.status.busy": "2023-11-01T23:57:57.929078Z",
     "iopub.status.idle": "2023-11-01T23:57:57.937803Z",
     "shell.execute_reply": "2023-11-01T23:57:57.936473Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016596,
     "end_time": "2023-11-01T23:57:57.941696",
     "exception": false,
     "start_time": "2023-11-01T23:57:57.925100",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff0a56b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:57.947892Z",
     "iopub.status.busy": "2023-11-01T23:57:57.947495Z",
     "iopub.status.idle": "2023-11-01T23:57:57.956359Z",
     "shell.execute_reply": "2023-11-01T23:57:57.954961Z"
    },
    "papermill": {
     "duration": 0.016405,
     "end_time": "2023-11-01T23:57:57.960412",
     "exception": false,
     "start_time": "2023-11-01T23:57:57.944007",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4de4a5db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:57.967057Z",
     "iopub.status.busy": "2023-11-01T23:57:57.966707Z",
     "iopub.status.idle": "2023-11-01T23:57:57.975004Z",
     "shell.execute_reply": "2023-11-01T23:57:57.973636Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016119,
     "end_time": "2023-11-01T23:57:57.978992",
     "exception": false,
     "start_time": "2023-11-01T23:57:57.962873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79ba60ee",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002471,
     "end_time": "2023-11-01T23:57:57.983862",
     "exception": false,
     "start_time": "2023-11-01T23:57:57.981391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b68a8d15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:57.990274Z",
     "iopub.status.busy": "2023-11-01T23:57:57.989884Z",
     "iopub.status.idle": "2023-11-01T23:57:58.003195Z",
     "shell.execute_reply": "2023-11-01T23:57:58.001502Z"
    },
    "papermill": {
     "duration": 0.021395,
     "end_time": "2023-11-01T23:57:58.007492",
     "exception": false,
     "start_time": "2023-11-01T23:57:57.986097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5539a6e3",
   "metadata": {
    "papermill": {
     "duration": 0.002785,
     "end_time": "2023-11-01T23:57:58.013053",
     "exception": false,
     "start_time": "2023-11-01T23:57:58.010268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cdc0befa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:58.019865Z",
     "iopub.status.busy": "2023-11-01T23:57:58.019433Z",
     "iopub.status.idle": "2023-11-01T23:57:58.226651Z",
     "shell.execute_reply": "2023-11-01T23:57:58.225450Z"
    },
    "papermill": {
     "duration": 0.215017,
     "end_time": "2023-11-01T23:57:58.230580",
     "exception": false,
     "start_time": "2023-11-01T23:57:58.015563",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4AAAAMICAYAAACZ14viAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/SrBM8AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA2ZUlEQVR4nO3de5TV9X3v/9eMMHLRiYIODRClpokDRojHEATBVCI2waMnxiaRqDH1klrJgdYqEq8IIk2WUfBoEjV4Ccf7jTZWPOsYT1xBAQ2uRmMl0aYJaEW5aJABZoTZvz9czjn8QMsMw8zg5/FYyxX5fD+z572zvmucJ9+9v7uqUqlUAgAAwIdedWcPAAAAQMcQgAAAAIUQgAAAAIUQgAAAAIUQgAAAAIUQgAAAAIUQgAAAAIUQgAAAAIXo1tkD7M5eeOGFNDU1pbq6OnvuuWdnjwMAABSosbExzc3NqampySGHHPKBewXgTmhqakpzc3Oam5uzefPmzh4HAAAoWFNT03+6RwDuhOrq6jQ3N6e6ujo9e/bs7HEAAIACbdy4saVL/jMCcCfsueee2bx5c3r27Jn6+vrOHgcAACjQsmXL0tDQsENvS3MTGAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEIIQAAAgEJ0mQBcu3ZthgwZkrVr177vnkqlkjlz5uTII4/MYYcdlm9/+9tZvXr1dvf+7ne/y7Bhw/Loo4/uqpEBAAB2K10iAN94443MnDkzW7Zs+cB9c+fOzV133ZXp06dn3rx52bRpU84999xt9m3ZsiVTp07Npk2bdtXIAAAAu51unT3AZZddlnvuuec/3VepVHLrrbdm0qRJ+fznP58kmT59eo4++ug8//zzOfTQQ1v2zp07Nz169NhlMwMAAOyOOv0K4DnnnJP58+fnyiuv/MB9L7/8clavXp0xY8a0rPXv3z8DBw7M4sWLW9Z++9vfZu7cuZk5c+YumxkAAGB31OlXAPv375/+/ftn3bp1H7hv+fLlqa6uzoABA7Za79evX9asWZMk2bx5c6ZOnZpJkyblYx/7WLvMN3r06Pc9Nnny5Bx00EHt8n0AAAB2tU6/ArijGhoaUlNTk+rqrUfu1atXGhoakiQ/+tGP0rt373z961/vjBEBAAC6tE6/Arijamtr09jYmObm5q0isLGxMbW1tXnxxRdz++2358EHH0xVVVW7fd+FCxe+77Fly5a1xCcAAEBXt9tcAayrq0ulUsnKlSu3Wl+5cmX69++fJUuWZP369Rk/fnwOPfTQlpvCnH/++fnKV77SGSMDAAB0KbvNFcD6+vrsv//+efLJJ1uCbsWKFVm+fHlGjx6dffbZZ6sbxCTJ+PHjM2XKlIwdO7YzRgYAAOhSunQAvv7660nevdFLdXV1JkyYkNmzZ6euri49evTIVVddlbFjx+bAAw9MknzkIx/Z5jHq6uoycODADp0bAACgK+rSAXj++ecnSebNm5fk3Y+M2LhxY6ZMmZJ33nknY8eOzbRp0zpxQgAAgN1HVaVSqXT2ELur924C07t379TX13f2OAAAQIFa0yW7zU1gAAAA2DkCEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBACEAAAoBBdJgDXrl2bIUOGZO3ate+7p1KpZM6cOTnyyCNz2GGH5dvf/nZWr17dcnzz5s259tprc9RRR+VTn/pUxo8fn0ceeaQjxgcAAOjyukQAvvHGG5k5c2a2bNnygfvmzp2bu+66K9OnT8+8efOyadOmnHvuuS3Hf/CDH+TOO+/M1KlTc//99+cv/uIvct555+WFF17Y1U8BAACgy+vW2QNcdtllueeee/7TfZVKJbfeemsmTZqUz3/+80mS6dOn5+ijj87zzz+fQw89NPfee2/OPvvsjB8/PklSX1+fRYsW5e67786MGTN26fMAAADo6jr9CuA555yT+fPn58orr/zAfS+//HJWr16dMWPGtKz1798/AwcOzOLFi9PY2Jg99tgjw4YN2+rr+vbtm1WrVu2S2QEAAHYnnX4FsH///unfv3/WrVv3gfuWL1+e6urqDBgwYKv1fv36Zc2aNdlzzz3zxBNPbHXsD3/4Q5566ql885vfbO+xAQAAdjudHoA7qqGhITU1Namu3vqiZa9evdLQ0LDN/sceeyyXXXZZ+vTpkzPOOKPN33f06NHve2zy5Mk56KCD2vzYAAAAHanTXwK6o2pra9PY2Jjm5uat1hsbG1NbW9vy57Vr12bixImZOHFihg4dmnvuuSd77713R48LAADQ5ew2VwDr6upSqVSycuXK9O/fv2V95cqV+cIXvpAkWbFiRU477bQ0Nzfn+uuvz7hx43b6+y5cuPB9jy1btmy7Vx8BAAC6ot3mCmB9fX3233//PPnkky1rK1asyPLly1tepnnZZZelZ8+emT9/frvEHwAAwIdJl74C+Prrryd590Yv1dXVmTBhQmbPnp26urr06NEjV111VcaOHZsDDzwwa9euzaJFizJjxoy8/fbbefvtt1sep0ePHunXr19nPQ0AAIAuoUsH4Pnnn58kmTdvXpJ3PzJi48aNmTJlSt55552MHTs206ZNS5K88sorqVQqueSSS7Z5nM9+9rMtjwEAAFCqqkqlUunsIXZX770HsHfv3qmvr+/scQAAgAK1pkt2m/cAAgAAsaFICXXnppli5d2t6zAAAAsAu1KQD/+Z//OaeeemrGjRuX66+/PitWrGjvuQAAAGhnbQrARYsWZfbs2Rk8eHB+/OMf59hjj82ECRNy3333Zf369e09IwAAAO2gqlKpVHbmATZs2JCf/exnWbBgQRYuXJg99tgjxx13XE499dTU19e315xd0rJly9LQ0JDevXt/6J8rAADQNbWmS3b6JjC9evXKMccck/Hjx+fTn/50Nm7cmAcffDAnnnhizjzzzCxfvnxnvwUAAADtoM0BuGnTpixYsCCTJk3KyJEjc8EFF2Tz5s2ZMWNGlixZkrlz5+bNN9/MBRdc0J7zAgAA0Ebd2vJFf/u3f5snnngiGzduzIABA3LGGWfkS1/6Ug444ICWPaNGjcrZZ58tAAEAALqINgXgL37xi3zxi1/MiSeemOHDh7/vvsGDB+e73/1um4cDAACg/bQpAK+55pocdthhqa2t3ebYW2+9leXLl2fo0KEZNGhQBg0atLMzAgAA0A7a9B7Ac845J88///x2jz311FM59dRTd2ooAAAA2t8OXwG87bbbcttttyVJKpVKLrjggtTU1Gyz780338x+++3XbgMCAADQPnY4AAcOHJiRI0cmSR566KHU19enX79+2+zr3bt3TjzxxPabEAAAgHaxwwF4zDHH5JhjjkmSvPLKK/m7v/u7HHroobtsMAAAANrXDgdgc3Nzqqvffcvg7bff3rL2ft7bCwAAQNewwwF4yCGH5Mc//nGOPPLIDBkyJFVVVe+7t6qqKv/6r//aLgMCAADQPnY4ACdOnNjyQe8TJ078wAAEAACg66mqVCqVzh5id7Vs2bI0NDSkd+/eqa+v7+xxAACAArWmS3b4CuCiRYtaNcR7dwwFAACga9jhAPyrv/qrVFVV5YMuGL53vKqqKi+++GK7DAgAAED72OEA/MlPfrIr5wAAAGAX2+EA/OxnP7sr5wAAAGAX2+EAnDNnTk488cQccMABmTNnzgfuraqqyqRJk3Z6OAAAANrPDgfgD3/4wxx++OE54IAD8sMf/vAD9wpAAACArmeHA3DZsmXb/XcAAAB2DzscgNvT2NiYf/u3f0tTU1MGDhyY/fbbr73mAgAAoJ21KQArlUpmz56dn/zkJ9m0aVPL+sc//vH87d/+bY455ph2GxAAAID20aYAvOmmm3LjjTfmz//8zzN+/Pj06dMnK1euzD//8z/nv//3/55Zs2blS1/6UjuPCgAAwM5oUwDec889OfHEEzNr1qyt1v/yL/8yf//3f58bb7xRAAIAAHQx1W35otWrV+fP//zPt3vs2GOPzauvvrozMwEAALALtCkADz744PzmN7/Z7rFXXnklgwYN2pmZAAAA2AXaFIAXXnhh7rjjjsyfPz9NTU1Jkqampjz88MO59dZbM3Xq1HYdEgAAgJ1XValUKjuysb6+PlVVVS1/fu/Lqqqqstdee2XDhg1pbm5Ot27dstdee2XRokWtGmTt2rUZPXp0Fi5cmD59+mx3T6VSyXXXXZd77703GzZsyJFHHplp06Zt9fETd9xxR3784x/nzTffzKc//elcfvnl+dM//dNWzbKjli1bloaGhvTu3Tv19fW75HsAAAB8kNZ0yQ7fBOaqq67aKgDb0xtvvJHvfve72bJlywfumzt3bu66667MnDkz/fr1y+zZs3Puuefm3nvvTZIsWLAg3/ve93LFFVekvr4+t956a84888w88sgj6dGjxy6ZHQAAYHexwwH45S9/eYf2rV27Nq+88soOD3DZZZflnnvu+U/3VSqV3HrrrZk0aVI+//nPJ0mmT5+eo48+Os8//3wOPfTQzJ07N6eeemrLHUivuOKKHHHEEfn5z3+eL3zhCzs80+6oubmSdW83d/YYAABQjNq9q1NdvWsuku0qbfoYiCRZt25dfvOb32Tz5s1brS9evDi33357/uVf/mWHHuecc87JhAkT8utf/zqXXHLJ++57+eWXs3r16owZM6ZlrX///hk4cGAWL16cP/3TP80LL7yQ888/v+V4jx49MnTo0CxevPhDH4Dr3m7Ol894rbPHAACAYjx4y0ezz0f26OwxWqVNAbh06dKcddZZ2bRp03aPjxo1aocfq3///unfv3/WrVv3gfuWL1+e6urqDBgwYKv1fv36Zc2aNXnllVfS3Nycj33sY9s93lajR49+32OTJ0/OQQcd1ObHBgAA6EhtCsAbbrghgwYNypQpU3L33Xene/fuOemkk/Lkk0/mf//v/505c+a095xpaGhITU1Nqqu3vnFpr1690tDQkIaGhiTZ5r1+vXr12qkABAAA+LBoUwC+8MIL+c53vpORI0fm7bffzk9+8pOMHDkyI0eOzKpVq/KDH/wgU6ZMaddBa2tr09jYmObm5q0isLGxMbW1tamtrU2SbNy4cauva2pqajnWFgsXLnzfY+/dbQcAAGB30KYAbGpqSq9evZIkAwYMyO9///uWY0cffXRmzZrV7gFYV1eXSqWSlStXpn///i3rK1euzBe+8IXsv//+SZLXXnstAwcObDn+2muvZciQIe06S1dUu3d1Hrzlo509BgAAFKN27zZ9rHqnalMAfuITn8hjjz2WY489NgceeGDLnT8HDhyYP/7xj3n77bfbe87U19dn//33z5NPPpmvfOUrSZIVK1Zk+fLlGT16dPbZZ58MHTo0CxcuzPDhw5Mk69evz69+9at861vfavd5uprq6qrd7g2oAABAx2pTAJ599tmZPHlyXnvttcybNy+f/exnc9ZZZ2XMmDH5p3/6pxx++OHtMtzrr7+e5N0buVRXV2fChAmZPXt26urq0qNHj1x11VUZO3ZsDjzwwCTJKaeckiuuuCIHH3xwPvrRj+a6667LoEGDcsQRR7TLPAAAALuzNgXguHHjcuedd+all15KksyYMSMXXnhh7r///gwdOjTTp09vl+He+0iHefPmJXn3IyM2btyYKVOm5J133snYsWMzbdq0lv1f+tKXsnbt2syaNStvv/12RowYkR/96Efb3DgGAACgRFWVSqXS2UPsrt67CUzv3r1TX1/f2eMAAAAFak2XtPmD4FevXp277747L7zwQpqamjJgwICMGjXqQ/+B6wAAALurNgXgSy+9lNNOOy1vvfVWDjjggPTp0ye/+MUvcu+992bw4MG5+eabs99++7X3rAAAAOyENgXgP/zDP6SmpiYPPPBADjnkkJb1pUuXZvLkyZk1a1a+//3vt9uQAAAA7Lw23R1l6dKlmThx4lbxlySHH354/uZv/iZPPPFEuwwHAABA+2lTAPbs2TM9e/bc7rG+ffu66yYAAEAX1KZSO/7443P33Xdny5YtW61XKpXcd999bgQDAADQBe3wewCvv/76ln/v0aNHfv3rX+e4447LuHHjst9++2Xt2rV57LHH8sYbb+TII4/cJcMCAADQdjv8OYBjx47d8QetqsrPfvazNg+1u/A5gAAAQGfbJZ8D+Pjjj+/0YAAAAHSeNn8QfJL867/+a5599tls2LAhdXV1GTVqVOrq6tprNgAAANpRmwJwy5YtmTJlSh555JH8v68g7datW0477bRceOGF7TYgAAAA7aNNAXjzzTfnscceyyWXXJJx48Zlr732yquvvpqHH344t9xyS/r27ZuzzjqrvWcFAABgJ7QpAB944IF861vfyimnnNKy9olPfCJ/93d/l27duuX+++8XgAAAAF1Mmz4H8LXXXsvBBx+83WODBw/Oq6++ulNDAQAA0P7aFID9+vXLiy++uN1jL730Umpra3dqKAAAANpfmwLwhBNOyE033ZQ777wzmzZtSvLujWEeeeSR3HTTTRk3bly7DgkAAMDOa9N7ACdOnJjf/e53mT59eq688srss88+WbduXbZs2ZJhw4bl/PPPb+85AQAA2EltCsBu3bplzpw5+eUvf5knn3wyq1evzl577ZXDDz88Y8eOTXV1my4sAgAAsAu1OgDfeeedXH755Tn99NPzmc98Jp/5zGd2xVwAAAC0s1ZfquvevXueeeaZPPvss7tiHgAAAHaRNr1Wc8qUKfnRj36U5557rr3nAQAAYBdp03sAb7jhhjQ0NORrX/taamtr07Nnz62OV1VV5f/8n//TLgMCAADQPtoUgIMHD87gwYPbexYAAAB2oTYF4KxZs9p7DgAAAHaxNgVgkjQ1NeXRRx/Nc889l40bN6Zv3745/P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fm6aefbvkcv//4j//I9OnTs3Tp0nTv3j1f/vKXc95556W6+t0LmevXr88Pf/jDPProo1m9enUGDhyY008/PV/96ld3yezvvQS0d+/eqa+v3yXfAwAA4IO0pks6PQB3ZwIQAADobK3pkk59DyAAAAAdRwACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUQgACAAAUotMDsKmpKZdffnlGjBiR4cOH56KLLkpDQ8N2927YsCEXXXRRhg8fnsMPPzwTJ07MG2+8sdWeZ599Nl/72tcydOjQHHXUUbnppps64mkAAAB0eZ0egLNmzcpTTz2V2bNn56abbsqyZcty8cUXb3fvzJkzs3jx4lx99dW55ZZbsnHjxpxzzjlpbm5OkqxYsSJnnXVWhg0blnvvvTdnnnlmZs+enaeeeqojnxIAAECX1K0zv/m6dety33335YYbbsjIkSOTJN/5znfyjW98I2vWrEnfvn232vvQQw/lf/yP/5HPfe5zSZKrr746Rx55ZJYsWZKRI0fmtttuy8c//vFcdNFFSZL6+vr86le/ylNPPZVRo0Z1/BMEAADoQjr1CuCzzz6bJC3xlyTDhg1Lt27dsmTJkq32/v73v8+WLVtyyCGHtKz16dMn++67b5YuXZokWbhwYY477ritvu6aa67J+eefv6ueAgAAwG6jU68ALl++PHV1dampqWlZq6mpSZ8+fbJmzZqt9vbp0ydJsmrVqvzJn/xJkmTTpk156623snr16jQ1NbVE4plnnpnnnnsuf/Inf5JvfvObOemkk9o84+jRo9/32OTJk3PQQQe1+bEBAAA6UqdeAWxoaEiPHj22We/Vq9c2N4IZMGBAhg0bljlz5mTNmjVZv359rrjiimzZsiVJ8sc//jFJcv3112fMmDG55ZZbcuKJJ+bSSy/Nww8/vOufDAAAQBfXqVcAa2trs2nTpm3WGxsbU1tbu9VaVVVVrr766px33nkZNWpUqqqqMnr06AwdOjT77rtvy41gTjrppHzzm99Mkhx66KF5/vnn88ADD+S//tf/2qYZFy5c+L7Hli1b9r53LAUAAOhqOjUA6+rqsmrVqjQ1NbW8DHTz5s1ZtWpVBgwYsM3+Aw44IPfff3/efPPNNDc3p0+fPjniiCNyyCGHZN99980ee+yxzUsy/+zP/iwLFizokOcDAADQlXXqS0BHjBiRSqWSX/7yly1rzzzzTCqVSoYPH77V3g0bNuTYY4/NkiVLsu+++6Zv375ZvHhxGhsbM2LEiNTU1GTw4MF58cUXt/q6l156yfv0AAAA0gVeAnrCCSdkxowZmT59ejZs2JBp06bl5JNPTq9evbJmzZps2rQpAwYMSK9evdKnT59cc801mTJlSt58881Mnz49p59+evbee+8kydlnn53zzz8/H//4xzNixIgsWbIkjz32WO66667OfJoAAABdQlWlUql05gAbN27MzJkzs2DBgnTr1i3HH398LrzwwnTv3j1Tp07N008/nccffzxJ8h//8R+ZPn16li5dmu7du+fLX/5yzjvvvFRX/98Lmf/0T/+UG264Ia+++moGDRqUyZMnZ9y4cbtk9vfeA9i7d+/U19fvku8BAADwQVrTJZ0egLszAQgAAHS21nRJp74HEAAAgI4jAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAAohAAEAAArRrbMH2J01NjYmSTZu3Jhly5Z18jQAAECJNm7cmOT/9skHEYA7obm5ueV/GxoaOnkaAACgZO/1yQcRgDuhpqYmTU1Nqa6uzp577tnZ4yRJnn/++STJoYce2smTsDtzHtFenEu0B+cR7cW5RHvoiudRY2NjmpubU1NT85/urapUKpUOmIkOMnr06CTJwoULO3kSdmfOI9qLc4n24DyivTiXaA+7+3nkJjAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFcBdQAACAQrgCCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBCAAAUAgBuJtpamrK5ZdfnhEjRmT48OG56KKL0tDQ8L7777jjjhx99NH59Kc/nW9+85v593//9w6clq6sNefS5s2bc+211+aoo47Kpz71qYwfPz6PPPJIB09MV9Tan0nv+d3vfpdhw4bl0Ucf7YAp2R209lx6/PHHc/zxx+fQQw/NMccck4ceeqgDp6Wras15VKlUcuutt2bcuHH5L//lv+T000/Pyy+/3MET09WtXbs2Q4YMydq1a993T6VSyZw5c3LkkUfmsMMOy7e//e2sXr26A6dsHQG4m5k1a1aeeuqpzJ49OzfddFOWLVuWiy++eLt7FyxYkO9973uZPHly7r777vTr1y9nnnlmNm3a1MFT0xW15lz6wQ9+kDvvvDNTp07N/fffn7/4i7/IeeedlxdeeKGDp6arac159J4tW7Zk6tSpfhaxldacS//yL/+SSZMm5fjjj899992X4447LhdffHH+7d/+rYOnpqtpzXn0wAMP5Prrr8/f//3f5/bbb0+vXr1y1lln7dBfYlGGN954IzNnzsyWLVs+cN/cuXNz1113Zfr06Zk3b142bdqUc889t4OmbIMKu40//vGPlUMOOaTy85//vGXt6aefrtTX11dWr169zf6TTjqp8r3vfa/lzxs3bqwMGzassmDBgg6Zl66rtefSkUceWbnxxhu3Wvva175WueSSS3b5rHRdrT2P3nPjjTdWTjvttMonP/lJP4+oVCqtP5f++q//ujJ58uSt1k4++eTK//yf/3NXj0oX1trz6Otf/3rlyiuvbPnz2rVrKwcffHDliSee6JB56douvfTSyic/+cmWf9asWbPdfc3NzZVRo0ZV7rjjjpa1V199tfLJT36y8txzz3XUuK3iCuBu5Nlnn02SjBw5smVt2LBh6datW5YsWbLV3vXr1+eFF17ImDFjWtZ69OiRoUOHZvHixR0zMF1Wa86lxsbG7LHHHhk2bNhW63379s2qVat2/bB0Wa05j97z29/+NnPnzs3MmTM7ZEZ2D605lzZv3pzFixfnuOOO22r9rrvuyimnnLLrh6XLau3PpHXr1qVXr14tf95zzz1TVVWVpqamXT8sXd4555yT+fPn58orr/zAfS+//HJWr1691e/c/fv3z8CBA7vs79wCcDeyfPny1NXVpaampmWtpqYmffr0yZo1a7ba+8orr6S5uTkf+9jHtlrv16/fNnspT2vOpT333DNPPPFERowY0bL2hz/8IU899VQGDx7cYTPT9bTmPEre/cV96tSpmTRp0jY/myhba86lFStWZOPGjXnrrbcyYcKEDB8+PCeddFIef/zxjh6bLqa1P5PGjBmTBx98ML/5zW/S2NiYa665Jr169crw4cM7cmy6qP79+2fw4ME54IADPnDf8uXLU11dnQEDBmy13pV/5xaAu5GGhob06NFjm/VevXpt83r19/78/9+/vb2UpzXn0v/fY489lgkTJqRPnz4544wzdtWI7AZaex796Ec/Su/evfP1r3+9I8ZjN9Kac+mPf/xjkuTaa6/NX/7lX2bu3LkZNWpUJk6cmF/+8pcdMi9dU2t/Jv3N3/xNevbsmRNOOCHDhg3LvHnz8td//df5yEc+0hHj8iHR0NCQmpqaVFdvnVVd+Xfubp09ADuutrZ2uzdNaGxsTG1t7TZ7k2Tjxo1brTc1NW2zl/K05lx6z9q1a3PppZfmsccey9FHH50rr7wye++9964elS6sNefRiy++mNtvvz0PPvhgqqqqOmpEdhOtOZeam5uTJGeffXZOOumkJMnQoUOzZMmSzJ8/P5/5zGd2/cB0Sa39b9u5556bmpqa3Hjjjdlvv/3y85//PNdee20+8YlP5Oijj+6IkfkQqK2tTWNjY5qbm7eKwA/6naqzCcDdSF1dXVatWpWmpqaWlzds3rw5q1at2uay8/77758kee211zJw4MCW9ddeey1DhgzpuKHpklpzLiXvvuTqtNNOS3Nzc66//vqMGzeuo0emC2rNebRkyZKsX78+48eP32r9/PPPz9y5c3Pfffd12Nx0Pa05l/r27ZskOeigg7Za/7M/+zPvSy5ca86j3/zmN3n66adzxx13tPylwac+9an8+te/zkMPPSQA2WF1dXWpVCpZuXJl+vfv37K+cuXKfOELX+jEyd6fl4DuRkaMGJFKpbLVS1yeeeaZVCqVbV6vvs8++2To0KFZuHBhy9r69evzq1/9KqNHj+6wmemaWnMuJclll12Wnj17Zv78+eKPFq05j0488cQ8/PDDmT9/fss/STJlypRce+21HTk2XVBrzqWPfexj6du3b1588cWt1l966aVtopCytOY8er/b+tfU1GTPPffcpXPy4VJfX5/9998/Tz75ZMvaihUrsnz58i77O7crgLuR2tranHDCCZkxY0amT5+eDRs2ZNq0aTn55JPTq1evrFmzJps2bWr5W65TTjklV1xxRQ4++OB89KMfzXXXXZdBgwbliCOO6ORnQmdrzbm0du3aLFq0KDNmzMjbb7+dt99+u+VxevTokX79+nXiM6EzteY8+shHPrLd99XU1dVt9SoFytSac6m6ujpnnnlmbrjhhuy///4ZMmRIHn300bz00ku57rrrOvup0Ilacx7V19fnk5/8ZK644opccMEF6devXxYtWpSf/exn+fGPf9zZT4Uu7vXXX0/y7o1eqqurM2HChMyePTt1dXXp0aNHrrrqqowdOzYHHnhgJ0+6fVWVSqXS2UOw4zZu3JiZM2dmwYIF6datW44//vhceOGF6d69e6ZOnZqnn356qzuh3XLLLbn11lvz9ttvZ8SIEZk+fbpf2Emy4+fSc889l6985SvbfYzPfvazmTdvXgdPTlfS2p9J/6+DDz44c+bM6bIvkaFjtfZcuu2223Lbbbdl9erVqa+vz4UXXujujbTqPFq9enWuu+66/PznP8+6dety0EEH5dxzz80xxxzTyc+CrmTJkiX5xje+kUWLFqVPnz5JktNOOy1JWn4H2rJlS6699trcd999eeeddzJ27NhMmzYte+21V6fN/UEEIAAAQCG8BxAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAAKAQAhAAOtgdd9yRgw8+OHPnzm1Ze+mll/KpT30q3/nOdzpxMgA+7KoqlUqls4cAgJJUKpV84xvfyPPPP5+HH344/fv3z4QJE7Jy5co8/PDD2XvvvTt7RAA+pAQgAHSC5cuX54QTTsjw4cMzZsyYzJw5MzfffHOOOuqozh4NgA8xAQgAneT222/PVVddlW7duuVLX/pSZs6c2dkjAfAh5z2AANBJTjrppPTo0SObN2/Oqaee2tnjAFAAAQgAneT73/9+mpubs/fee2fWrFnxohwAdjUBCACdYMmSJbnrrrvyrW99K1OmTMmSJUty5513dvZYAHzIeQ8gAHSwDRs25IQTTsgee+yRn/70p+nevXtOO+20vPDCC/npT3+agQMHdvaIAHxIuQIIAB3s+9//flasWJFp06alpqYmVVVVmTFjRrZs2ZKLL77YS0EB2GVcAQQAACiEK4AAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACFEIAAAACF+P8AgvdJvzigGYoAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72e7b918",
   "metadata": {
    "papermill": {
     "duration": 0.003121,
     "end_time": "2023-11-01T23:57:58.236921",
     "exception": false,
     "start_time": "2023-11-01T23:57:58.233800",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "345dcd74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:58.244688Z",
     "iopub.status.busy": "2023-11-01T23:57:58.244352Z",
     "iopub.status.idle": "2023-11-01T23:57:59.329610Z",
     "shell.execute_reply": "2023-11-01T23:57:59.328431Z"
    },
    "papermill": {
     "duration": 1.093544,
     "end_time": "2023-11-01T23:57:59.333261",
     "exception": false,
     "start_time": "2023-11-01T23:57:58.239717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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9gi8jpq/s9fe3p7Zs2dn4sSJmTBhQs4///ysW7cuSVKpVHLFFVdk4sSJGTt2bM4666y0trZWeWIAAIDqq/nYu+iii/LLX/4yV1xxRb72ta/lkUceyaxZs5IkCxcuzJIlSzJ37twsXrw4GzduzLRp06o8MQAAQPXVdOx1dnbmJz/5SaZPn57DDz88EyZMyDnnnJO77rorL7/8chYtWpSzzz47xxxzTA455JDMnTs3v/rVr/LYY49Ve3QAAICqqunYa29vz+bNm9PQ0NC9tttuu6WrqytPPPFEWltbc+SRR3Yfa25uzogRI/LAAw9UY1wAAICaUdMbtOy5554ZPXp0rrnmmowaNSpJcs011+Twww/PCy+8kLq6ugwfPrzH1wwbNixtbW19/p6TJk3a6rHp06dn5MiRfX5sAACA/lLTsZckc+bMySc/+clMmDAhSTJw4MB873vfy7PPPpv6+vrU1fW8OdnQ0JD29vZqjLpTsfMSAADUtpqOvTVr1mTq1KmZNGlSTjvttCTJ9773vUydOjWzZ89OR0dHurq6egRfR0dHGhsb+/w977vvvq0eW7FihZAEAAB2CDUdez/72c+yfv36XH755amvr0+SjBkzJu9+97uzatWqVCqVrF69Os3Nzd1fs3r16nzgAx+o1sgAAAA1oaY3aHnllVcyYMCAHmu77LJLdtlllzQ1NWXvvffO0qVLu4+tWrUqK1eufN3P3QEAAOwMavrO3jHHHJMFCxbknHPOyemnn56BAwfmxhtvTKVSSUtLS55//vksWLAgTU1NGTRoUC655JK0tLRkv/32q/boAAAAVVXTsbfPPvvkxhtvzJVXXpkzzzwzlUolo0ePznXXXZe99torU6dOzYYNG3Leeedl06ZNaWlpyZw5c6o9NgAAQNUNqFQqlWoPsaN4dYOWIUOGdP8qiGqzKyYAALy57h5xarVH6GFbu6SmP7MHAABA34g9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAok9AACAAg3c1hNPOumkbX7QAQMG5LrrruvTQAAAALxx2xx7mzZtyoABA173nNWrV+e///u//+x5AAAAvLm2OfaWLFmy1WOvvPJKFi5cmG984xvZc889M3PmzO0yHAAAAH2zzbG3NY8++mhmz56d3/72t5k8eXLOP//87LnnnttjNgAAAPqoz7G3fv36fO1rX8v3v//9NDc359vf/nYmTpy4PWcDAACgj/oUe7fffnvmz5+ftra2nHzyyZk+fXoGDRq0vWcDAACgj3oVe3/84x9z0UUX5Z577slBBx2Ub37zmzn44IPfrNkAAADoo22OvUWLFuXrX/96KpVKzjvvvJxyyimpq/Nr+gAAAGrRNsfel770pQwYMCDNzc256667ctddd2313AEDBuT666/fLgMCAADQe9t8a27cuHE5/PDD09zcnLq6utf9s71/z94111yT9773vRk9enQ++tGP5tFHH02SVCqVXHHFFZk4cWLGjh2bs846K62trdv1ewMAAOyItvnO3uLFi9/MObbqO9/5ThYuXJiLLrooI0aMyNVXX53Pfe5zuf3223PddddlyZIlmT9/foYNG5YFCxZk2rRpuemmm6oyKwAAQK2o6Q/ddXZ25pprrsnnPve5HHfccRk9enQuueSSbNiwIU8//XQWLVqUs88+O8ccc0wOOeSQzJ07N7/61a/y2GOPVXt0AACAqqrp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Mhz/84fz2t7/NYYcdlq9+9asZMGBAkuQv//Ivc8opp+TJJ5/M+PHj+/R9b7vttixfvjzf//73M3bs2CTJ+9///vzpT3/KggUL8sEPfnD7PEEAiuTOHgD8GbvvvntaWlpy5513plKpJEluv/32DB8+PIcffng+/vGP54Ybbsj69evz61//OrfffnuWLFmS5H/uzvXVvffem2HDhmX//fdPe3t795+jjjoqf/jDH9LW1rZdnh8AZXJnDwC2wfHHH5+f/vSn+eUvf5nRo0fnzjvvzJQpUzJgwICsWrUqs2fPzvLlyzN06NDst99+edvb3tbr7/FqSL6qtbU1zz33XA477LDXPP9Pf/pT9tprrz49HwDKJ/YAYBtMmjQpe+65Z+644460t7fnhRdeyIc//OEkyYwZM9LW1pbbb789++67b5Jk2bJl+fGPf7zVx3v17Z7/2//9fN9b3vKW7s8Bvpbm5uY+PhsAdgZiDwC2wa677prjjjsud955Z1566aUceuih+eu//uskyRNPPJETTjihO/SS/Nlfnt7Q0JD29vZUKpXu8HvooYd6nPOud70r99xzT/bdd980NTV1r1977bW5//77s3Dhwu319AAokNgDgG00efLk3HjjjVm9enVmzJjRvT569Oj8x3/8R97+9rdnjz32yM9//vP853/+Z5L/2chl1KhRWzzW3/7t3+b666/PN7/5zZxwwgn5zW9+k+uuu67HOSeccEJuvPHGnHbaaTn55JOz++67Z+nSpfnhD3+Y888/P3V1PnoPwNb5rwQAbKPDDjss++yzT7q6unLcccd1r1966aUZPXp0vvSlL+WSSy7J0KFDc8stt2TixIm57rrrsmrVqi0e67jjjsvUqVNz/fXX5/3vf3+uvfbaXHbZZT3OGTx4cK6//voccsgh+cpXvpIZM2bk0Ucfzbx583LyySe/6c8XgB3bgMr//TQ4AAAAOzx39gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAok9gAAAAr0/wE12cZJbK4wmgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.452149,
   "end_time": "2023-11-01T23:57:59.865970",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-01T23:57:54.413821",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}