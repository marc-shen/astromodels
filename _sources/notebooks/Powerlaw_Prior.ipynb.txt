{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a424fc5a",
   "metadata": {
    "papermill": {
     "duration": 0.004451,
     "end_time": "2024-06-07T07:01:12.371940",
     "exception": false,
     "start_time": "2024-06-07T07:01:12.367489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d1c51425",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:12.381861Z",
     "iopub.status.busy": "2024-06-07T07:01:12.381255Z",
     "iopub.status.idle": "2024-06-07T07:01:13.984048Z",
     "shell.execute_reply": "2024-06-07T07:01:13.983106Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.610475,
     "end_time": "2024-06-07T07:01:13.986243",
     "exception": false,
     "start_time": "2024-06-07T07:01:12.375768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8437f030",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:13.990290Z",
     "iopub.status.busy": "2024-06-07T07:01:13.989843Z",
     "iopub.status.idle": "2024-06-07T07:01:13.993025Z",
     "shell.execute_reply": "2024-06-07T07:01:13.992387Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007364,
     "end_time": "2024-06-07T07:01:13.995074",
     "exception": false,
     "start_time": "2024-06-07T07:01:13.987710",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f744574d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:13.999015Z",
     "iopub.status.busy": "2024-06-07T07:01:13.998790Z",
     "iopub.status.idle": "2024-06-07T07:01:14.001929Z",
     "shell.execute_reply": "2024-06-07T07:01:14.001106Z"
    },
    "papermill": {
     "duration": 0.007447,
     "end_time": "2024-06-07T07:01:14.003817",
     "exception": false,
     "start_time": "2024-06-07T07:01:13.996370",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fcc0a84e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:14.007054Z",
     "iopub.status.busy": "2024-06-07T07:01:14.006870Z",
     "iopub.status.idle": "2024-06-07T07:01:14.016321Z",
     "shell.execute_reply": "2024-06-07T07:01:14.015889Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012575,
     "end_time": "2024-06-07T07:01:14.017666",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.005091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cde2a694",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001007,
     "end_time": "2024-06-07T07:01:14.019809",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.018802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "23a86e39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:14.022528Z",
     "iopub.status.busy": "2024-06-07T07:01:14.022375Z",
     "iopub.status.idle": "2024-06-07T07:01:14.026457Z",
     "shell.execute_reply": "2024-06-07T07:01:14.025995Z"
    },
    "papermill": {
     "duration": 0.006915,
     "end_time": "2024-06-07T07:01:14.027742",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.020827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d88a4761",
   "metadata": {
    "papermill": {
     "duration": 0.001099,
     "end_time": "2024-06-07T07:01:14.029977",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.028878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "86db0511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:14.032866Z",
     "iopub.status.busy": "2024-06-07T07:01:14.032720Z",
     "iopub.status.idle": "2024-06-07T07:01:14.128547Z",
     "shell.execute_reply": "2024-06-07T07:01:14.128184Z"
    },
    "papermill": {
     "duration": 0.098789,
     "end_time": "2024-06-07T07:01:14.129823",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.031034",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72d10031",
   "metadata": {
    "papermill": {
     "duration": 0.001341,
     "end_time": "2024-06-07T07:01:14.132785",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.131444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8cb87b41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:01:14.136658Z",
     "iopub.status.busy": "2024-06-07T07:01:14.136458Z",
     "iopub.status.idle": "2024-06-07T07:01:14.483585Z",
     "shell.execute_reply": "2024-06-07T07:01:14.483195Z"
    },
    "papermill": {
     "duration": 0.351334,
     "end_time": "2024-06-07T07:01:14.485689",
     "exception": false,
     "start_time": "2024-06-07T07:01:14.134355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.328492,
   "end_time": "2024-06-07T07:01:14.927137",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-06-07T07:01:11.598645",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}