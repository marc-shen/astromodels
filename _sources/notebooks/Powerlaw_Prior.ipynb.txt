{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b2282256",
   "metadata": {
    "papermill": {
     "duration": 0.004078,
     "end_time": "2024-08-13T20:17:06.136030",
     "exception": false,
     "start_time": "2024-08-13T20:17:06.131952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c64bf208",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:06.148325Z",
     "iopub.status.busy": "2024-08-13T20:17:06.147790Z",
     "iopub.status.idle": "2024-08-13T20:17:07.711786Z",
     "shell.execute_reply": "2024-08-13T20:17:07.710909Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.57349,
     "end_time": "2024-08-13T20:17:07.714147",
     "exception": false,
     "start_time": "2024-08-13T20:17:06.140657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5dd2ea0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.718600Z",
     "iopub.status.busy": "2024-08-13T20:17:07.718084Z",
     "iopub.status.idle": "2024-08-13T20:17:07.721785Z",
     "shell.execute_reply": "2024-08-13T20:17:07.721134Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008561,
     "end_time": "2024-08-13T20:17:07.724185",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.715624",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e8526ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.728589Z",
     "iopub.status.busy": "2024-08-13T20:17:07.728289Z",
     "iopub.status.idle": "2024-08-13T20:17:07.731376Z",
     "shell.execute_reply": "2024-08-13T20:17:07.730819Z"
    },
    "papermill": {
     "duration": 0.007924,
     "end_time": "2024-08-13T20:17:07.733587",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.725663",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "05d293b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.737710Z",
     "iopub.status.busy": "2024-08-13T20:17:07.737482Z",
     "iopub.status.idle": "2024-08-13T20:17:07.742304Z",
     "shell.execute_reply": "2024-08-13T20:17:07.741228Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00902,
     "end_time": "2024-08-13T20:17:07.744063",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.735043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e60b6c3a",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001115,
     "end_time": "2024-08-13T20:17:07.746432",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.745317",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f7c96713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.749414Z",
     "iopub.status.busy": "2024-08-13T20:17:07.749226Z",
     "iopub.status.idle": "2024-08-13T20:17:07.759947Z",
     "shell.execute_reply": "2024-08-13T20:17:07.759379Z"
    },
    "papermill": {
     "duration": 0.013888,
     "end_time": "2024-08-13T20:17:07.761405",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.747517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace5a3f7",
   "metadata": {
    "papermill": {
     "duration": 0.001185,
     "end_time": "2024-08-13T20:17:07.763968",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.762783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "991c4470",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.766869Z",
     "iopub.status.busy": "2024-08-13T20:17:07.766704Z",
     "iopub.status.idle": "2024-08-13T20:17:07.864106Z",
     "shell.execute_reply": "2024-08-13T20:17:07.863650Z"
    },
    "papermill": {
     "duration": 0.100461,
     "end_time": "2024-08-13T20:17:07.865490",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.765029",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "419b09cf",
   "metadata": {
    "papermill": {
     "duration": 0.001347,
     "end_time": "2024-08-13T20:17:07.868468",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.867121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dcb7cca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T20:17:07.871833Z",
     "iopub.status.busy": "2024-08-13T20:17:07.871680Z",
     "iopub.status.idle": "2024-08-13T20:17:08.242130Z",
     "shell.execute_reply": "2024-08-13T20:17:08.241746Z"
    },
    "papermill": {
     "duration": 0.373647,
     "end_time": "2024-08-13T20:17:08.243493",
     "exception": false,
     "start_time": "2024-08-13T20:17:07.869846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.198898,
   "end_time": "2024-08-13T20:17:08.786147",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-08-13T20:17:05.587249",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}