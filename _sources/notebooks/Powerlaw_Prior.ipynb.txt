{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a0eb99c8",
   "metadata": {
    "papermill": {
     "duration": 0.00413,
     "end_time": "2023-11-02T00:03:44.883250",
     "exception": false,
     "start_time": "2023-11-02T00:03:44.879120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "acdf01d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:44.891524Z",
     "iopub.status.busy": "2023-11-02T00:03:44.891113Z",
     "iopub.status.idle": "2023-11-02T00:03:48.086950Z",
     "shell.execute_reply": "2023-11-02T00:03:48.084697Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.205611,
     "end_time": "2023-11-02T00:03:48.092152",
     "exception": false,
     "start_time": "2023-11-02T00:03:44.886541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "be646b2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.100282Z",
     "iopub.status.busy": "2023-11-02T00:03:48.099777Z",
     "iopub.status.idle": "2023-11-02T00:03:48.106600Z",
     "shell.execute_reply": "2023-11-02T00:03:48.105246Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015893,
     "end_time": "2023-11-02T00:03:48.111012",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.095119",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4cef0992",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.118498Z",
     "iopub.status.busy": "2023-11-02T00:03:48.118053Z",
     "iopub.status.idle": "2023-11-02T00:03:48.124467Z",
     "shell.execute_reply": "2023-11-02T00:03:48.123106Z"
    },
    "papermill": {
     "duration": 0.014992,
     "end_time": "2023-11-02T00:03:48.128713",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.113721",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6354c4a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.136249Z",
     "iopub.status.busy": "2023-11-02T00:03:48.135804Z",
     "iopub.status.idle": "2023-11-02T00:03:48.144383Z",
     "shell.execute_reply": "2023-11-02T00:03:48.142989Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017233,
     "end_time": "2023-11-02T00:03:48.148763",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.131530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3926851c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002865,
     "end_time": "2023-11-02T00:03:48.154485",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.151620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "33305d4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.162049Z",
     "iopub.status.busy": "2023-11-02T00:03:48.161591Z",
     "iopub.status.idle": "2023-11-02T00:03:48.174766Z",
     "shell.execute_reply": "2023-11-02T00:03:48.173166Z"
    },
    "papermill": {
     "duration": 0.021949,
     "end_time": "2023-11-02T00:03:48.179119",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.157170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73180dbd",
   "metadata": {
    "papermill": {
     "duration": 0.003289,
     "end_time": "2023-11-02T00:03:48.185697",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.182408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5a161609",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.193838Z",
     "iopub.status.busy": "2023-11-02T00:03:48.193372Z",
     "iopub.status.idle": "2023-11-02T00:03:48.424173Z",
     "shell.execute_reply": "2023-11-02T00:03:48.422494Z"
    },
    "papermill": {
     "duration": 0.241203,
     "end_time": "2023-11-02T00:03:48.429879",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.188676",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c76a07e0",
   "metadata": {
    "papermill": {
     "duration": 0.098652,
     "end_time": "2023-11-02T00:03:48.532905",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.434253",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c747709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-02T00:03:48.544383Z",
     "iopub.status.busy": "2023-11-02T00:03:48.543950Z",
     "iopub.status.idle": "2023-11-02T00:03:49.862713Z",
     "shell.execute_reply": "2023-11-02T00:03:49.861340Z"
    },
    "papermill": {
     "duration": 1.330506,
     "end_time": "2023-11-02T00:03:49.867755",
     "exception": false,
     "start_time": "2023-11-02T00:03:48.537249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.675709,
   "end_time": "2023-11-02T00:03:50.500657",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-02T00:03:43.824948",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}