{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "78e65f45",
   "metadata": {
    "papermill": {
     "duration": 0.007659,
     "end_time": "2025-04-29T18:32:42.309700",
     "exception": false,
     "start_time": "2025-04-29T18:32:42.302041",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e2bcdfb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:42.322601Z",
     "iopub.status.busy": "2025-04-29T18:32:42.321837Z",
     "iopub.status.idle": "2025-04-29T18:32:43.794771Z",
     "shell.execute_reply": "2025-04-29T18:32:43.794244Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.481056,
     "end_time": "2025-04-29T18:32:43.796051",
     "exception": false,
     "start_time": "2025-04-29T18:32:42.314995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3530bc9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.799181Z",
     "iopub.status.busy": "2025-04-29T18:32:43.798823Z",
     "iopub.status.idle": "2025-04-29T18:32:43.807280Z",
     "shell.execute_reply": "2025-04-29T18:32:43.806896Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011112,
     "end_time": "2025-04-29T18:32:43.808406",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.797294",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "073b9b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.810915Z",
     "iopub.status.busy": "2025-04-29T18:32:43.810776Z",
     "iopub.status.idle": "2025-04-29T18:32:43.818918Z",
     "shell.execute_reply": "2025-04-29T18:32:43.818508Z"
    },
    "papermill": {
     "duration": 0.010619,
     "end_time": "2025-04-29T18:32:43.820019",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.809400",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ffef0c59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.822636Z",
     "iopub.status.busy": "2025-04-29T18:32:43.822497Z",
     "iopub.status.idle": "2025-04-29T18:32:43.831416Z",
     "shell.execute_reply": "2025-04-29T18:32:43.831017Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011449,
     "end_time": "2025-04-29T18:32:43.832548",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.821099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e94c727c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00102,
     "end_time": "2025-04-29T18:32:43.834613",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.833593",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "06a5b653",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.837164Z",
     "iopub.status.busy": "2025-04-29T18:32:43.837031Z",
     "iopub.status.idle": "2025-04-29T18:32:43.840986Z",
     "shell.execute_reply": "2025-04-29T18:32:43.840530Z"
    },
    "papermill": {
     "duration": 0.006465,
     "end_time": "2025-04-29T18:32:43.842053",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.835588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f05c7844",
   "metadata": {
    "papermill": {
     "duration": 0.001137,
     "end_time": "2025-04-29T18:32:43.844300",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.843163",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "615ff6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.847038Z",
     "iopub.status.busy": "2025-04-29T18:32:43.846889Z",
     "iopub.status.idle": "2025-04-29T18:32:43.920655Z",
     "shell.execute_reply": "2025-04-29T18:32:43.920150Z"
    },
    "papermill": {
     "duration": 0.076353,
     "end_time": "2025-04-29T18:32:43.921762",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.845409",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63471354",
   "metadata": {
    "papermill": {
     "duration": 0.001341,
     "end_time": "2025-04-29T18:32:43.924780",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.923439",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e09a951",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T18:32:43.928321Z",
     "iopub.status.busy": "2025-04-29T18:32:43.928073Z",
     "iopub.status.idle": "2025-04-29T18:32:44.245200Z",
     "shell.execute_reply": "2025-04-29T18:32:44.244848Z"
    },
    "papermill": {
     "duration": 0.320346,
     "end_time": "2025-04-29T18:32:44.246487",
     "exception": false,
     "start_time": "2025-04-29T18:32:43.926141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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jBkxZsyYOProo+PAAw+sou/ZZ5+N+fPn13roAAAANdW+3k/h3LBhQ3Tp0qVp2w477BAbN26MF198sTpl84gjjmja16tXr+jTp088/vjjNRoxAABAfajrBVp22WWXGDBgQNx4443Rv3//alv5d5nle/vtt6N9+/bRu3fvzT6nZ8+esXz58mZ/z2HDhm1xX5lh7NevX7O/NgAAQEup69grJk6cGN/4xjeqUziLDh06xH/+53/G66+/Hh07dqyCb1NlFrDMCAIAALRldR17b775ZowcObKabTv99NOrbSX0yrayQufatWurUzo3Db6yrVu3bs3+nrNnz97ivgULFghJAACgVajr2Lvvvvti5cqVceWVV1azeMXAgQPj8MMPj0WLFlW3XliyZEl1rV6j8vGxxx5bw1EDAADUXl0v0PLee+9Fu3btNtu23XbbVW89evSI7t27x5w5c5r2lQBcuHDhR153BwAA0BbU9cxeuaXCtGnTqtstnHHGGdX1erfddls1ozd8+PB44403qv0l/Dp16hRTp06ttvft27fWQwcAAKipuo69Pffcs4q7q6++Os4666wq8srqnDfffHPstttu1bV7q1evjvPOOy/Wr19fhV5Z0AUAAKCta9dQCopPpHGBlq5duzbdCqLWhi+eUeshAABAag/1OS1aY5fU9TV7AAAANI/YAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACChDp/0gSeffPIn/qLt2rWLm2++ubljAgAAoKVib/369VXEfZQlS5bE//7v/37s4wAAAKiT2Js1a9YW97333nsxffr0uP7662OXXXaJ888/f1uNDwAAgE8z9rbkueeeiwkTJsTLL78cxx13XIwfP74KPgAAAFph7K1cuTKuuOKKuP3226NXr17xwx/+MIYOHbptRwcAAEDLxd79998fU6ZMieXLl8cpp5wSY8eOjU6dOjVvBAAAANQ29n7/+9/HJZdcEo888kjsv//+ccMNN8QBBxyw7UcFAABAy8TejBkz4pprromGhoY477zz4tRTT4327d2mDwAAoFXH3ve+973qlgrl+rwHH3ywetuS8rhbbrllW40RAACATyv2Bg8evLVfGwAAgHqPvZkzZ366IwEAAGCbcdEdAABAQq0i9m688cb4q7/6qxgwYEB89atfrW7kXpTFYq666qrq/n6DBg2K0aNHx7Jly2o9XAAAgJqr+9j70Y9+FNOnT49x48bFbbfdFrvvvnv867/+a6xfv77aPmvWrJg0aVJ1mumaNWti1KhRtR4yAABAzdV17K1bt66a1Stx98UvfrGa2Zs6dWqsXr06Xn311ep2EGPGjImjjz46DjzwwCr6nn322Zg/f36thw4AAFBTdR17zz//fLz99tvx5S9/uWnbrrvuGo899lhst9121SmbRxxxRNO+cluIPn36xOOPP16jEQMAALSy1Thr4be//W3suOOO8eijj8YNN9wQb731VgwcOLC6qfvChQurm7r37t17s8/p2bNnLF++vNnfc9iwYVvcN3bs2OjXr1+zvzYAAEBLqeuZvXfeeSfWrl0b//Ef/xHjx4+P6667rgq8U089NVatWhUdO3asPt5Uly5dqn0AAABtWV3P7G3cuLFaiOW73/1uHHDAAdW2ffbZp2n2rYRgecymwVe2devWrdnfc/bs2Vvct2DBAiEJAAC0CnU9s7fbbrtV7//8z/+8aVsJuR49esQbb7xR3XphyZIlm31O+bhcuwcAANCW1XXs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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.986278,
   "end_time": "2025-04-29T18:32:44.571883",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-04-29T18:32:41.585605",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}