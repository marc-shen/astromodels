{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d9507ff7",
   "metadata": {
    "papermill": {
     "duration": 0.004737,
     "end_time": "2022-09-29T21:56:33.819323",
     "exception": false,
     "start_time": "2022-09-29T21:56:33.814586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dc63cda8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:33.829220Z",
     "iopub.status.busy": "2022-09-29T21:56:33.828728Z",
     "iopub.status.idle": "2022-09-29T21:56:38.655273Z",
     "shell.execute_reply": "2022-09-29T21:56:38.654049Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.835707,
     "end_time": "2022-09-29T21:56:38.659025",
     "exception": false,
     "start_time": "2022-09-29T21:56:33.823318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "185dfd9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:38.668727Z",
     "iopub.status.busy": "2022-09-29T21:56:38.668028Z",
     "iopub.status.idle": "2022-09-29T21:56:38.676030Z",
     "shell.execute_reply": "2022-09-29T21:56:38.674736Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016562,
     "end_time": "2022-09-29T21:56:38.679719",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.663157",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35c3e7b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:38.689137Z",
     "iopub.status.busy": "2022-09-29T21:56:38.688561Z",
     "iopub.status.idle": "2022-09-29T21:56:38.694353Z",
     "shell.execute_reply": "2022-09-29T21:56:38.693105Z"
    },
    "papermill": {
     "duration": 0.014219,
     "end_time": "2022-09-29T21:56:38.697467",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.683248",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f17a0d4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:38.705946Z",
     "iopub.status.busy": "2022-09-29T21:56:38.705460Z",
     "iopub.status.idle": "2022-09-29T21:56:38.716837Z",
     "shell.execute_reply": "2022-09-29T21:56:38.714412Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.023952,
     "end_time": "2022-09-29T21:56:38.724596",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.700644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e27adec9",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.005147,
     "end_time": "2022-09-29T21:56:38.732964",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.727817",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "72416e77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:38.747486Z",
     "iopub.status.busy": "2022-09-29T21:56:38.746890Z",
     "iopub.status.idle": "2022-09-29T21:56:38.764756Z",
     "shell.execute_reply": "2022-09-29T21:56:38.761527Z"
    },
    "papermill": {
     "duration": 0.028989,
     "end_time": "2022-09-29T21:56:38.769485",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.740496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11091baf",
   "metadata": {
    "papermill": {
     "duration": 0.004651,
     "end_time": "2022-09-29T21:56:38.778408",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.773757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "82ef7573",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:38.788819Z",
     "iopub.status.busy": "2022-09-29T21:56:38.788366Z",
     "iopub.status.idle": "2022-09-29T21:56:39.221222Z",
     "shell.execute_reply": "2022-09-29T21:56:39.219840Z"
    },
    "papermill": {
     "duration": 0.441708,
     "end_time": "2022-09-29T21:56:39.224384",
     "exception": false,
     "start_time": "2022-09-29T21:56:38.782676",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f4d9fd3",
   "metadata": {
    "papermill": {
     "duration": 0.004262,
     "end_time": "2022-09-29T21:56:39.232630",
     "exception": false,
     "start_time": "2022-09-29T21:56:39.228368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "24dffe10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:56:39.241629Z",
     "iopub.status.busy": "2022-09-29T21:56:39.241193Z",
     "iopub.status.idle": "2022-09-29T21:56:41.067443Z",
     "shell.execute_reply": "2022-09-29T21:56:41.066249Z"
    },
    "papermill": {
     "duration": 1.834924,
     "end_time": "2022-09-29T21:56:41.071152",
     "exception": false,
     "start_time": "2022-09-29T21:56:39.236228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.669287,
   "end_time": "2022-09-29T21:56:41.941262",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2022-09-29T21:56:32.271975",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}