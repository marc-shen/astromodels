{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8cd22406",
   "metadata": {
    "papermill": {
     "duration": 0.001485,
     "end_time": "2024-05-17T21:08:23.032500",
     "exception": false,
     "start_time": "2024-05-17T21:08:23.031015",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "337fbaff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:23.035597Z",
     "iopub.status.busy": "2024-05-17T21:08:23.035397Z",
     "iopub.status.idle": "2024-05-17T21:08:24.605086Z",
     "shell.execute_reply": "2024-05-17T21:08:24.604473Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.573032,
     "end_time": "2024-05-17T21:08:24.606758",
     "exception": false,
     "start_time": "2024-05-17T21:08:23.033726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7a0aebdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.610136Z",
     "iopub.status.busy": "2024-05-17T21:08:24.609781Z",
     "iopub.status.idle": "2024-05-17T21:08:24.616076Z",
     "shell.execute_reply": "2024-05-17T21:08:24.615624Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00926,
     "end_time": "2024-05-17T21:08:24.617375",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.608115",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b6d6045d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.620109Z",
     "iopub.status.busy": "2024-05-17T21:08:24.619954Z",
     "iopub.status.idle": "2024-05-17T21:08:24.625941Z",
     "shell.execute_reply": "2024-05-17T21:08:24.625502Z"
    },
    "papermill": {
     "duration": 0.008915,
     "end_time": "2024-05-17T21:08:24.627351",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.618436",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1492682f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.630189Z",
     "iopub.status.busy": "2024-05-17T21:08:24.630040Z",
     "iopub.status.idle": "2024-05-17T21:08:24.637022Z",
     "shell.execute_reply": "2024-05-17T21:08:24.636593Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00988,
     "end_time": "2024-05-17T21:08:24.638306",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.628426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed5879c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001072,
     "end_time": "2024-05-17T21:08:24.640480",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.639408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "33b8b795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.643242Z",
     "iopub.status.busy": "2024-05-17T21:08:24.643092Z",
     "iopub.status.idle": "2024-05-17T21:08:24.651269Z",
     "shell.execute_reply": "2024-05-17T21:08:24.650749Z"
    },
    "papermill": {
     "duration": 0.011074,
     "end_time": "2024-05-17T21:08:24.652627",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.641553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c544f160",
   "metadata": {
    "papermill": {
     "duration": 0.001186,
     "end_time": "2024-05-17T21:08:24.655188",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.654002",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "02ad04a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.658323Z",
     "iopub.status.busy": "2024-05-17T21:08:24.658135Z",
     "iopub.status.idle": "2024-05-17T21:08:24.759422Z",
     "shell.execute_reply": "2024-05-17T21:08:24.756637Z"
    },
    "papermill": {
     "duration": 0.104431,
     "end_time": "2024-05-17T21:08:24.760747",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.656316",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1954944a",
   "metadata": {
    "papermill": {
     "duration": 0.001319,
     "end_time": "2024-05-17T21:08:24.763631",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.762312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93ff56ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:24.767093Z",
     "iopub.status.busy": "2024-05-17T21:08:24.766938Z",
     "iopub.status.idle": "2024-05-17T21:08:25.106639Z",
     "shell.execute_reply": "2024-05-17T21:08:25.106305Z"
    },
    "papermill": {
     "duration": 0.343183,
     "end_time": "2024-05-17T21:08:25.108080",
     "exception": false,
     "start_time": "2024-05-17T21:08:24.764897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.004826,
   "end_time": "2024-05-17T21:08:25.536220",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-17T21:08:22.531394",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}