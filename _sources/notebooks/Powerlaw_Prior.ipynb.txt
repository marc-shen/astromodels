{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aea21c19",
   "metadata": {
    "papermill": {
     "duration": 0.011588,
     "end_time": "2025-02-01T00:01:03.779724",
     "exception": false,
     "start_time": "2025-02-01T00:01:03.768136",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f26c86e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:03.793696Z",
     "iopub.status.busy": "2025-02-01T00:01:03.792968Z",
     "iopub.status.idle": "2025-02-01T00:01:05.197857Z",
     "shell.execute_reply": "2025-02-01T00:01:05.197344Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.413117,
     "end_time": "2025-02-01T00:01:05.199186",
     "exception": false,
     "start_time": "2025-02-01T00:01:03.786069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1a15d80e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.202211Z",
     "iopub.status.busy": "2025-02-01T00:01:05.201877Z",
     "iopub.status.idle": "2025-02-01T00:01:05.210259Z",
     "shell.execute_reply": "2025-02-01T00:01:05.209889Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01102,
     "end_time": "2025-02-01T00:01:05.211414",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.200394",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ae4011b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.214063Z",
     "iopub.status.busy": "2025-02-01T00:01:05.213914Z",
     "iopub.status.idle": "2025-02-01T00:01:05.215889Z",
     "shell.execute_reply": "2025-02-01T00:01:05.215553Z"
    },
    "papermill": {
     "duration": 0.004497,
     "end_time": "2025-02-01T00:01:05.216977",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.212480",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9887b4dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.219518Z",
     "iopub.status.busy": "2025-02-01T00:01:05.219378Z",
     "iopub.status.idle": "2025-02-01T00:01:05.226094Z",
     "shell.execute_reply": "2025-02-01T00:01:05.225724Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009117,
     "end_time": "2025-02-01T00:01:05.227133",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.218016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26579149",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000987,
     "end_time": "2025-02-01T00:01:05.229172",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.228185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7f36d82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.231639Z",
     "iopub.status.busy": "2025-02-01T00:01:05.231509Z",
     "iopub.status.idle": "2025-02-01T00:01:05.235746Z",
     "shell.execute_reply": "2025-02-01T00:01:05.235366Z"
    },
    "papermill": {
     "duration": 0.006665,
     "end_time": "2025-02-01T00:01:05.236788",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.230123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3e30684",
   "metadata": {
    "papermill": {
     "duration": 0.00113,
     "end_time": "2025-02-01T00:01:05.239079",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.237949",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8020295f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.241783Z",
     "iopub.status.busy": "2025-02-01T00:01:05.241639Z",
     "iopub.status.idle": "2025-02-01T00:01:05.314315Z",
     "shell.execute_reply": "2025-02-01T00:01:05.313871Z"
    },
    "papermill": {
     "duration": 0.075354,
     "end_time": "2025-02-01T00:01:05.315476",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.240122",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1c10339",
   "metadata": {
    "papermill": {
     "duration": 0.001318,
     "end_time": "2025-02-01T00:01:05.318396",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.317078",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eff954c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T00:01:05.321548Z",
     "iopub.status.busy": "2025-02-01T00:01:05.321401Z",
     "iopub.status.idle": "2025-02-01T00:01:05.630706Z",
     "shell.execute_reply": "2025-02-01T00:01:05.630356Z"
    },
    "papermill": {
     "duration": 0.312276,
     "end_time": "2025-02-01T00:01:05.631947",
     "exception": false,
     "start_time": "2025-02-01T00:01:05.319671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3sAAAMICAYAAABxe/yMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAvKUlEQVR4nO3dC5BW5X348R+IyMXgHSpgaKhRvCDBSlBBWzG2Jql2GpNWE+O9kVAKHbUgGhRRMImt4j3aEGJRMZoaJxOjTrxmAC84VkUjGq0TwAbkUiUgV9n/POc/uwMqKhvc993ffj4zO8ue8+7us+Zk9/2+zznPadfQ0NAQAAAApNK+1gMAAABg2xN7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAk1KHWA2hNXnzxxVi3bl20b98+dthhh1oPBwAAaIPWrl0bGzdujI4dO8YBBxywxceJva1QQq/8Ry1vGzZsqPVwAACANt4nH0bsbYUyo1dCr7zv3LlzrYcDAAC0QatXr27qkg8j9rZCOXWzzOiV0OvXr1+thwMAALRB8+bNi1WrVn3kpWUWaAEAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEiobmJv+fLlsf/++1fvGy1btizOOeecGDRoUBx00EFx8sknx0svvdS0v6GhIa6++uoYMmRIDBw4MEaOHBlLly6t0U8AAABQP+oi9t58882YNGlSvPvuu5ttHz16dLz22mtx3XXXxa233hrdunWLb33rW7F69epq/9SpU2PGjBkxceLEmD59eqxZsyZGjBhRo58CAACgfnSo9QAuuuii+MlPfvK+7a+//nrMmTMn7rzzzhgwYEC17YorrojBgwfHgw8+GH/zN38T06ZNi1GjRsXRRx9d7S/Rd9RRR8XcuXOjf//+Lf6zAAAA1Iuaz+wNHz487rnnnrjssss227548eLo0aNH7Lfffk3bunbtGp07d44lS5bEq6++Wp2yecQRRzTt79mzZ/Tu3TueeOKJFv0ZAAAA6k3NZ/ZKoJW3FStWbLb90EMPjV//+tebbbv33nurx5UAnD9/frRv3z569eq12WNKIJZr/Zpr6NChW9xXTivt27dvs782AABAm4m9j2PDhg3V9XnXXnttHHPMMXHYYYfFz3/+8+jYsWMVfJvq0qVLrFq1qmZjBfIatnBasz/34d6nb9OxAAC0+th78cUX4/zzz68WajnjjDOq2bWiLNaydu3a2Lhx42bBV7aVfc01c+bMLe6bN2+ekAQAAFqFml+z92EeeeSROOmkk6rZurvvvjvOO++82H777at93bt3r269sGjRos0+p3xcTgsFAABoy+o29lauXFnN6JWVNm+77bbo16/fZvvLx3vssUfMmjWraduCBQuqa/k+7Lo7AACAtqBuT+OcPXt2dcrkWWedFW+88cZm+3baaafYeeedq1m/KVOmVLN8nTp1ismTJ8ewYcOiT58+NRs3AABAPajb2CszdOvXr4+vfOUr79s3cuTI+Od//ufqtg3lButjxoypHltCb8KECTUZLwAAQD1p11AufONjaVygpdzv772nlQL5WY0TAGhNXVK31+wBAADQfGIPAAAgIbEHAACQkNgDAABIqG5X4wTys+AJAMAnx8weAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkZDVOgBZg5VEAoKWZ2QMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJNSh1gMA6sOwhdOa/bkP9z59m44FAIA/npk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAl1qPUA+OMMWzit2Z/7cO/Tt+lYAID8mvvcw/MOaHlm9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACChDrUeAADUyrCF05r9uQ/3Pn2bjgUAtjUzewAAAAmJPQAAgITEHgAAQEJiDwAAICELtADwPhYuga3j/zMfzX8jaHlm9gAAABISewAA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W7cu7r333hg9enQccsgh1czeueeeGw899FC88847MW3atBg1alQcffTRceCBB1bR99xzz8XcuXNrPXQAAICaal/vp3Bu2LAhunTp0rRthx12iI0bN8ZLL71UnbJ5xBFHNO3r2bNn9O7dO5544okajRgAAKA+1HXs7bLLLtG/f/+46aabYvny5dVb+XeZ5Xvrrbeiffv20atXr80+p0ePHrFs2bKajRkAAKAedIg6N2HChPjGN75RncJZdOjQIf7zP/8z3njjjejYsWMVfJsqs4BlRrC5hg4dusV95XTSvn37NvtrAwAAtJS6jr0lS5bE8OHDqwA744wzqm0l9Mq2skLn2rVrq1M6Nw2+sq1bt241HDUAAPBJGbZwWq2H0GrUdezdf//9sXLlyrjqqquqWbxiwIABcfjhh8eCBQuqWy8sWrSoulavUfn42GOPbfb3nDlz5hb3zZs374+aNQQAAGgpdX3N3rvvvhvt2rXbbNt2221XvXXv3j322GOPmDVrVtO+EoDz58//0FMxAQAA2oK6ntkrt1SYMmVKdbuFM888s7pe7/bbb69m9IYNGxZvvvlmtb+EX6dOnWLy5MnV9j59+tR66AAAADVV17G31157VXF3zTXXxNlnn11FXlmd85ZbbonddtutunZv9erVMWbMmFi/fn0VemVBFwAAgLauXUMpKD6Wxmv2unbtGv369Yt64AJVAAD4ZD3c+/RojV1S19fsAQAA0DxiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAk1OHjPvCUU0752F+0Xbt2ccsttzR3TAAAALRU7K1fv76KuA+zaNGi+N///d+PfBwAAAB1EnszZszY4r533303pk6dGjfccEPssssucf7552+r8QEAAPBJxt6WPP/88zF+/Ph45ZVX4rjjjotx48ZVwQcAAEArjL2VK1fGlVdeGXfccUf07NkzfvjDH8aQIUO27egAAABoudh74IEHYtKkSbFs2bI49dRTY/To0dGpU6fmjQAAAIDaxt7vf//7uOSSS+LRRx+N/fffP2688cY44IADtv2oAAAAaJnYmzZtWlx77bXR0NAQY8aMidNOOy3at3ebPgAAgFYde9/73veqWyqU6/Meeuih6m1LyuNuvfXWbTVGAAAAPqnYGzRo0NZ+bQAAAOo99qZPn/7JjgQAAIBtxkV3AAAACYk9AACAhMQeAABAQmIPAAAgoVYRezfddFP85V/+ZfTv3z+++tWvxvPPP19tL/f8u/rqq2PIkCExcODAGDlyZCxdurTWwwUAAKi5uo+9H/3oRzF16tQYO3Zs3H777bH77rvHv/zLv8T69eur7TNmzIiJEydWq4WuWbMmRowYUeshAwAA1Fxdx966deuqWb0Sd1/84hermb3JkyfH6tWr47XXXotp06bFqFGj4uijj44DDzywir7nnnsu5s6dW+uhAwAA1FRdx94LL7wQb731Vnz5y19u2rbrrrvG448/Htttt111yuYRRxzRtK9nz57Ru3fveOKJJ2o0YgAAgFZ2U/Va+O1vfxs77rhjPPbYY3HjjTfG8uXLY8CAATFmzJiYP39+tG/fPnr16rXZ5/To0SOWLVvW7O85dOjQLe4bPXp09O3bt9lfGwAAoKXU9cze22+/HWvXro3/+I//iHHjxsX1119fBd5pp50Wq1atio4dO1Yfb6pLly7VPgAAgLasrmf2Nm7cWC3E8t3vfjcOOOCAats+++zTNPtWQrA8ZtPgK9u6devW7O85c+bMLe6bN2+ekAQAAFqF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AAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJFT3sbds2bI455xzYtCgQXHQQQfFySefHC+99FK1r6GhIa6++uoYMmRIDBw4MEaOHBlLly6t9ZABAABqru5jb/To0fHaa6/FddddF7feemt069YtvvWtb8Xq1atj6tSpMWPGjJg4cWJMnz491qxZEyNGjKj1kAEAAGquQ9Sx119/PebMmRN33nlnDBgwoNp2xRVXxODBg+NXv/pVTJs2LUaNGhVHH310ta9E31FHHRVz586N/v3713j0AAAAtVPXM3uLFy+OHj16xH777de0rWvXrtG5c+d44403qlM2jzjiiKZ9PXv2jN69e8cTTzxRoxEDAADUh7qe2Tv00EPj17/+9Wbb7r333lixYkXss88+0b59++jVq9dm+0scluv8mmvo0KEfekpp3759m/21AQAAWkpdx96mNmzYUF2jd+2118YxxxwTq1atio4dO1bBt6kuXbpU+wAAANqyVhF7L774Ypx//vnVQi1nnHFGNcM2a9asWLt2bWzcuHGz4CvbyiIuzTVz5swt7ps3b56QBAAAWoW6vmaveOSRR+Kkk06qZuzuvvvuOO+882L77beP7t27V7deWLRo0WaPLx+Xa/cAAADasrqOvZUrV1YzemW1zdtuuy369evXtK/8e4899qhm+BotWLAg5s+f/6HX3QEAALQFdX0a5+zZs6vTJs8666xq9c1N7bTTTtWM35QpU6pZvk6dOsXkyZNj2LBh0adPn5qNGQAAoB7UdeyVWbr169fHV77ylfftGzlyZHUD9XJz9TFjxlSPK6E3YcKEmowVAACgnrRrKBe+8bE0LtBS7vW36SmltTRs4bRaDwEAAFJ7uPfp0Rq7pK6v2QMAAKB5xB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACChVh9769ati4svvjgGDx4cgwYNigsuuCBWrVpV62EBAADUVKuPvcsvvzxmz54dU6ZMiZtvvjnmzZsXF154Ya2HBQAAUFMdohVbsWJF3HXXXXH99dfHYYcdVm0bN25cnHLKKbFs2bLYbbfdaj1EAACAmmjVM3vPPPNM9b4x9IoBAwZEhw4d4sknn6zhyAAAAGqrVc/szZ8/P7p37x4dO3Zs2lb+veuuu1Yze80xdOjQLe679NJLo1u3brF69erqdNF6MGLdn9V6CAAAkNq8lfXx3L9R6ZFi7dq1eWOvLMTSqVOn923v0qXLJ7JIS2NUbty4sW4WgflMdK31EAAAILVV6+vjuf97lS5JG3tllm3NmjXv214Kt+xrjpkzZ25x34svvlit/tm+ffvYYYcdotbmzp1bve/fv3+th0Ir51hiW3Acsa04lthWHEtkPY5K75TQ2/QMx3SxV07hXLJkSRVgjT/ohg0bqm29evXa5t/vgAMOiHpy1llnfWSgwsfhWGJbcByxrTiW2FYcS7T146hVL9BS7q3X0NAQTz/9dNO2OXPmVNvKPfcAAADaqlYde+VUzeOPP75aOKVE3mOPPVbdVP3EE0+srtsDAABoq1r1aZzF+PHjY9KkSTF8+PDqlgvHHXdcjB07ttbDAgAAqKlWH3udO3eOyy67rHoDAAAgwWmcAAAAfLB2DWU1EwAAAFIxswcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYm9Ordu3bq4+OKLY/DgwTFo0KC44IILYtWqVVt8/G233RZHHXVUfO5zn4vTTjstXn/99RYdL63/ONqwYUNcddVVceSRR8aBBx4YX/rSl+KXv/xli4+ZHL+TGv3P//xPDBgwIO6///4WGSe5jqOHH344jjvuuOjfv3984QtfiJ/97GctOl5yHEsNDQ0xbdq0OOaYY+Lggw+OU089NV599dUWHzP1a/ny5bH//vtX77ekHEdXX311DBkyJAYOHBgjR46MpUuXRr0Se3Xu8ssvj9mzZ8eUKVPi5ptvjnnz5sWFF174gY+977774vvf/36MHj067rjjjujRo0eceeaZsWbNmhYfN633OLrhhhvi9ttvj/PPPz9++tOfxl//9V/HOeecEy+++GKLj5vWfSw1evfdd6vjye8imnMcPfvsszFq1Kgq9u6666748pe/XD32tddea/Fx07qPpf/6r/+K6667Ls4999y45ZZbokuXLnHWWWd9rBesyO/NN9+MSZMmVX+zPszUqVNjxowZMXHixJg+fXr1t23EiBFRtxqoW2+//XbDAQcc0PDoo482bXvqqaca+vXr17B06dL3Pf6EE05o+P73v9/08erVqxsGDBjQcN9997XYmGn9x9GQIUMabrrpps22/cM//EPDd77znRYZL3mOpUblePrmN7/ZsM8++/h9xFYfR2effXbD6NGjN9t24oknNtx6660tMl7yHEtf//rXGy677LKmj5cvX96w7777Njz22GMtNmbq0/jx46u/UY1vy5Yt+8DHbdy4seHwww9vuO2225q2vfHGG9XnPP/88w31yMxeHXvmmWeq94cddljTtnIaVIcOHeLJJ5/c7LErV66sZl6OOOKIpm2dOnWKgw46KJ544okWHDX1ZmuOo7Vr18Z2221X7d/UbrvtFkuWLGmhEZPhWGr0yiuvVK+ClldLYWuPo3JaefkbVmbzNlVeVf/GN77RQiMmy++kFStWVLN5jXbYYYdo165ddSoobdvw4cPjnnvuicsuu+xDH1dO+y2nbG76fLtnz57Ru3fvun2+Lfbq2Pz586N79+7RsWPHpm3l37vuumssW7Zss8cuXLgwNm7cGHvttddm28upnO99LG3L1hxH5Q/fY489Vl370Oh3v/tddYrMfvvt16LjpnUfS41P1Mvpm+UUvPf+bqLt2prjaMGCBbF69ep466234qSTTqquyTrhhBOqa/hga38nlSfod999d7z88svVi5tXXnllFX/luKJt69mzZ/U859Of/vRHHnPt27ePXr16tZrn22KvjpVzyMvs3HuVX0zvPb+88eP3Pv6DHkvbsjXH0Xs9+OCD1ROs8ofzjDPO+ARHScZj6Qc/+EF07do1vv71r7fQCMl2HL399tvV+7Jo1Fe/+tVqlvjwww+Pf/qnf4qnn366xcZMjt9J3/72t6Nz585x/PHHVzOA5Xqrs88+O3baaacWGjGt3apVq6oXFErwtZbn2x1qPQC2rFu3bh+4oEF5Narse+9ji/IK6KbKqQnvfSxty9YcR43KKlTjx4+vYq+s7lpOa/jUpz7VAqMly7H00ksvVQsglFfRy2lS0JzjqJyxUvzjP/5jNaNXlMsTyil65ZSrQw45pIVGTYa/b2URjfJE/aabbordd989Hn300eqFhM9+9rPV3zr4KOW4KsdX+d20afB92HOqWhN7daycmlCukyrB1niKQjktqmx77/TxHnvsUb3//e9/X5033Kh8XJaQpe3amuOo8bSpb37zm9UvsrJqWVmiGrb2WCpPxsu1xOXWHZs677zzqtmZsqoibdPWHEfleuGib9++m23fe++9XUfMVh1L5dTNp556qrpFVeOLBOX2Qi+88EJ1Kw+xx8c95sqtFxYtWlSd+tmofHzsscdGPXIaZx0r102VA2rTU1XmzJlTbXvv+eU777xz9WrnzJkzm7aVJ1rPPfdcDB06tEXHTes9joqLLrqoOs2lvGou9GjusfR3f/d38Ytf/KI6jhrfijFjxlSvpNN2bc1xVK71LMFXZoo39dvf/vZ9AUjbszXH0paW0y+RWK5Xh4+jX79+1QTLrFmzNnuRvFzLV6/Pt83s1bEyHVzOK7/00kure3m88847MWHChDjxxBOrc4PLhaDl9IXGV6/KymSXXHJJ7LvvvrHnnnvGNddcE3/6p38ahx56aK1/FFrJcVRO33z88cerx/7hD3+o3hqV6yLKBci0XVtzLJVrYD7oOpjyquimZx/Q9mzNcVROkyr3i73++uurJ1jlTJX777+/ir3yN462bWuOpfIkfZ999qmeJ/3rv/5r9fes/L176KGH4oc//GGtfxTq2OLFi6v35Zgpv5PKWgblvo7l71l5bjR58uQYNmxY9OnTJ+pRu3L/hVoPgi0r1+CVJcvLDdPLUsLlprJjx46N7bffvlrlrpySsOmqZD/60Y9i2rRp1ZP08opX+eXnCTof9zh6/vnn42tf+9oHfo3Pf/7z1cXstG1b+ztpU+WFqKuvvrpuT3Whfo+jH//4x9VbWfK8PGkvj7WCIlt7LJXjp7xIUK7VK7dhKLPD5Tq+L3zhC7X+MagTTz75ZJxyyinVCwFlcbqiXNpSND4HKrPE5QyVcjnC+vXrq9ArLzLsuOOOUY/EHgAAQEKu2QMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAtdLPecmP52bNn13ooALQRYg8AACAhsQcAAJCQ2AOAj3DGGWfEoEGDYv369ZttHzduXBxyyCGxdu3a+NWvfhVf+9rXYuDAgTF48OA4/fTT4+mnn97i1zz//PPjyCOP3GzbwoULq1M977rrrqZtq1evju9+97vVYw866KD4+7//+3j44Yc/gZ8SgGzEHgB8hOOOOy5WrFgRTz31VNO2En4PPfRQHHvssfHSSy/FqFGj4tOf/nRcfvnlVcj93//9X5x55pnx1ltvNfv7vvvuu3H22WfHz372syo4/+3f/q36Ht/+9rfjl7/85Tb66QDIqkOtBwAA9e6YY46JCRMmVLN3Q4YMqbY9/vjj8fbbb8ff/u3fxiuvvBIHH3xwFWPt2rWr9v/Jn/xJnHbaafHyyy9XM33Ncd9991ULu9xxxx3VjGHxV3/1V1VITpkyJb70pS9tw58SgGzM7AHAR9hxxx1j2LBh8eCDD0ZDQ0O17YEHHohevXpVp3GWUytvu+22WLlyZbzwwgvVvhkzZjTNzjXXY489Fj169Ih99tknVq1a1fRWTun83e9+F8uWLdtmPyMA+ZjZA4CP4fjjj69OnXz22Wejf//+VfiddNJJ1UzeggULYvz48dUs3K677hp9+vSJPffcc6u/R2NINlq6dGksXry4mjX8IGWGb7fddmv2zwRAbmIPAD6GoUOHxi677FKdyllm18q1eOUUzmLs2LHVLFuZ0SvX1BXlfnq/+MUvtvj1Gk/33NR7r+/71Kc+1XQd4Afp2bPnH/lTAZCZ2AOAj2H77bePL37xi9WM3h/+8IdqZczPfOYz1b6yQMsJJ5zQFHrFR908vUuXLlU0ltm8xvCbM2fOZo/5/Oc/H48++mj1dbt37960/eabb66uGZw6deo2/ikByETsAcBWrMp5++23x6JFi6rZvEbltM6f//znsffee8dOO+0UjzzySPz3f/93ta9EWb9+/d73tf78z/88br311rjxxhurUPzNb34Tt9xyy2aPKdvL9ysrcZ566qnVtYOzZs2Kn/70p9VtH9q3d+k9AFvmrwQAfEzl2rm99torNm7cWM3yNSqnWZbg+973vheTJ0+urtu7++67q5U7S8CVa/req3z+8OHDq+ArK2yW2bpyP71Nde7cudp/4IEHxhVXXFEF5vPPPx+XXXZZFX8A8GHaNbz3anAAAABaPTN7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACDy+X8b89Ca2mPoVQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.928117,
   "end_time": "2025-02-01T00:01:05.964988",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-02-01T00:01:03.036871",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}