{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4db5448b",
   "metadata": {
    "papermill": {
     "duration": 0.010673,
     "end_time": "2024-05-13T22:11:26.338570",
     "exception": false,
     "start_time": "2024-05-13T22:11:26.327897",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "806a9c27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:26.352532Z",
     "iopub.status.busy": "2024-05-13T22:11:26.351901Z",
     "iopub.status.idle": "2024-05-13T22:11:27.761480Z",
     "shell.execute_reply": "2024-05-13T22:11:27.760975Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.418194,
     "end_time": "2024-05-13T22:11:27.762997",
     "exception": false,
     "start_time": "2024-05-13T22:11:26.344803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6622514",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.766210Z",
     "iopub.status.busy": "2024-05-13T22:11:27.765890Z",
     "iopub.status.idle": "2024-05-13T22:11:27.767991Z",
     "shell.execute_reply": "2024-05-13T22:11:27.767611Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004996,
     "end_time": "2024-05-13T22:11:27.769287",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.764291",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9ed3c9a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.771895Z",
     "iopub.status.busy": "2024-05-13T22:11:27.771761Z",
     "iopub.status.idle": "2024-05-13T22:11:27.778240Z",
     "shell.execute_reply": "2024-05-13T22:11:27.777863Z"
    },
    "papermill": {
     "duration": 0.00918,
     "end_time": "2024-05-13T22:11:27.779491",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.770311",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "54c1b063",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.782120Z",
     "iopub.status.busy": "2024-05-13T22:11:27.781978Z",
     "iopub.status.idle": "2024-05-13T22:11:27.790808Z",
     "shell.execute_reply": "2024-05-13T22:11:27.790369Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011537,
     "end_time": "2024-05-13T22:11:27.792009",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.780472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78d12c03",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001002,
     "end_time": "2024-05-13T22:11:27.794032",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.793030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e902ee0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.796650Z",
     "iopub.status.busy": "2024-05-13T22:11:27.796515Z",
     "iopub.status.idle": "2024-05-13T22:11:27.800460Z",
     "shell.execute_reply": "2024-05-13T22:11:27.799987Z"
    },
    "papermill": {
     "duration": 0.006686,
     "end_time": "2024-05-13T22:11:27.801728",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.795042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9deca82",
   "metadata": {
    "papermill": {
     "duration": 0.001065,
     "end_time": "2024-05-13T22:11:27.803939",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.802874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9e17e5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.806700Z",
     "iopub.status.busy": "2024-05-13T22:11:27.806563Z",
     "iopub.status.idle": "2024-05-13T22:11:27.907018Z",
     "shell.execute_reply": "2024-05-13T22:11:27.906615Z"
    },
    "papermill": {
     "duration": 0.103319,
     "end_time": "2024-05-13T22:11:27.908266",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.804947",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213bba72",
   "metadata": {
    "papermill": {
     "duration": 0.001312,
     "end_time": "2024-05-13T22:11:27.911132",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.909820",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "23c1ad77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:27.914363Z",
     "iopub.status.busy": "2024-05-13T22:11:27.914225Z",
     "iopub.status.idle": "2024-05-13T22:11:28.257014Z",
     "shell.execute_reply": "2024-05-13T22:11:28.256100Z"
    },
    "papermill": {
     "duration": 0.346041,
     "end_time": "2024-05-13T22:11:28.258457",
     "exception": false,
     "start_time": "2024-05-13T22:11:27.912416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.930249,
   "end_time": "2024-05-13T22:11:28.690472",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-13T22:11:25.760223",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}