{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f76c8d7d",
   "metadata": {
    "papermill": {
     "duration": 0.014823,
     "end_time": "2023-11-01T19:24:53.745849",
     "exception": false,
     "start_time": "2023-11-01T19:24:53.731026",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e1b7e46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:53.782365Z",
     "iopub.status.busy": "2023-11-01T19:24:53.781999Z",
     "iopub.status.idle": "2023-11-01T19:24:57.416152Z",
     "shell.execute_reply": "2023-11-01T19:24:57.414196Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.643308,
     "end_time": "2023-11-01T19:24:57.421157",
     "exception": false,
     "start_time": "2023-11-01T19:24:53.777849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e2453e36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.429421Z",
     "iopub.status.busy": "2023-11-01T19:24:57.428850Z",
     "iopub.status.idle": "2023-11-01T19:24:57.439367Z",
     "shell.execute_reply": "2023-11-01T19:24:57.437576Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.020012,
     "end_time": "2023-11-01T19:24:57.443952",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.423940",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dbc145cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.451127Z",
     "iopub.status.busy": "2023-11-01T19:24:57.450651Z",
     "iopub.status.idle": "2023-11-01T19:24:57.459131Z",
     "shell.execute_reply": "2023-11-01T19:24:57.457659Z"
    },
    "papermill": {
     "duration": 0.019381,
     "end_time": "2023-11-01T19:24:57.465812",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.446431",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ade5b696",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.475325Z",
     "iopub.status.busy": "2023-11-01T19:24:57.474987Z",
     "iopub.status.idle": "2023-11-01T19:24:57.481822Z",
     "shell.execute_reply": "2023-11-01T19:24:57.480028Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015624,
     "end_time": "2023-11-01T19:24:57.485984",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.470360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f714a39",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00262,
     "end_time": "2023-11-01T19:24:57.491086",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.488466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bacee60e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.498333Z",
     "iopub.status.busy": "2023-11-01T19:24:57.497956Z",
     "iopub.status.idle": "2023-11-01T19:24:57.513776Z",
     "shell.execute_reply": "2023-11-01T19:24:57.512042Z"
    },
    "papermill": {
     "duration": 0.025146,
     "end_time": "2023-11-01T19:24:57.518914",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.493768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab27919d",
   "metadata": {
    "papermill": {
     "duration": 0.002992,
     "end_time": "2023-11-01T19:24:57.524851",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.521859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "801cd659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.534095Z",
     "iopub.status.busy": "2023-11-01T19:24:57.533538Z",
     "iopub.status.idle": "2023-11-01T19:24:57.826610Z",
     "shell.execute_reply": "2023-11-01T19:24:57.824988Z"
    },
    "papermill": {
     "duration": 0.302894,
     "end_time": "2023-11-01T19:24:57.830870",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.527976",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36dd1eb7",
   "metadata": {
    "papermill": {
     "duration": 0.003118,
     "end_time": "2023-11-01T19:24:57.837299",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.834181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "78a5129a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:57.847442Z",
     "iopub.status.busy": "2023-11-01T19:24:57.846965Z",
     "iopub.status.idle": "2023-11-01T19:24:58.982243Z",
     "shell.execute_reply": "2023-11-01T19:24:58.981105Z"
    },
    "papermill": {
     "duration": 1.145286,
     "end_time": "2023-11-01T19:24:58.986131",
     "exception": false,
     "start_time": "2023-11-01T19:24:57.840845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.145857,
   "end_time": "2023-11-01T19:24:59.520261",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-01T19:24:52.374404",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}