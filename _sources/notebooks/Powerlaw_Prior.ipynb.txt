{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fed53b5c",
   "metadata": {
    "papermill": {
     "duration": 0.007964,
     "end_time": "2024-08-14T21:26:00.905744",
     "exception": false,
     "start_time": "2024-08-14T21:26:00.897780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d36a7ec7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:00.920384Z",
     "iopub.status.busy": "2024-08-14T21:26:00.919795Z",
     "iopub.status.idle": "2024-08-14T21:26:02.366339Z",
     "shell.execute_reply": "2024-08-14T21:26:02.365845Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.455365,
     "end_time": "2024-08-14T21:26:02.367886",
     "exception": false,
     "start_time": "2024-08-14T21:26:00.912521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d7c954e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.371213Z",
     "iopub.status.busy": "2024-08-14T21:26:02.370865Z",
     "iopub.status.idle": "2024-08-14T21:26:02.379160Z",
     "shell.execute_reply": "2024-08-14T21:26:02.378793Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011287,
     "end_time": "2024-08-14T21:26:02.380418",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.369131",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84088891",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.382987Z",
     "iopub.status.busy": "2024-08-14T21:26:02.382849Z",
     "iopub.status.idle": "2024-08-14T21:26:02.390841Z",
     "shell.execute_reply": "2024-08-14T21:26:02.390458Z"
    },
    "papermill": {
     "duration": 0.010738,
     "end_time": "2024-08-14T21:26:02.392125",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.381387",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "848e6cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.394710Z",
     "iopub.status.busy": "2024-08-14T21:26:02.394567Z",
     "iopub.status.idle": "2024-08-14T21:26:02.403418Z",
     "shell.execute_reply": "2024-08-14T21:26:02.403029Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011614,
     "end_time": "2024-08-14T21:26:02.404746",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.393132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd5e159b",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001024,
     "end_time": "2024-08-14T21:26:02.406917",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.405893",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bcb23f63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.409545Z",
     "iopub.status.busy": "2024-08-14T21:26:02.409409Z",
     "iopub.status.idle": "2024-08-14T21:26:02.420269Z",
     "shell.execute_reply": "2024-08-14T21:26:02.419804Z"
    },
    "papermill": {
     "duration": 0.013635,
     "end_time": "2024-08-14T21:26:02.421528",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.407893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846ea6aa",
   "metadata": {
    "papermill": {
     "duration": 0.001173,
     "end_time": "2024-08-14T21:26:02.423895",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.422722",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aa59abc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.426783Z",
     "iopub.status.busy": "2024-08-14T21:26:02.426640Z",
     "iopub.status.idle": "2024-08-14T21:26:02.525901Z",
     "shell.execute_reply": "2024-08-14T21:26:02.525513Z"
    },
    "papermill": {
     "duration": 0.102234,
     "end_time": "2024-08-14T21:26:02.527246",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.425012",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a572e851",
   "metadata": {
    "papermill": {
     "duration": 0.001348,
     "end_time": "2024-08-14T21:26:02.530220",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.528872",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e77bea79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:26:02.533774Z",
     "iopub.status.busy": "2024-08-14T21:26:02.533622Z",
     "iopub.status.idle": "2024-08-14T21:26:02.892500Z",
     "shell.execute_reply": "2024-08-14T21:26:02.892135Z"
    },
    "papermill": {
     "duration": 0.362348,
     "end_time": "2024-08-14T21:26:02.893964",
     "exception": false,
     "start_time": "2024-08-14T21:26:02.531616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.042061,
   "end_time": "2024-08-14T21:26:03.335127",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-08-14T21:26:00.293066",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}