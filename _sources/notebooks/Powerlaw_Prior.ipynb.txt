{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4caf2e5b",
   "metadata": {
    "papermill": {
     "duration": 0.002987,
     "end_time": "2024-09-10T14:17:25.373758",
     "exception": false,
     "start_time": "2024-09-10T14:17:25.370771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "77e92b11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:25.380302Z",
     "iopub.status.busy": "2024-09-10T14:17:25.379894Z",
     "iopub.status.idle": "2024-09-10T14:17:26.808947Z",
     "shell.execute_reply": "2024-09-10T14:17:26.808486Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.434155,
     "end_time": "2024-09-10T14:17:26.810445",
     "exception": false,
     "start_time": "2024-09-10T14:17:25.376290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a1e246a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.813618Z",
     "iopub.status.busy": "2024-09-10T14:17:26.813295Z",
     "iopub.status.idle": "2024-09-10T14:17:26.821328Z",
     "shell.execute_reply": "2024-09-10T14:17:26.820954Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011097,
     "end_time": "2024-09-10T14:17:26.822723",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.811626",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58546e02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.825449Z",
     "iopub.status.busy": "2024-09-10T14:17:26.825304Z",
     "iopub.status.idle": "2024-09-10T14:17:26.827184Z",
     "shell.execute_reply": "2024-09-10T14:17:26.826797Z"
    },
    "papermill": {
     "duration": 0.00468,
     "end_time": "2024-09-10T14:17:26.828473",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.823793",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b74f1a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.831180Z",
     "iopub.status.busy": "2024-09-10T14:17:26.831035Z",
     "iopub.status.idle": "2024-09-10T14:17:26.837947Z",
     "shell.execute_reply": "2024-09-10T14:17:26.837540Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009731,
     "end_time": "2024-09-10T14:17:26.839233",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.829502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cdd3c9d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001031,
     "end_time": "2024-09-10T14:17:26.841376",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.840345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a0f0d49b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.843999Z",
     "iopub.status.busy": "2024-09-10T14:17:26.843843Z",
     "iopub.status.idle": "2024-09-10T14:17:26.854075Z",
     "shell.execute_reply": "2024-09-10T14:17:26.853621Z"
    },
    "papermill": {
     "duration": 0.013003,
     "end_time": "2024-09-10T14:17:26.855352",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.842349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9f39951",
   "metadata": {
    "papermill": {
     "duration": 0.001197,
     "end_time": "2024-09-10T14:17:26.857819",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.856622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "53d42f51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.860658Z",
     "iopub.status.busy": "2024-09-10T14:17:26.860507Z",
     "iopub.status.idle": "2024-09-10T14:17:26.954554Z",
     "shell.execute_reply": "2024-09-10T14:17:26.954191Z"
    },
    "papermill": {
     "duration": 0.097228,
     "end_time": "2024-09-10T14:17:26.956115",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.858887",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b0eab6",
   "metadata": {
    "papermill": {
     "duration": 0.001424,
     "end_time": "2024-09-10T14:17:26.959227",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.957803",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6d4a9476",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T14:17:26.963077Z",
     "iopub.status.busy": "2024-09-10T14:17:26.962900Z",
     "iopub.status.idle": "2024-09-10T14:17:27.300431Z",
     "shell.execute_reply": "2024-09-10T14:17:27.299271Z"
    },
    "papermill": {
     "duration": 0.342494,
     "end_time": "2024-09-10T14:17:27.303269",
     "exception": false,
     "start_time": "2024-09-10T14:17:26.960775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.972613,
   "end_time": "2024-09-10T14:17:27.735704",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-09-10T14:17:24.763091",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}