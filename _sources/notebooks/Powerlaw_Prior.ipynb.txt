{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35c55659",
   "metadata": {
    "papermill": {
     "duration": 0.00456,
     "end_time": "2025-04-29T00:17:00.755508",
     "exception": false,
     "start_time": "2025-04-29T00:17:00.750948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2fbf594a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:00.766045Z",
     "iopub.status.busy": "2025-04-29T00:17:00.765096Z",
     "iopub.status.idle": "2025-04-29T00:17:02.972747Z",
     "shell.execute_reply": "2025-04-29T00:17:02.971961Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.215509,
     "end_time": "2025-04-29T00:17:02.975078",
     "exception": false,
     "start_time": "2025-04-29T00:17:00.759569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bcc8b085",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:02.979520Z",
     "iopub.status.busy": "2025-04-29T00:17:02.979074Z",
     "iopub.status.idle": "2025-04-29T00:17:02.982008Z",
     "shell.execute_reply": "2025-04-29T00:17:02.981468Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007114,
     "end_time": "2025-04-29T00:17:02.983911",
     "exception": false,
     "start_time": "2025-04-29T00:17:02.976797",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e0cb9ba7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:02.987714Z",
     "iopub.status.busy": "2025-04-29T00:17:02.987464Z",
     "iopub.status.idle": "2025-04-29T00:17:02.990092Z",
     "shell.execute_reply": "2025-04-29T00:17:02.989537Z"
    },
    "papermill": {
     "duration": 0.006573,
     "end_time": "2025-04-29T00:17:02.991859",
     "exception": false,
     "start_time": "2025-04-29T00:17:02.985286",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "286b96c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:02.995670Z",
     "iopub.status.busy": "2025-04-29T00:17:02.995433Z",
     "iopub.status.idle": "2025-04-29T00:17:02.999417Z",
     "shell.execute_reply": "2025-04-29T00:17:02.998675Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010966,
     "end_time": "2025-04-29T00:17:03.004180",
     "exception": false,
     "start_time": "2025-04-29T00:17:02.993214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61615760",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001283,
     "end_time": "2025-04-29T00:17:03.006916",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.005633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "edbdb6c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:03.010476Z",
     "iopub.status.busy": "2025-04-29T00:17:03.010263Z",
     "iopub.status.idle": "2025-04-29T00:17:03.015917Z",
     "shell.execute_reply": "2025-04-29T00:17:03.015148Z"
    },
    "papermill": {
     "duration": 0.009937,
     "end_time": "2025-04-29T00:17:03.017999",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.008062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e4f5ffd",
   "metadata": {
    "papermill": {
     "duration": 0.001397,
     "end_time": "2025-04-29T00:17:03.020941",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.019544",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f0c6deab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:03.024599Z",
     "iopub.status.busy": "2025-04-29T00:17:03.024379Z",
     "iopub.status.idle": "2025-04-29T00:17:03.132306Z",
     "shell.execute_reply": "2025-04-29T00:17:03.131409Z"
    },
    "papermill": {
     "duration": 0.113216,
     "end_time": "2025-04-29T00:17:03.135471",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.022255",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95cf9729",
   "metadata": {
    "papermill": {
     "duration": 0.001905,
     "end_time": "2025-04-29T00:17:03.142013",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.140108",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec4551ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:17:03.147150Z",
     "iopub.status.busy": "2025-04-29T00:17:03.146699Z",
     "iopub.status.idle": "2025-04-29T00:17:03.584149Z",
     "shell.execute_reply": "2025-04-29T00:17:03.574871Z"
    },
    "papermill": {
     "duration": 0.443575,
     "end_time": "2025-04-29T00:17:03.587034",
     "exception": false,
     "start_time": "2025-04-29T00:17:03.143459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.142579,
   "end_time": "2025-04-29T00:17:04.151675",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-04-29T00:17:00.009096",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}