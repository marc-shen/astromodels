{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "39aa1f6a",
   "metadata": {
    "papermill": {
     "duration": 0.00151,
     "end_time": "2025-05-21T18:31:02.649251",
     "exception": false,
     "start_time": "2025-05-21T18:31:02.647741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2a947663",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:02.652661Z",
     "iopub.status.busy": "2025-05-21T18:31:02.652430Z",
     "iopub.status.idle": "2025-05-21T18:31:04.288669Z",
     "shell.execute_reply": "2025-05-21T18:31:04.288083Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.639715,
     "end_time": "2025-05-21T18:31:04.290228",
     "exception": false,
     "start_time": "2025-05-21T18:31:02.650513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f48841a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.294130Z",
     "iopub.status.busy": "2025-05-21T18:31:04.293748Z",
     "iopub.status.idle": "2025-05-21T18:31:04.302262Z",
     "shell.execute_reply": "2025-05-21T18:31:04.301819Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011546,
     "end_time": "2025-05-21T18:31:04.303449",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.291903",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "696d7f7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.306479Z",
     "iopub.status.busy": "2025-05-21T18:31:04.306296Z",
     "iopub.status.idle": "2025-05-21T18:31:04.308318Z",
     "shell.execute_reply": "2025-05-21T18:31:04.307923Z"
    },
    "papermill": {
     "duration": 0.004736,
     "end_time": "2025-05-21T18:31:04.309417",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.304681",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f32bcd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.312137Z",
     "iopub.status.busy": "2025-05-21T18:31:04.311991Z",
     "iopub.status.idle": "2025-05-21T18:31:04.318194Z",
     "shell.execute_reply": "2025-05-21T18:31:04.317744Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008848,
     "end_time": "2025-05-21T18:31:04.319391",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.310543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c82211ce",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001002,
     "end_time": "2025-05-21T18:31:04.321524",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.320522",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b3932d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.324191Z",
     "iopub.status.busy": "2025-05-21T18:31:04.324028Z",
     "iopub.status.idle": "2025-05-21T18:31:04.328826Z",
     "shell.execute_reply": "2025-05-21T18:31:04.328401Z"
    },
    "papermill": {
     "duration": 0.007542,
     "end_time": "2025-05-21T18:31:04.330022",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.322480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "186b74d4",
   "metadata": {
    "papermill": {
     "duration": 0.001117,
     "end_time": "2025-05-21T18:31:04.332379",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.331262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "295aa1a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.335446Z",
     "iopub.status.busy": "2025-05-21T18:31:04.335271Z",
     "iopub.status.idle": "2025-05-21T18:31:04.412555Z",
     "shell.execute_reply": "2025-05-21T18:31:04.412102Z"
    },
    "papermill": {
     "duration": 0.080126,
     "end_time": "2025-05-21T18:31:04.413739",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.333613",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0dec6c7",
   "metadata": {
    "papermill": {
     "duration": 0.002002,
     "end_time": "2025-05-21T18:31:04.417468",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.415466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "94624eca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T18:31:04.421025Z",
     "iopub.status.busy": "2025-05-21T18:31:04.420858Z",
     "iopub.status.idle": "2025-05-21T18:31:04.733095Z",
     "shell.execute_reply": "2025-05-21T18:31:04.732745Z"
    },
    "papermill": {
     "duration": 0.315509,
     "end_time": "2025-05-21T18:31:04.734361",
     "exception": false,
     "start_time": "2025-05-21T18:31:04.418852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.240195,
   "end_time": "2025-05-21T18:31:05.181289",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-05-21T18:31:01.941094",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}