{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e1b90b9",
   "metadata": {
    "papermill": {
     "duration": 0.001474,
     "end_time": "2024-05-08T21:31:55.885722",
     "exception": false,
     "start_time": "2024-05-08T21:31:55.884248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8494d0aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:55.888866Z",
     "iopub.status.busy": "2024-05-08T21:31:55.888678Z",
     "iopub.status.idle": "2024-05-08T21:31:57.545735Z",
     "shell.execute_reply": "2024-05-08T21:31:57.545052Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.660482,
     "end_time": "2024-05-08T21:31:57.547404",
     "exception": false,
     "start_time": "2024-05-08T21:31:55.886922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c5008cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.551317Z",
     "iopub.status.busy": "2024-05-08T21:31:57.550875Z",
     "iopub.status.idle": "2024-05-08T21:31:57.553363Z",
     "shell.execute_reply": "2024-05-08T21:31:57.552944Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005742,
     "end_time": "2024-05-08T21:31:57.554645",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.548903",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "953f6f34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.557697Z",
     "iopub.status.busy": "2024-05-08T21:31:57.557526Z",
     "iopub.status.idle": "2024-05-08T21:31:57.563673Z",
     "shell.execute_reply": "2024-05-08T21:31:57.563213Z"
    },
    "papermill": {
     "duration": 0.009323,
     "end_time": "2024-05-08T21:31:57.565162",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.555839",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6ef74c93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.568297Z",
     "iopub.status.busy": "2024-05-08T21:31:57.568123Z",
     "iopub.status.idle": "2024-05-08T21:31:57.575442Z",
     "shell.execute_reply": "2024-05-08T21:31:57.574895Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010577,
     "end_time": "2024-05-08T21:31:57.576961",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.566384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e55960f1",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001023,
     "end_time": "2024-05-08T21:31:57.579196",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.578173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e0ed3abf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.582053Z",
     "iopub.status.busy": "2024-05-08T21:31:57.581878Z",
     "iopub.status.idle": "2024-05-08T21:31:57.587005Z",
     "shell.execute_reply": "2024-05-08T21:31:57.586597Z"
    },
    "papermill": {
     "duration": 0.008128,
     "end_time": "2024-05-08T21:31:57.588307",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.580179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43adf934",
   "metadata": {
    "papermill": {
     "duration": 0.00117,
     "end_time": "2024-05-08T21:31:57.590840",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.589670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "95e112d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.593926Z",
     "iopub.status.busy": "2024-05-08T21:31:57.593771Z",
     "iopub.status.idle": "2024-05-08T21:31:57.688411Z",
     "shell.execute_reply": "2024-05-08T21:31:57.688070Z"
    },
    "papermill": {
     "duration": 0.097829,
     "end_time": "2024-05-08T21:31:57.689857",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.592028",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f48950",
   "metadata": {
    "papermill": {
     "duration": 0.001436,
     "end_time": "2024-05-08T21:31:57.692894",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.691458",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a8148e8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:57.696214Z",
     "iopub.status.busy": "2024-05-08T21:31:57.696074Z",
     "iopub.status.idle": "2024-05-08T21:31:58.053127Z",
     "shell.execute_reply": "2024-05-08T21:31:58.051508Z"
    },
    "papermill": {
     "duration": 0.360318,
     "end_time": "2024-05-08T21:31:58.054485",
     "exception": false,
     "start_time": "2024-05-08T21:31:57.694167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.31559,
   "end_time": "2024-05-08T21:31:58.483204",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-05-08T21:31:55.167614",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}