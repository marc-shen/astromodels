{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d9d180f1",
   "metadata": {
    "papermill": {
     "duration": 0.00394,
     "end_time": "2023-11-01T20:53:56.823294",
     "exception": false,
     "start_time": "2023-11-01T20:53:56.819354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a0a10056",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:56.831021Z",
     "iopub.status.busy": "2023-11-01T20:53:56.830622Z",
     "iopub.status.idle": "2023-11-01T20:53:59.812360Z",
     "shell.execute_reply": "2023-11-01T20:53:59.809646Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.991193,
     "end_time": "2023-11-01T20:53:59.817525",
     "exception": false,
     "start_time": "2023-11-01T20:53:56.826332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71a7b175",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:59.827489Z",
     "iopub.status.busy": "2023-11-01T20:53:59.826998Z",
     "iopub.status.idle": "2023-11-01T20:53:59.835777Z",
     "shell.execute_reply": "2023-11-01T20:53:59.833790Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01916,
     "end_time": "2023-11-01T20:53:59.840654",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.821494",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "78516b8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:59.848209Z",
     "iopub.status.busy": "2023-11-01T20:53:59.847821Z",
     "iopub.status.idle": "2023-11-01T20:53:59.854159Z",
     "shell.execute_reply": "2023-11-01T20:53:59.852492Z"
    },
    "papermill": {
     "duration": 0.016789,
     "end_time": "2023-11-01T20:53:59.860016",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.843227",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f89ec216",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:59.868708Z",
     "iopub.status.busy": "2023-11-01T20:53:59.868207Z",
     "iopub.status.idle": "2023-11-01T20:53:59.879851Z",
     "shell.execute_reply": "2023-11-01T20:53:59.878163Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.022003,
     "end_time": "2023-11-01T20:53:59.885099",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.863096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6564e013",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002755,
     "end_time": "2023-11-01T20:53:59.890601",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.887846",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2288bab7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:59.901024Z",
     "iopub.status.busy": "2023-11-01T20:53:59.900304Z",
     "iopub.status.idle": "2023-11-01T20:53:59.922678Z",
     "shell.execute_reply": "2023-11-01T20:53:59.919760Z"
    },
    "papermill": {
     "duration": 0.036164,
     "end_time": "2023-11-01T20:53:59.929564",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.893400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d034c3b",
   "metadata": {
    "papermill": {
     "duration": 0.004222,
     "end_time": "2023-11-01T20:53:59.938792",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.934570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9ea5399b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:53:59.951320Z",
     "iopub.status.busy": "2023-11-01T20:53:59.950801Z",
     "iopub.status.idle": "2023-11-01T20:54:00.230978Z",
     "shell.execute_reply": "2023-11-01T20:54:00.229136Z"
    },
    "papermill": {
     "duration": 0.294161,
     "end_time": "2023-11-01T20:54:00.236978",
     "exception": false,
     "start_time": "2023-11-01T20:53:59.942817",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8ebdba7",
   "metadata": {
    "papermill": {
     "duration": 0.003931,
     "end_time": "2023-11-01T20:54:00.244828",
     "exception": false,
     "start_time": "2023-11-01T20:54:00.240897",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dd569c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:54:00.255136Z",
     "iopub.status.busy": "2023-11-01T20:54:00.254709Z",
     "iopub.status.idle": "2023-11-01T20:54:01.440256Z",
     "shell.execute_reply": "2023-11-01T20:54:01.438535Z"
    },
    "papermill": {
     "duration": 1.196463,
     "end_time": "2023-11-01T20:54:01.445117",
     "exception": false,
     "start_time": "2023-11-01T20:54:00.248654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.43231,
   "end_time": "2023-11-01T20:54:02.080258",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-01T20:53:55.647948",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}