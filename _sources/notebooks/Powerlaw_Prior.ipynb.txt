{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7a76b85e",
   "metadata": {
    "papermill": {
     "duration": 0.009856,
     "end_time": "2025-04-28T22:58:02.708149",
     "exception": false,
     "start_time": "2025-04-28T22:58:02.698293",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "321168e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:02.720618Z",
     "iopub.status.busy": "2025-04-28T22:58:02.719996Z",
     "iopub.status.idle": "2025-04-28T22:58:04.157629Z",
     "shell.execute_reply": "2025-04-28T22:58:04.157135Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.445306,
     "end_time": "2025-04-28T22:58:04.158998",
     "exception": false,
     "start_time": "2025-04-28T22:58:02.713692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "50b67c10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.162006Z",
     "iopub.status.busy": "2025-04-28T22:58:04.161694Z",
     "iopub.status.idle": "2025-04-28T22:58:04.169869Z",
     "shell.execute_reply": "2025-04-28T22:58:04.169511Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010751,
     "end_time": "2025-04-28T22:58:04.170989",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.160238",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c5dfa6aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.173503Z",
     "iopub.status.busy": "2025-04-28T22:58:04.173362Z",
     "iopub.status.idle": "2025-04-28T22:58:04.175149Z",
     "shell.execute_reply": "2025-04-28T22:58:04.174807Z"
    },
    "papermill": {
     "duration": 0.004221,
     "end_time": "2025-04-28T22:58:04.176206",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.171985",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "32ba5fc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.178700Z",
     "iopub.status.busy": "2025-04-28T22:58:04.178572Z",
     "iopub.status.idle": "2025-04-28T22:58:04.185833Z",
     "shell.execute_reply": "2025-04-28T22:58:04.185457Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009708,
     "end_time": "2025-04-28T22:58:04.186928",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.177220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3433dd9f",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000983,
     "end_time": "2025-04-28T22:58:04.188938",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.187955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "509041f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.191424Z",
     "iopub.status.busy": "2025-04-28T22:58:04.191282Z",
     "iopub.status.idle": "2025-04-28T22:58:04.201223Z",
     "shell.execute_reply": "2025-04-28T22:58:04.200801Z"
    },
    "papermill": {
     "duration": 0.012423,
     "end_time": "2025-04-28T22:58:04.202284",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.189861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9344f2",
   "metadata": {
    "papermill": {
     "duration": 0.001086,
     "end_time": "2025-04-28T22:58:04.204508",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.203422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca87e2f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.207161Z",
     "iopub.status.busy": "2025-04-28T22:58:04.207020Z",
     "iopub.status.idle": "2025-04-28T22:58:04.273976Z",
     "shell.execute_reply": "2025-04-28T22:58:04.273641Z"
    },
    "papermill": {
     "duration": 0.069735,
     "end_time": "2025-04-28T22:58:04.275273",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.205538",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0f342a2",
   "metadata": {
    "papermill": {
     "duration": 0.001422,
     "end_time": "2025-04-28T22:58:04.278279",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.276857",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4f13a5be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:58:04.281448Z",
     "iopub.status.busy": "2025-04-28T22:58:04.281297Z",
     "iopub.status.idle": "2025-04-28T22:58:04.589193Z",
     "shell.execute_reply": "2025-04-28T22:58:04.588849Z"
    },
    "papermill": {
     "duration": 0.310919,
     "end_time": "2025-04-28T22:58:04.590469",
     "exception": false,
     "start_time": "2025-04-28T22:58:04.279550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.781385,
   "end_time": "2025-04-28T22:58:04.916365",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-04-28T22:58:02.134980",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}