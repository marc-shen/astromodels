{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7dd06c4",
   "metadata": {
    "papermill": {
     "duration": 0.005384,
     "end_time": "2024-08-13T19:48:16.773979",
     "exception": false,
     "start_time": "2024-08-13T19:48:16.768595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3c17cacb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:16.784394Z",
     "iopub.status.busy": "2024-08-13T19:48:16.783653Z",
     "iopub.status.idle": "2024-08-13T19:48:18.213656Z",
     "shell.execute_reply": "2024-08-13T19:48:18.213169Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.437613,
     "end_time": "2024-08-13T19:48:18.215244",
     "exception": false,
     "start_time": "2024-08-13T19:48:16.777631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a7863b91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.218533Z",
     "iopub.status.busy": "2024-08-13T19:48:18.218184Z",
     "iopub.status.idle": "2024-08-13T19:48:18.226056Z",
     "shell.execute_reply": "2024-08-13T19:48:18.225659Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010853,
     "end_time": "2024-08-13T19:48:18.227338",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.216485",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "acc34e71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.229849Z",
     "iopub.status.busy": "2024-08-13T19:48:18.229713Z",
     "iopub.status.idle": "2024-08-13T19:48:18.237541Z",
     "shell.execute_reply": "2024-08-13T19:48:18.237186Z"
    },
    "papermill": {
     "duration": 0.010511,
     "end_time": "2024-08-13T19:48:18.238815",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.228304",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7ca230a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.241620Z",
     "iopub.status.busy": "2024-08-13T19:48:18.241477Z",
     "iopub.status.idle": "2024-08-13T19:48:18.244177Z",
     "shell.execute_reply": "2024-08-13T19:48:18.243811Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005568,
     "end_time": "2024-08-13T19:48:18.245440",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.239872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9f6c80e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000978,
     "end_time": "2024-08-13T19:48:18.247413",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.246435",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a7f3b8b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.249885Z",
     "iopub.status.busy": "2024-08-13T19:48:18.249743Z",
     "iopub.status.idle": "2024-08-13T19:48:18.253735Z",
     "shell.execute_reply": "2024-08-13T19:48:18.253225Z"
    },
    "papermill": {
     "duration": 0.006597,
     "end_time": "2024-08-13T19:48:18.254923",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.248326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3952a847",
   "metadata": {
    "papermill": {
     "duration": 0.001141,
     "end_time": "2024-08-13T19:48:18.257179",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.256038",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4db3025a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.259895Z",
     "iopub.status.busy": "2024-08-13T19:48:18.259758Z",
     "iopub.status.idle": "2024-08-13T19:48:18.347645Z",
     "shell.execute_reply": "2024-08-13T19:48:18.347301Z"
    },
    "papermill": {
     "duration": 0.090921,
     "end_time": "2024-08-13T19:48:18.349107",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.258186",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "352682e8",
   "metadata": {
    "papermill": {
     "duration": 0.001317,
     "end_time": "2024-08-13T19:48:18.352015",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.350698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6462ca64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T19:48:18.355391Z",
     "iopub.status.busy": "2024-08-13T19:48:18.355246Z",
     "iopub.status.idle": "2024-08-13T19:48:18.679379Z",
     "shell.execute_reply": "2024-08-13T19:48:18.679034Z"
    },
    "papermill": {
     "duration": 0.327567,
     "end_time": "2024-08-13T19:48:18.680837",
     "exception": false,
     "start_time": "2024-08-13T19:48:18.353270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.947986,
   "end_time": "2024-08-13T19:48:19.013375",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-08-13T19:48:16.065389",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}