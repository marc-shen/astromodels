{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1bb52b2e",
   "metadata": {
    "papermill": {
     "duration": 0.004493,
     "end_time": "2023-11-01T23:35:02.645973",
     "exception": false,
     "start_time": "2023-11-01T23:35:02.641480",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e73b0064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:02.654793Z",
     "iopub.status.busy": "2023-11-01T23:35:02.654103Z",
     "iopub.status.idle": "2023-11-01T23:35:06.194404Z",
     "shell.execute_reply": "2023-11-01T23:35:06.192827Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.548294,
     "end_time": "2023-11-01T23:35:06.197933",
     "exception": false,
     "start_time": "2023-11-01T23:35:02.649639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "94f465de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.206995Z",
     "iopub.status.busy": "2023-11-01T23:35:06.206509Z",
     "iopub.status.idle": "2023-11-01T23:35:06.213528Z",
     "shell.execute_reply": "2023-11-01T23:35:06.212479Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015685,
     "end_time": "2023-11-01T23:35:06.217197",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.201512",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "32cff889",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.253814Z",
     "iopub.status.busy": "2023-11-01T23:35:06.253386Z",
     "iopub.status.idle": "2023-11-01T23:35:06.262199Z",
     "shell.execute_reply": "2023-11-01T23:35:06.261186Z"
    },
    "papermill": {
     "duration": 0.016215,
     "end_time": "2023-11-01T23:35:06.265027",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.248812",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "111e79bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.272313Z",
     "iopub.status.busy": "2023-11-01T23:35:06.271961Z",
     "iopub.status.idle": "2023-11-01T23:35:06.278982Z",
     "shell.execute_reply": "2023-11-01T23:35:06.278023Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013725,
     "end_time": "2023-11-01T23:35:06.281738",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.268013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bd01c7e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002838,
     "end_time": "2023-11-01T23:35:06.287510",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.284672",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce6e0870",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.294943Z",
     "iopub.status.busy": "2023-11-01T23:35:06.294275Z",
     "iopub.status.idle": "2023-11-01T23:35:06.308560Z",
     "shell.execute_reply": "2023-11-01T23:35:06.307606Z"
    },
    "papermill": {
     "duration": 0.021092,
     "end_time": "2023-11-01T23:35:06.311429",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.290337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6f48ae6",
   "metadata": {
    "papermill": {
     "duration": 0.003159,
     "end_time": "2023-11-01T23:35:06.318183",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.315024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcb729c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.326044Z",
     "iopub.status.busy": "2023-11-01T23:35:06.325673Z",
     "iopub.status.idle": "2023-11-01T23:35:06.612556Z",
     "shell.execute_reply": "2023-11-01T23:35:06.611484Z"
    },
    "papermill": {
     "duration": 0.294289,
     "end_time": "2023-11-01T23:35:06.615591",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.321302",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3de41c11",
   "metadata": {
    "papermill": {
     "duration": 0.003551,
     "end_time": "2023-11-01T23:35:06.622985",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.619434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4467f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:35:06.631948Z",
     "iopub.status.busy": "2023-11-01T23:35:06.631548Z",
     "iopub.status.idle": "2023-11-01T23:35:08.245498Z",
     "shell.execute_reply": "2023-11-01T23:35:08.244404Z"
    },
    "papermill": {
     "duration": 1.622147,
     "end_time": "2023-11-01T23:35:08.248784",
     "exception": false,
     "start_time": "2023-11-01T23:35:06.626637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.592854,
   "end_time": "2023-11-01T23:35:08.877198",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2023-11-01T23:35:01.284344",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}