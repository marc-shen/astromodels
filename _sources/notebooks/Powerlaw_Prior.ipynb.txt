{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b30541fe",
   "metadata": {
    "papermill": {
     "duration": 0.004742,
     "end_time": "2022-09-29T17:47:50.532988",
     "exception": false,
     "start_time": "2022-09-29T17:47:50.528246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2a5c8ecd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:50.541350Z",
     "iopub.status.busy": "2022-09-29T17:47:50.540903Z",
     "iopub.status.idle": "2022-09-29T17:47:54.232961Z",
     "shell.execute_reply": "2022-09-29T17:47:54.231923Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.69985,
     "end_time": "2022-09-29T17:47:54.236181",
     "exception": false,
     "start_time": "2022-09-29T17:47:50.536331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57d55dad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.245397Z",
     "iopub.status.busy": "2022-09-29T17:47:54.244996Z",
     "iopub.status.idle": "2022-09-29T17:47:54.251352Z",
     "shell.execute_reply": "2022-09-29T17:47:54.250345Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014158,
     "end_time": "2022-09-29T17:47:54.254259",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.240101",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "020737e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.261793Z",
     "iopub.status.busy": "2022-09-29T17:47:54.261412Z",
     "iopub.status.idle": "2022-09-29T17:47:54.268140Z",
     "shell.execute_reply": "2022-09-29T17:47:54.267169Z"
    },
    "papermill": {
     "duration": 0.013958,
     "end_time": "2022-09-29T17:47:54.271202",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.257244",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea6d2325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.278801Z",
     "iopub.status.busy": "2022-09-29T17:47:54.278403Z",
     "iopub.status.idle": "2022-09-29T17:47:54.285099Z",
     "shell.execute_reply": "2022-09-29T17:47:54.284077Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013701,
     "end_time": "2022-09-29T17:47:54.287875",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.274174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31dd7886",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003176,
     "end_time": "2022-09-29T17:47:54.294221",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.291045",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d209a782",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.302318Z",
     "iopub.status.busy": "2022-09-29T17:47:54.301889Z",
     "iopub.status.idle": "2022-09-29T17:47:54.315844Z",
     "shell.execute_reply": "2022-09-29T17:47:54.314590Z"
    },
    "papermill": {
     "duration": 0.021469,
     "end_time": "2022-09-29T17:47:54.318999",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.297530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2cc9425",
   "metadata": {
    "papermill": {
     "duration": 0.003476,
     "end_time": "2022-09-29T17:47:54.341359",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.337883",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9e30ed3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.349339Z",
     "iopub.status.busy": "2022-09-29T17:47:54.348956Z",
     "iopub.status.idle": "2022-09-29T17:47:54.696647Z",
     "shell.execute_reply": "2022-09-29T17:47:54.695696Z"
    },
    "papermill": {
     "duration": 0.355028,
     "end_time": "2022-09-29T17:47:54.699567",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.344539",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b3e4f74",
   "metadata": {
    "papermill": {
     "duration": 0.004045,
     "end_time": "2022-09-29T17:47:54.707342",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.703297",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b032c1e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T17:47:54.716723Z",
     "iopub.status.busy": "2022-09-29T17:47:54.715890Z",
     "iopub.status.idle": "2022-09-29T17:47:56.451028Z",
     "shell.execute_reply": "2022-09-29T17:47:56.450089Z"
    },
    "papermill": {
     "duration": 1.743052,
     "end_time": "2022-09-29T17:47:56.453802",
     "exception": false,
     "start_time": "2022-09-29T17:47:54.710750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.101474,
   "end_time": "2022-09-29T17:47:57.069033",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2022-09-29T17:47:48.967559",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}