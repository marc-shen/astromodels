{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6503be5e",
   "metadata": {
    "papermill": {
     "duration": 0.008354,
     "end_time": "2025-05-21T19:19:03.610294",
     "exception": false,
     "start_time": "2025-05-21T19:19:03.601940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a442d5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:03.624282Z",
     "iopub.status.busy": "2025-05-21T19:19:03.623719Z",
     "iopub.status.idle": "2025-05-21T19:19:05.089506Z",
     "shell.execute_reply": "2025-05-21T19:19:05.088938Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.47468,
     "end_time": "2025-05-21T19:19:05.090953",
     "exception": false,
     "start_time": "2025-05-21T19:19:03.616273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "382c6d05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.094200Z",
     "iopub.status.busy": "2025-05-21T19:19:05.093843Z",
     "iopub.status.idle": "2025-05-21T19:19:05.100751Z",
     "shell.execute_reply": "2025-05-21T19:19:05.100298Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009543,
     "end_time": "2025-05-21T19:19:05.101826",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.092283",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20877b25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.104379Z",
     "iopub.status.busy": "2025-05-21T19:19:05.104241Z",
     "iopub.status.idle": "2025-05-21T19:19:05.112142Z",
     "shell.execute_reply": "2025-05-21T19:19:05.111745Z"
    },
    "papermill": {
     "duration": 0.010354,
     "end_time": "2025-05-21T19:19:05.113166",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.102812",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4c86293",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.115769Z",
     "iopub.status.busy": "2025-05-21T19:19:05.115628Z",
     "iopub.status.idle": "2025-05-21T19:19:05.124825Z",
     "shell.execute_reply": "2025-05-21T19:19:05.124388Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011684,
     "end_time": "2025-05-21T19:19:05.125893",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.114209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99c9112e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000981,
     "end_time": "2025-05-21T19:19:05.127962",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.126981",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2fb37025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.130521Z",
     "iopub.status.busy": "2025-05-21T19:19:05.130375Z",
     "iopub.status.idle": "2025-05-21T19:19:05.134558Z",
     "shell.execute_reply": "2025-05-21T19:19:05.134103Z"
    },
    "papermill": {
     "duration": 0.006744,
     "end_time": "2025-05-21T19:19:05.135648",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.128904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6012b831",
   "metadata": {
    "papermill": {
     "duration": 0.001092,
     "end_time": "2025-05-21T19:19:05.137903",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.136811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7e6ade09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.140590Z",
     "iopub.status.busy": "2025-05-21T19:19:05.140455Z",
     "iopub.status.idle": "2025-05-21T19:19:05.217506Z",
     "shell.execute_reply": "2025-05-21T19:19:05.217014Z"
    },
    "papermill": {
     "duration": 0.079688,
     "end_time": "2025-05-21T19:19:05.218607",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.138919",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4AAAAMICAYAAACZ14viAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAxzUlEQVR4nO3dCXSX1Z34/08QEKFS64JTwWXsAi5AHesK2HGt1dGpWuu+1KWl4kBrLe5KQaT2tAodbd1wqeO+trXqnFFHj7jgdqpoodXaFrQqggvKKiT/c5/5Jz9AsCwh34TP63VOTsjz/Sa54TwnyTv3Pvepa2hoaAgAAABWe+1qPQAAAABahgAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACCJ9rUeQFv20ksvxbx586Jdu3ax5ppr1no4AABAQnPnzo36+vro2LFjbLXVVp/4XAG4Ekr8lf/o8jJ//vxaDwcAAEjeJ/+IAFwJZeavxF95vdZaa9V6OAAAQEKzZ89u6pJ/RACuhLLss8z8lfjr1atXrYcDAAAkNGnSpJg5c+YyXZZmExgAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkmg1AfjOO+/ElltuWb1emoaGhhgzZkz069cvttlmmzj55JNj2rRpS3zuq6++Gn379o37779/FY4aAACg7WgVATh16tQYOXJkLFiw4BOfN3bs2Ljpppti+PDhcf3118ecOXPipJNO+tjzysc5/fTTq8cBAAD4P+2jxs4999y45ZZb/uHzyuzfNddcE4MHD47dd9+9OlZCcNddd40JEyZE7969FwnFTp06rdJxAwAAtDU1nwEcOHBg3H333XH++ed/4vNeeeWVarnngAEDmo5ttNFG0aNHj3jyySebjv3pT3+qArDMKAIAANCKZgBLxJWXGTNmfOLzJk+eHO3atYvu3bsvcnzDDTeM6dOnV/+eP39+tfSzzBJuvPHGzTK+/v37L/WxIUOGxOabb94snwcAAGC1nwFcVjNnzoyOHTtWEbiwzp07V48Vl112WXTp0iUOP/zwGo0SAACg9ar5DOCy6tq1a8ydOzfq6+sXicByrDw2ceLEuO666+LOO++Murq6Zvu848aNW+pjkyZNaopPAACA1q7NzAB269at2gjmzTffXOR4ebssIR0/fnx8+OGHsc8++1QbwjRuCnPqqafGwQcfXKNRAwAAtB5tZgawV69escEGG8Rjjz3WFHRTpkyprg0s1+mts846i2wQU5QYHDp0aOy22241GjUAAEDr0aoD8K233mra6KUs+zzssMNi9OjR1Wxguc3DBRdcUMXdpptuWj3v05/+9Mc+Rnlu2SkUAAAgu1YdgGX5ZlFu+t54y4jZs2dXs3offfRRFX/Dhg2r8SgBAADahrqGcmEdK6RxE5iy82hZogoAANCau6TNbAIDAADAyhGAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCRaTQC+8847seWWW1avl6ahoSHGjBkT/fr1i2222SZOPvnkmDZtWtPj8+fPj4svvjh22WWX2HrrrWOfffaJe++9t4W+AgAAgNatVQTg1KlTY+TIkbFgwYJPfN7YsWPjpptuiuHDh8f1118fc+bMiZNOOqnp8V/84hdx4403xumnnx633357fPWrX41TTjklXnrppRb4KgAAAFq39rUewLnnnhu33HLLP3xemf275pprYvDgwbH77rtXx0oI7rrrrjFhwoTo3bt33HrrrXHiiSdWM39Fr1694oknnoibb745RowYscq/FgAAgNas5jOAAwcOjLvvvjvOP//8T3zeK6+8Ui33HDBgQNOxjTbaKHr06BFPPvlkzJ07N9ZYY43o27fvIu+33nrrxdtvv73Kxg8AANBW1HwGsERceZkxY8YnPm/y5MnRrl276N69+yLHN9xww5g+fXqsueaa8cgjjyzy2N/+9rd4/PHH49hjj10lYwcAAGhLah6Ay2rmzJnRsWPHKgIX1rlz5+qxxT3wwAPV8tJ11103jjvuuBX+vP3791/qY0OGDInNN998hT82AABAqiWgy6pr167VMs/6+vpFjpdj5bFGZRfRQYMGVS99+vSpri9ce+21azBiAACA1qXNzAB269at2gjmzTffrJaMNipv77333tW/p0yZEkcddVQViZdccknsueeeK/15x40bt9THJk2atMTZRwAAgNaozcwAlh09N9hgg3jssceajpXgK9cGNi7TLEs+11prrWpTmeaIPwAAgNVJq54BfOutt5o2einX/h122GExevToajawU6dOccEFF8Ruu+0Wm266abX0s9zyodzu4YMPPqheGpXnlo8BAACQWasOwFNPPbV6XW763njLiNmzZ8fQoUPjo48+quJv2LBh1WOvvfZatUT07LPP/tjH2X777Zs+BgAAQFZ1DaWaWCGN1wB26dKlWqIKAADQmrukzVwDCAAAwMoRgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgiRUKwHPOOSeeffbZ5h8NAAAArSsAf/e738WRRx4Ze+65Z1xyySUxZcqU5h8ZAAAAtQ/AJ554IkaPHh1bbLFFXHXVVbHXXnvFYYcdFrfddlt8+OGHzTtCAAAAmkVdQ0NDw8p8gFmzZsWDDz4Y9913X4wbNy7WWGON2HfffasZwl69esXqbNKkSTFz5szo0qXLav+1AgAAbb9LVnoTmM6dO8cee+wR++yzT3zpS1+K2bNnx5133hkHHHBAHH/88TF58uSV/RQAAAA0gxUOwDlz5lSzfoMHD46ddtopfvjDH8b8+fNjxIgRMX78+Bg7dmy8++671XEAAABqr/2KvNP3vve9eOSRR6rZvu7du8dxxx0XX//612OTTTZpes7OO+8cJ554ogAEAABoywH46KOPxte+9rVqmed222231OeVTWIuvPDClRkfAAAAtQzAiy66KLbZZpvo2rXrxx577733quv++vTpE5tttln1AgAAQBu9BnDgwIExYcKEJT72+OOPVzuAAgAA0EZnAK+99trqpSh3jijX9nXs2PFjzysbv6y//vrNO0oAAABaLgB79OhR7fZZ3HXXXdX9JTbccMOPPa/ce6JcGwgAAEAbDcByr7/yUrz22mvx/e9/P3r37r0qxwYAAEAtArC+vj7atfu/Swavu+66pmNL0/hcAAAA2lgAbrXVVnHVVVdFv379Ysstt4y6urqlPrc89oc//KG5xggAAEBLBuCgQYOabvRe/v1JAQgAAEDrU9dQtvRkhUyaNClmzpxZbXxTNsUBAABozV2yzDOATzzxxHINonHHUAAAAFqHZQ7Ab33rW9Wyz0+aMGx8vLyeOHFic40RAACAlgzAX/3qV83x+QAAAGjtAbj99tuv2pEAAADQOgJwzJgxccABB1Q7gZZ/f5KyBHTw4MHNMT4AAABaOgB/+ctfxrbbblsFYPn3JxGAAAAAbTgAy9aiS/o3AAAAq1kALsncuXPjz3/+c8ybNy969OgR66+/fvONDAAAgNoHYLnVw+jRo6udQefMmdN0/HOf+1x873vfiz322KM5xwgAAECtAvCKK66Iyy+/PP71X/819tlnn1h33XXjzTffjN/97nfxH//xHzFq1Kj4+te/3hzjAwAAoJYBeMstt1Q7gpbQW9g3vvGN+MEPflDFoQAEAABoXdqtyDtNmzatmv1bkr322itef/31lR0XAAAArSEAe/bsGX/84x+X+Nhrr70Wm2222cqOCwAAgNYQgKeddlrccMMNcffdd1c7gBbl9T333BPXXHNNnH766c09TgAAAFZSXUPZ0nMZ9OrVq7rBe6PGdyvHPvWpT8WsWbOivr4+2rdvX739xBNPLNdA3nnnnejfv3+MGzeu2lRmScrn/PnPfx633npr9fn69esXw4YNW+T2EyVMr7rqqnj33XfjS1/6Upx33nnxz//8z7EqlPshzpw5M7p06VL9/wAAALS05emSZd4E5oILLlgkAJvT1KlT48ILL4wFCxZ84vPGjh0bN910U4wcOTI23HDD6lYUJ510UhWExX333Rc/+clP4kc/+lH1hZfZyOOPPz7uvffe6NSp0yoZOwAAQFuxzAF44IEHLvNMXrkOcFmde+651a6i/0iZ/StBN3jw4Nh9992rY8OHD49dd901JkyYEL17964C8cgjj2zagbSE4I477hgPP/xw7L333rE6q69viBkf1Nd6GAAAkEbXtdtFu3arZpKsVd0GopgxY0a1Ecz8+fMXOf7kk0/GddddF7///e+X6eMMHDgwDjvssHjxxRfj7LPPXurzXnnllWr30QEDBjQd22ijjaJHjx7V5yzLPF966aU49dRTmx4vs359+vSpHl/dA7DE34HHvVHrYQAAQBp3Xv3ZWOfTa8RqH4DPPvtsnHDCCTFnzpwlPr7zzjsv88cqEVdeSlB+ksmTJ0e7du2ie/fuixwvS0GnT59ezTqWaxA33njjJT6+osp1iUszZMiQ2HzzzVf4YwMAALT6ALz00kurWz0MHTo0br755ujQoUMcdNBB8dhjj8X//M//xJgxY5p9oOWixo4dO1YRuLDOnTtXj5WXYvFr/crjKxOAAAAAqQOwLLU844wzYqeddooPPvggfvWrX1X/Li9vv/12/OIXv6jisDl17do15s6dW83yLRyB5Vh5rLwUs2fPXuT9yu0pGh9bEWVX0n+02w4AAMBqG4AlqsrMWlGWZP71r39teqxsyjJq1KhmD8Bu3bpVG8G8+eab1ZLRRuXtcn3fBhtsUL39xhtvVNcFNipvb7nllpHhAtSyBhkAAGi538FTBOAXvvCFeOCBB2KvvfaKTTfdtGnnzxJe77//fjUr2NzKbR1K5JVlpgcffHB1bMqUKdW1geU6vXXWWafa8KXM2G233XbV4x9++GE8//zz8e1vfztWd2X3obZ2ASoAANAGAvDEE0+sNkAps2vXX399bL/99tWmMGWHzt/85jex7bbbNsvg3nrrraaNXMqyz7JbaLn3X5kNLNf6lXsT7rbbblWEFkcccUR164eePXvGZz/72eqm8eVaxXIrCAAAgOxWKAD33HPPuPHGG+Pll1+u3h4xYkScdtppcfvtt1ezcOX+fM2h8ZYOJTIbbxlRrvEry0s/+uijKv6GDRvW9Pxy/78yG1mWoJZZyB122CEuu+yyj20cAwAAkFFdQ7mwjhXSuAlMly5dqiWqAAAArblLVvhG8OWm7OUWEGVH0LIpTNkMptz/b3W/4ToAAEBbtUIBWJZ+HnXUUfHee+/FJptsEuuuu248+uijceutt8YWW2wRV155Zay//vrNP1oAAABaNgB//OMfVzdlv+OOO2KrrbZqOv7ss89Wm8OUa/B+9rOfrfioAAAAaHYrtDtKCb1BgwYtEn9F2f3zu9/9bjzyyCPNNT4AAABqGYBrrbVW9bIk6623nl03AQAAWqEVKrX99tuv2gBmwYIFixwvG4redtttNoIBAABoy9cAXnLJJU3/Ljdhf/HFF2Pfffet7glYNnwp99974IEHYurUqdGvX79VNV4AAABW9X0Ay03Xl/mD1tXFgw8+GKs79wEEAABWy/sAPvTQQ80xNgAAAGpkhW8EX/zhD3+I5557LmbNmhXdunWrbgRfXgMAALCaBGDZ/GXo0KFx7733Vhu/NH2w9u2rG8SfdtppzTlGAAAAahWAV155ZbXhy9lnn11tAvOpT30qXn/99bjnnnvi6quvrm4FccIJJzTH+AAAAKhlAN5xxx3x7W9/O4444oimY1/4whfi+9//fjULePvttwtAAACA1eE+gG+88Ub07NlziY9tscUW1WwgAAAAq0EAbrjhhjFx4sQlPvbyyy9H165dV3ZcAAAAtIYA3H///eOKK66IG2+8MebMmdO0MUzZFKYcL9cFAgAAsBpcAzho0KB49dVXY/jw4XH++efHOuusEzNmzKgisG/fvnHqqac2/0gBAABo+QAsG72MGTMmnnnmmXjsscdi2rRp1U6g2267bey2227Rrt0KTSwCAADQmgLwo48+ivPOOy+OOeaY+PKXv1y9AAAA0Pot91Rdhw4d4umnn47nnntu1YwIAACAVWKF1moOHTo0LrvssnjhhReaf0QAAAC0nmsAL7300pg5c2Yccsgh1S0f1lprrUUer6uri//93/9trjECAABQqwAsN3svLwAAAKzmAThq1KjmHwkAAACtLwCLefPmxf33319dBzh79uxYb731qttAfOUrX2neEQIAAFC7AJw6dWocd9xx8corr1TX/3Xp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AACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIouYBOG/evDjvvPNihx12iO222y7OPPPMmDlz5hKfO2vWrOrx8rxtt902Bg0aFFOnTl3kOc8991wccsgh0adPn9hll13iiiuuaKGvBAAAoHWreQCOGjUqHn/88Rg9enQVa5MmTYqzzjpric8dOXJkPPnkk/HTn/40rr766pg9e3YMHDgw6uvrq8enTJkSJ5xwQvTt2zduvfXWOP7446uPWz4+AABAdu1r+clnzJgRt912W1x66aWx0047VcfOOOOMOProo2P69Omx3nrrLfLcu+66K/7zP/8zvvKVr1THSgj269cvxo8fX73/tddeG5/73OeqWcKiV69e8fzzz1cBuPPOO9foqwQAAGgdajoDWJZrFo3xV5TZu/bt21dRt7C//vWvsWDBgthqq62ajq277rrxmc98Jp599tnq7XHjxsW+++67yPtddNFFceqpp67irwQAAKD1q+kM4OTJk6Nbt27RsWPHpmPl3yXsygzgwsqx4u23345/+qd/qv49Z86ceO+992LatGnVtYSNkViWfr7wwgvV84499tg46KCDVniM/fv3X+pjQ4YMic0333yFPzYAAECaGcCy2UunTp0+drxz584f2wime/fu1ezgmDFjqjj88MMP40c/+lEVfMX7779fvb7kkktiwIAB1TWCBxxwQJxzzjlxzz33tNBXBAAA0HrVdAawa9eu1Sze4ubOnVs9trC6urrqmr9TTjmlup6vvF1m58pun2UZaONGMGW2r8z6Fb17944JEybEHXfcEf/2b/+2QmMsy0qXpmxYs7QdSwEAAFqbmgZgWf5ZlnSW5ZuNy0Dnz59fHSszfovbZJNN4vbbb4933323Cr6yLHTHHXesrgssEbjGGmt8bEnm5z//+bjvvvta7GsCAABorWq6BLTc+6+hoSGeeeaZpmNPP/10dazc62/xewDutdde1eYwJfbKDqHllhBltrB8nBKQW2yxRUycOHGR93v55ZddpwcAAFDrGcCyzHP//fePESNGxPDhw6vIGzZsWBx66KHVdYDlWr+yRLTMBpa3y4xf2dVz6NCh1SxgeZ9jjjkm1l577erjnXjiidWOn+VWECUKSyw+8MADcdNNN9XyywQAAGgV6hrKdFsNlZu5lxu8l2Wa5fYP++23X5x22mnRoUOHOP300+Opp56Khx56qHru3//+9yr6ym0fyuMHHnhgdU1gu3b/byLzN7/5TXVfwddffz0222yzaqfOPffcc5WMvfEawC5dulT3HAQAAGhpy9MlNQ/AtkwAAgAAbalLanoNIAAAAC1HAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAk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whH4Sb9T1ZoAbEPKsoZyzVWJuMblDWVJVTm2+LTzBhtsUL1+4403qjXIjcrbZStbcluec6lxydVRRx1VfXMrO6aVLbNhec6j8st5uTa53EJkYaeeemo1g1N2ciSv5TmXyvXHxeabb77I8c9//vOuS05uec6jsuzzqaeeqm6X1fhHg3KboxdffLG6pYgAZHnOu3IbiDfffLNaNtqovL333ntHa2QJaBtSrsEqJ9jCS1yefvrp6tji69XXWWed6i+i48aNazpWfvl6/vnno3///i06btr2uVSce+651TKZ8td18ceKnEcHHHBA3HPPPdU51PhSDB06tPqLO7ktz7lUrh8tEVhmlRf28ssvfywKyWV5zqOlbetfwrFc+w7LqlevXtXEy2OPPbbIH87LtYGt9XduM4BtSJlGLuvUR4wYUd1nZNasWTFs2LA49NBDq3XG5ULTsvSh8a9cZTe0H/3oR9GzZ8/47Gc/Gz//+c9js802ix133LHWXwpt6FwqSz+feOKJ6rkffPBB9dKoXGtRLnImp+U5j8o1NUu6rqb85XThVQrktDznUlliVe5pe+mll1a/dJVVLffff38VgOXnHHktz3lUfmn/4he/WP2e9MMf/rD6WVZ+1j344INx1VVX1fpLoZV76623qtflvCnfk8reCOXek+VnWvnd6IILLojddtstNt1002iN6sq9IGo9CJZduaavbJ9ebvJetjUuN8E97bTTokOHDtXuemU5w8I7oV199dVxzTXXVL+0l7+MlW+IfmFnec6lF154IQ4++OAlfoztt9++umievJb3e9LCyh+nxowZ02qXyNC6z6Vrr722einbr5df5stz7d7I8pxH5dwpfzQo1/6VW0KUGeRyXeAee+xR6y+DVmT8+PFx9NFHV38gKBvgFeWymKLxd6Ayo1xWs5TLGT766KMq/sofHz71qU9FayQAAQAAknANIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAC3shhtuiJ49e8bYsWObjr388sux9dZbxxlnnFHTsQGweqtraGhoqPUgACCT8qP36KOPjgkTJsQ999wTG220URx22GHx5ptvVm+vvfbatR4iAKspAQgANTB58uTYf//9Y7vttosBAwbEyJEj48orr4xddtml1kMDYDUmAAGgRq677rq44IILon379vH1r3+9ikAAWJVcAwgANXLQQQdFp06dYv78+XHkkUfWejgAJCAAAaBGfvazn0V9fX11zd+oUaOqawMBYFUSgABQA+PHj4+bbropvv3tb8fQoUOrt2+88cZaDwuA1ZxrAAGghc2aNavaAGaNNdaI3/72t9GhQ4c46qij4qWXXqre7tGjR62HCMBqygwgANRg6eeUKVNi2LBh0bFjx6irq4sRI0bEggUL4qyzzrIUFIBVxgwgAABAEmYAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEDk8P8BgvdJv6X58SYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3017f73",
   "metadata": {
    "papermill": {
     "duration": 0.001331,
     "end_time": "2025-05-21T19:19:05.221646",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.220315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f78befc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:19:05.225272Z",
     "iopub.status.busy": "2025-05-21T19:19:05.225032Z",
     "iopub.status.idle": "2025-05-21T19:19:05.529347Z",
     "shell.execute_reply": "2025-05-21T19:19:05.528993Z"
    },
    "papermill": {
     "duration": 0.307677,
     "end_time": "2025-05-21T19:19:05.530651",
     "exception": false,
     "start_time": "2025-05-21T19:19:05.222974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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7F155ZXxk5/8pIq666+/Ph555JGYNWtWtW/hwoWxePHimDt3bixatCh27twZkydPrvWQAQAAaq6uY2/37t3xve99L6ZNmxZvectbqpm9T3ziE3HffffFc889F01NTTF16tQ466yz4tRTT62i76c//WmsWrWq1kMHAACoqe71fgrn3r17o3fv3q3bjjnmmNi/f388/vjj1Smb48ePb903cODAGDx4cKxYsaJGIwYAAKgPDVHHXv3qV8fw4cPjxhtvjGHDhlXbyp/LLN8zzzwT3bt3j0GDBrX5nAEDBsTmzZvb/XeOGzfuoPvKDOPQoUPb/bUBAAA6Sl3HXjFnzpz44Ac/WJ3CWTQ0NMR//Md/xFNPPRU9evSogu9AZRawzAgCuTWua6r1EAAA6lpdx97GjRtj0qRJ1WzbRRddVG0roVe2lRU6d+3aVZ3SeWDwlW19+vRp99+5dOnSg+5bvXq1kAQAADqFuo69u+++O7Zt2xaf+9znqlm8YsSIEXHGGWfE2rVrq1svrF+/vrpWr0X5+B3veEcNRw0AAFB7db1Ay759+6Jbt25tth111FHVW//+/aNfv36xbNmy1n0lANesWfOS190BAAB0BXU9s1duqTB//vzqdgsf+chHquv1brvttmpGr7GxMZ5++ulqfwm/nj17xrx586rtQ4YMqfXQAQAAaqquY++EE06o4u7zn/98XHLJJVXkldU5b7755jj++OOra/d27NgR06dPjz179lShVxZ0AQAA6OrqOvaKk08+Ob7yla+86L5yOuell15avQHA4bKqKwCZ1fU1ewAAALSP2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASKih1gMAAA5N47qmWg8BgE7EzB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACChhloPAACAjtW4rqnWQwA6gJk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICE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xxJd/Vjq1Au0lHvrNTc3x8MPP9y6beXKldW2cs89AACArqpTx145VfOcc86pFk4pkffAAw9UN1U/99xzq+v2AAAAuqpOfRpnMXv27Ljmmmti0qRJ1S0XJkyYEDNmzKj1sAAAAGqq08der1694uqrr67eAAAASHAaJwAAAC+uW3NZzQQAAIBUzOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJir87t3r07rrjiihg9enSMGjUqZs2aFdu3bz/o42+99dY488wz401velNccMEF8etf/7pDx0vnP4727t0bn/vc5+Jtb3tbnHrqqfGud70rvv/973f4mMnxM6nF//zP/8SIESPi7rvv7pBxku9YWrJkSUyYMCGGDx8eb3/72+M73/lOh46Xzn8cNTc3R1NTU5x99tnx5je/Oc4///x44oknOnzM1LctW7bEySefXL0/mHIsLViwIMaOHRsjR46MKVOmxKZNm6Ieib06d+2118by5ctj/vz5cdNNN8Xq1avj8ssvf9HH3nXXXfHZz342pk2bFt/4xjdiwIAB8ZGPfCR27tzZ4eOm8x5HX/rSl+K2226Lyy67LL797W/HX/3VX8XHP/7xeOyxxzp83HTuY6nFvn37quPJzyLaeyz95Cc/ialTp1axd/vtt8e73/3u6rFPPvlkh4+bznsc/ed//md88YtfjE984hNx8803R+/evePiiy8+pBes6BqefvrpuOaaa6rfWy9l4cKFsXjx4pg7d24sWrSo+v02efLkqEvN1K1nn322+ZRTTmm+//77W7f9+Mc/bh42bFjzpk2bXvD49773vc2f/exnWz/esWNH84gRI5rvuuuuDhsznf84Gjt2bPONN97YZtvf//3fN3/yk5/skPGS51hqUY6nD3/4w80nnniin0e061i65JJLmqdNm9Zm27nnntt8yy23dMh4yXEcfeADH2i++uqrWz/esmVL8xvf+MbmBx54oMPGTP2aPXt29Xuq5W3z5s0v+rj9+/c3n3HGGc233npr67annnqq+pxHH320ud6Y2atjjzzySPV+zJgxrdvKaVANDQ3x0EMPtXnstm3bqpmX8ePHt27r2bNnnHbaabFixYoOHDX15nCOo127dsVRRx1V7T/Q8ccfHxs3buygEZPhWGrxy1/+snoFtLxSCu05lsqp5eX3WJnNO1B5Vf2DH/xgB42YDD+Ttm7dWs3mtTjmmGOiW7du1amgMGnSpLjzzjvj6quvfsnHlVN/yymbBz7nHjhwYAwePLgun3OLvTq2Zs2a6N+/f/To0aN1W/lz3759Y/PmzW0eu27duti/f3+ccMIJbbaXUzmf/1i6lsM5jsovvgceeKC69qHFb37zm+oUmZNOOqlDx03nPpZanqSX0zfL6XfP/9lE13Y4x9LatWtjx44d8cwzz8TEiROr67Le+973Vtfw0bUd7s+k8uT8jjvuiF/84hfVi5vXX399FX/lmIKBAwdWz3Ve97rXvexx17179xg0aFCneM4t9upYOYe8zM49X/nB9Pzzy1s+fv7jX+yxdC2Hcxw937333ls9uSq/OC+66KI/4CjJeCx95StfiWOPPTY+8IEPdNAIyXgsPfvss9X7snDU+973vmqm+Iwzzoh//Md/jIcffrjDxkzn/5n0sY99LHr16hXnnHNONQNYrrW65JJL4rjjjuugEZPB9u3bqxcVSvB1hufcDbUeAAfXp0+fF13QoLwaVfY9/7FFefXzQOXUhOc/lq7lcI6jFmUFqtmzZ1exV1Z3Lac0vPKVr+yA0ZLlWHr88cerBRDKq+jlNClo77FUzlop/uEf/qGa0SvKJQrlNL1yytVb3vKWDho1nf33W1lAozxJv/HGG+M1r3lN3H///dWLCG94wxuq33VwKMqxVY6x8rPpwOB7qedVtST26lg5NaFcJ1WCreUUhXJaVNn2/Knjfv36Ve9/+9vfVucMtygfl+Vj6boO5zhqOWXqwx/+cPVDrKxaVpaohsM9lsoT8XItcbl1x4EuvfTSamamrKhI13U4x1K5ZrgYOnRom+2vf/3rXUvcxR3OcVRO3fzxj39c3aKq5QWCcnuhn/3sZ9VtPMQeh3PclVsvrF+/vjr1s0X5+B3veEfUG6dx1rFy3VQ5mA48TWXlypXVtuefX/6qV72qeqVz6dKlrdvKE62f/vSnMW7cuA4dN533OCo+9alPVae5lFfMhR7tPZb+9m//Nr773e9Wx1HLWzF9+vTqlXS6tsM5lsr1niX4ymzxgX71q1+9IADpWg7nODrYUvolEsv16nCohg0bVk2yLFu2rM0L5eVavnp8zm1mr46VqeByXvlVV11V3cfjueeeizlz5sS5555bnRdcLgItpy+0vHpVViW78sor441vfGO89rWvjc9//vPxx3/8x3H66afX+luhkxxH5fTNBx98sHrs7373u+qtRbkuolx8TNd1OMdSuQbmxa6DKa+IHnj2AV3T4RxL5TSpcs/YG264oXqCVc5Wufvuu6vYK7/n6LoO5zgqT9BPPPHE6nnSv/zLv1S/z8rvu/vuuy+++tWv1vpboc5t2LChel+Om/IzqaxnUO7tWH6nledH8+bNi8bGxhgyZEjUm27l/gu1HgQHV67BK0uWlxuml6WEyw1lZ8yYEUcffXS1yl05JeHAFcm+9rWvRVNTU/UkvbziVX74eYLOoR5Hjz76aLz//e9/0a/x1re+tbqYna7tcH8mHai8ELVgwYK6PM2F+j+Wvv71r1dvZcnz8sS9PNYqihzOcVSOnfICQblWr9yGocwMl+v43v72t9f626COPPTQQ3HeeedVLwaUBeqKcnlL0fI8qMwUl7NUyiUJe/bsqUKvvNDwile8IuqN2AMAAEjINXsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gCgg27UW24sv3z58loPBYAuQuwBAAAkJPYAAAASEnsA8DIuuuiiGDVqVOzZs6fN9pkzZ8Zb3vKW2LVrV/zgBz+I97///TFy5MgYPXp0XHjhhfHwww8f9Gtedtll8ba3va3NtnXr1lWnet5+++2t23bs2BGf/vSnq8eedtpp8Xd/93exZMmSP8B3CUA2Yg8AXsaECRNi69at8eMf/7h1Wwm/++67L97xjnfE448/HlOnTo3Xve51ce2111Yh93//93/xkY98JJ555pl2/7379u2LSy65JL7zne9Uwfmv//qv1d/xsY99LL7//e8foe8OgKwaaj0AAKh3Z599dsyZM6eavRs7dmy17cEHH4xnn302/uZv/iZ++ctfxpvf/OYqxrp161bt/6M/+qO44IIL4he/+EU109ced911V7Wwyze+8Y1qxrD4y7/8yyok58+fH+9617uO4HcJQDZm9gDgZbziFa+IxsbGuPfee6O5ubnads8998SgQYOq0zjLqZW33nprbNu2LX72s59V+xYvXtw6O9deDzzwQAwYMCBOPPHE2L59e+tbOaXzN7/5TWzevPmIfY8A5GNmDwAOwTnnnFOdOvmTn/wkhg8fXoXfxIkTq5m8tWvXxuzZs6tZuL59+8aQIUPita997WH/HS0h2WLTpk2xYcOGatbwxZQZvuOPP77d3xMAuYk9ADgE48aNi1e/+tXVqZxldq1ci1dO4SxmzJhRzbKVGb1yTV1R7qf33e9+96Bfr+V0zwM9//q+V77yla3XAb6YgQMH/p7fFQCZiT0AOARHH310vPOd76xm9H73u99VK2P+yZ/8SbWvLNDy3ve+tzX0ipe7eXrv3r2raCyzeS3ht3LlyjaPeetb3xr3339/9XX79+/fuv2mm26qrhlcuHDhEf4uAchE7AHAYazKedttt8X69eur2bwW5bTO//qv/4rXv/71cdxxx8UPf/jD+O///u9qX4myYcOGveBr/dmf/Vnccsst8eUvf7kKxZ///Odx8803t3lM2V7+vrIS5/nnn19dO7hs2bL49re/Xd32oXt3l94DcHB+SwDAISrXzp1wwgmxf//+apavRTnNsgTfZz7zmZg3b1513d4dd9xRrdxZAq5c0/d85fMnTZpUBV9ZYbPM1pX76R2oV69e1f5TTz01rrvuuiowH3300bj66qur+AOAl9Kt+flXgwMAANDpmdkDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAJHP/wOJ2r2Ry/IS+gAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.120892,
   "end_time": "2025-05-21T19:19:05.970205",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-05-21T19:19:02.849313",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}