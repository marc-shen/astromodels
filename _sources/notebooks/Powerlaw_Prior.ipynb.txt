{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "164e94a2",
   "metadata": {
    "papermill": {
     "duration": 0.007226,
     "end_time": "2025-05-21T17:38:41.273259",
     "exception": false,
     "start_time": "2025-05-21T17:38:41.266033",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0fdf164a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:41.285075Z",
     "iopub.status.busy": "2025-05-21T17:38:41.284553Z",
     "iopub.status.idle": "2025-05-21T17:38:42.980611Z",
     "shell.execute_reply": "2025-05-21T17:38:42.979765Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.703805,
     "end_time": "2025-05-21T17:38:42.982640",
     "exception": false,
     "start_time": "2025-05-21T17:38:41.278835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce18c34a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:42.987265Z",
     "iopub.status.busy": "2025-05-21T17:38:42.986821Z",
     "iopub.status.idle": "2025-05-21T17:38:42.990433Z",
     "shell.execute_reply": "2025-05-21T17:38:42.989580Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007908,
     "end_time": "2025-05-21T17:38:42.992034",
     "exception": false,
     "start_time": "2025-05-21T17:38:42.984126",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bff50127",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:42.995563Z",
     "iopub.status.busy": "2025-05-21T17:38:42.995336Z",
     "iopub.status.idle": "2025-05-21T17:38:42.998649Z",
     "shell.execute_reply": "2025-05-21T17:38:42.997924Z"
    },
    "papermill": {
     "duration": 0.006985,
     "end_time": "2025-05-21T17:38:43.000321",
     "exception": false,
     "start_time": "2025-05-21T17:38:42.993336",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e19ca136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:43.004262Z",
     "iopub.status.busy": "2025-05-21T17:38:43.004038Z",
     "iopub.status.idle": "2025-05-21T17:38:43.015647Z",
     "shell.execute_reply": "2025-05-21T17:38:43.015072Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01515,
     "end_time": "2025-05-21T17:38:43.016938",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.001788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "820295e7",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001036,
     "end_time": "2025-05-21T17:38:43.019281",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.018245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "74ec490e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:43.022071Z",
     "iopub.status.busy": "2025-05-21T17:38:43.021901Z",
     "iopub.status.idle": "2025-05-21T17:38:43.026231Z",
     "shell.execute_reply": "2025-05-21T17:38:43.025867Z"
    },
    "papermill": {
     "duration": 0.007035,
     "end_time": "2025-05-21T17:38:43.027313",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.020278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5692ad86",
   "metadata": {
    "papermill": {
     "duration": 0.001141,
     "end_time": "2025-05-21T17:38:43.029841",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.028700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "64861b57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:43.032784Z",
     "iopub.status.busy": "2025-05-21T17:38:43.032608Z",
     "iopub.status.idle": "2025-05-21T17:38:43.117967Z",
     "shell.execute_reply": "2025-05-21T17:38:43.117590Z"
    },
    "papermill": {
     "duration": 0.088382,
     "end_time": "2025-05-21T17:38:43.119289",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.030907",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37ed7c27",
   "metadata": {
    "papermill": {
     "duration": 0.001966,
     "end_time": "2025-05-21T17:38:43.123090",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.121124",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8f7c1497",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T17:38:43.128057Z",
     "iopub.status.busy": "2025-05-21T17:38:43.127840Z",
     "iopub.status.idle": "2025-05-21T17:38:43.498371Z",
     "shell.execute_reply": "2025-05-21T17:38:43.497162Z"
    },
    "papermill": {
     "duration": 0.375942,
     "end_time": "2025-05-21T17:38:43.500522",
     "exception": false,
     "start_time": "2025-05-21T17:38:43.124580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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PTQmTpwYK1eurPY1NDTEFVdcUe0bMmRIjBkzJpYvX17rIQMAANRc3cfehRdeGE8++WQVdZdddlk88cQTce6551b7ZsyYEbNnz44pU6bErFmzYu3atTF69OhaDxkAAKDm6jr21q9fH3fddVeMGzcuDj744Gpm76yzzor7778/3n777Zg5c2aMHTs2jjrqqDjggAOq6Hvqqadi4cKFtR46AABATXWs91M4N27cGN26dWvatsMOO8SmTZviueeeq07ZPPzww5v29enTJ/r16xePPPJIjUYMAABQHzpFHdt1111j0KBBcf3118fAgQOrbeW/yyzfm2++GR07doy+ffs2+57evXvHihUrWvxvjhgxYov7ygzjgAEDWvyzAQAAWktdx14xefLk+NrXvladwll06tQp/v3f/z1effXV6Ny5cxV8myuzgGVGEAAAoD2r69hbtmxZjBo1qpptO+2006ptJfTKtrJC57p166pTOjcPvrKte/fuLf43586du8V9ixYtEpIAAECbUNexd88998SqVavi8ssvr2bxisGDB8dhhx0WS5YsqW69sHTp0upavUbl62OOOaaGowYAAKi9ul6g5Z133okOHTo027bddttVH7169YqePXvGvHnzmvaVAFy8ePEHXncHAADQHtT1zF65pcL06dOr2y2cfvrp1fV6t9xySzWjN3LkyHj99der/SX8unTpEtOmTau29+/fv9ZDBwAAqKm6jr0999yzirsrr7wyzjzzzCryyuqcN954Y+y2227VtXtr1qyJ8ePHx4YNG6rQKwu6AAAAtHd1HXvFfvvtF9ddd9377iunc5599tnVBwAAAG3kmj0AAABaRuwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACChTrUeAHxUI1+ZWeshAABAm2FmDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAk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NbeZvTpWpoLLeeUXXXRRdR+Pt99+OyZPnhwnnHBCdV5wuQi0nL7Q+O5VWZXswgsvjH322Sf22GOPuPLKK+OP//iP45BDDqn1U6GNHEfl9M2HH364euzvf//76qNRuS6iXHxM+7U1x1K5Bub9roMp74hufvYB7dPWHEvlNKlyz9irr766eoFVzla55557qtgrf+dov7bmOCov0Pfee+/qddI///M/V3/Pyt+7+++/P374wx/W+qlQ51577bXqczluyu+ksp5Bubdj+ZtWXh9NmzYtRo4cGf37949606Hcf6HWg2DLyjV4ZcnycsP0spRwuaHshAkTYvvtt69WuSunJGy+ItmPfvSjmDlzZvUivbzjVX75eYHORz2Onn766fjKV77yvj/js5/9bHUxO+3b1v5O2lx5I+qKK66oy9NcqP9j6cc//nH1UZY8Ly/cy2OtosjWHEfl2ClvEJRr9cptGMrMcLmO73Of+1ytnwZ15NFHH42TTjqpejOgLFBXlMtbisbXQWWmuJylUi5J2LBhQxV65Y2GnXbaKeqN2AMAAEjINXsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gCglW7UW24sP3/+/FoPBYB2QuwBAAAkJPYAAAASEnsA8CFOO+20GDp0aGzYsKHZ9okTJ8bBBx8c69ati1/+8pfxla98JYYMGRLDhg2LU089NR5//PEt/sxzzjknjjjiiGbbXnnllepUz9tvv71p25o1a+K73/1u9dgDDzww/vZv/zbmzJnzMTxLALIRewDwIY499thYuXJlPPbYY03bSvjdf//9ccwxx8Rzzz0XY8eOjU9+8pNxySWXVCH3f//3f3H66afHm2++2eJ/95133okzzzwzfvazn1XB+S//8i/Vv/Gtb30rfvGLX2yjZwdAVp1qPQAAqHdHH310TJ48uZq9Gz58eLXt4Ycfjrfeeiv++q//Ol544YU46KCDqhjr0KFDtf+P/uiP4pRTTonnn3++mulribvvvrta2OXWW2+tZgyLv/iLv6hCcvr06fGFL3xhGz5LALIxswcAH2KnnXaKkSNHxn333RcNDQ3VtnvvvTf69u1bncZZTq28+eabY9WqVfHMM89U+2bPnt00O9dSDz30UPTu3Tv23nvvWL16ddNHOaXzt7/9baxYsWKbPUcA8jGzBwAfwXHHHVedOvnkk0/GoEGDqvA78cQTq5m8JUuWxKRJk6pZuB49ekT//v1jjz322Op/ozEkGy1fvjxee+21atbw/ZQZvt12263FzwmA3MQeAHwEI0aMiF133bU6lbPMrpVr8copnMWECROqWbYyo1euqSvK/fR+/vOfb/HnNZ7uubl3X9/3iU98ouk6wPfTp0+fP/BZAZCZ2AOAj2D77bePz3/+89WM3u9///tqZcxPfepT1b6yQMvxxx/fFHrFh908vVu3blU0ltm8xvBbsGBBs8d89rOfjQcffLD6ub169WrafsMNN1TXDM6YMWMbP0sAMhF7ALAVq3LecsstsXTp0mo2r1E5rfM///M/Y6+99oqdd945Hnjggfjv//7val+JsoEDB77nZ/3pn/5p3HTTTXHttddWofjrX/86brzxxmaPKdvLv1dW4jz55JOrawfnzZsXP/3pT6vbPnTs6NJ7ALbMXwkA+IjKtXN77rlnbNq0qZrla1ROsyzB973vfS+mTZtWXbd3xx13VCt3loAr1/S9W/n+UaNGVcFXVtgss3Xlfnqb69q1a7X/gAMOiEsvvbQKzKeffjouvvjiKv4A4IN0aHj31eAAAAC0eWb2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEDk8/8AWxXEbbG6v/oAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.423497,
   "end_time": "2025-05-21T17:38:43.934849",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-05-21T17:38:40.511352",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}