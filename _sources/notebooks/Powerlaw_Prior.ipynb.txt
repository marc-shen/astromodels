{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "62f8c968",
   "metadata": {
    "papermill": {
     "duration": 0.008955,
     "end_time": "2024-09-10T20:05:24.364038",
     "exception": false,
     "start_time": "2024-09-10T20:05:24.355083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "511470d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:24.380301Z",
     "iopub.status.busy": "2024-09-10T20:05:24.379541Z",
     "iopub.status.idle": "2024-09-10T20:05:25.784705Z",
     "shell.execute_reply": "2024-09-10T20:05:25.784206Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.415349,
     "end_time": "2024-09-10T20:05:25.786227",
     "exception": false,
     "start_time": "2024-09-10T20:05:24.370878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f839263",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.789444Z",
     "iopub.status.busy": "2024-09-10T20:05:25.789142Z",
     "iopub.status.idle": "2024-09-10T20:05:25.797359Z",
     "shell.execute_reply": "2024-09-10T20:05:25.796929Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011187,
     "end_time": "2024-09-10T20:05:25.798625",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.787438",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8555c33f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.801202Z",
     "iopub.status.busy": "2024-09-10T20:05:25.801062Z",
     "iopub.status.idle": "2024-09-10T20:05:25.809053Z",
     "shell.execute_reply": "2024-09-10T20:05:25.808668Z"
    },
    "papermill": {
     "duration": 0.0107,
     "end_time": "2024-09-10T20:05:25.810317",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.799617",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "532a2d85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.812942Z",
     "iopub.status.busy": "2024-09-10T20:05:25.812806Z",
     "iopub.status.idle": "2024-09-10T20:05:25.821633Z",
     "shell.execute_reply": "2024-09-10T20:05:25.821220Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011502,
     "end_time": "2024-09-10T20:05:25.822853",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.811351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4de7ee43",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001001,
     "end_time": "2024-09-10T20:05:25.824894",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.823893",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8ceac398",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.827443Z",
     "iopub.status.busy": "2024-09-10T20:05:25.827309Z",
     "iopub.status.idle": "2024-09-10T20:05:25.831211Z",
     "shell.execute_reply": "2024-09-10T20:05:25.830763Z"
    },
    "papermill": {
     "duration": 0.006667,
     "end_time": "2024-09-10T20:05:25.832551",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.825884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1c9f99a",
   "metadata": {
    "papermill": {
     "duration": 0.001151,
     "end_time": "2024-09-10T20:05:25.834835",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.833684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c8bc14e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.837723Z",
     "iopub.status.busy": "2024-09-10T20:05:25.837578Z",
     "iopub.status.idle": "2024-09-10T20:05:25.925207Z",
     "shell.execute_reply": "2024-09-10T20:05:25.924864Z"
    },
    "papermill": {
     "duration": 0.090745,
     "end_time": "2024-09-10T20:05:25.926671",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.835926",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ee6d1d2",
   "metadata": {
    "papermill": {
     "duration": 0.001322,
     "end_time": "2024-09-10T20:05:25.929572",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.928250",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "486b5bae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:25.932905Z",
     "iopub.status.busy": "2024-09-10T20:05:25.932770Z",
     "iopub.status.idle": "2024-09-10T20:05:26.254849Z",
     "shell.execute_reply": "2024-09-10T20:05:26.254524Z"
    },
    "papermill": {
     "duration": 0.325429,
     "end_time": "2024-09-10T20:05:26.256272",
     "exception": false,
     "start_time": "2024-09-10T20:05:25.930843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.803419,
   "end_time": "2024-09-10T20:05:26.590329",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2024-09-10T20:05:23.786910",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}