{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9297c7d4",
   "metadata": {
    "papermill": {
     "duration": 0.010838,
     "end_time": "2025-05-01T00:24:19.112700",
     "exception": false,
     "start_time": "2025-05-01T00:24:19.101862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7396ba53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:19.127397Z",
     "iopub.status.busy": "2025-05-01T00:24:19.126617Z",
     "iopub.status.idle": "2025-05-01T00:24:20.527966Z",
     "shell.execute_reply": "2025-05-01T00:24:20.527497Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.409457,
     "end_time": "2025-05-01T00:24:20.529270",
     "exception": false,
     "start_time": "2025-05-01T00:24:19.119813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1f80f1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.532329Z",
     "iopub.status.busy": "2025-05-01T00:24:20.532004Z",
     "iopub.status.idle": "2025-05-01T00:24:20.540172Z",
     "shell.execute_reply": "2025-05-01T00:24:20.539803Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010743,
     "end_time": "2025-05-01T00:24:20.541233",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.530490",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1ea2ff7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.543844Z",
     "iopub.status.busy": "2025-05-01T00:24:20.543707Z",
     "iopub.status.idle": "2025-05-01T00:24:20.551733Z",
     "shell.execute_reply": "2025-05-01T00:24:20.551393Z"
    },
    "papermill": {
     "duration": 0.010521,
     "end_time": "2025-05-01T00:24:20.552818",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.542297",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8a40b985",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.555457Z",
     "iopub.status.busy": "2025-05-01T00:24:20.555319Z",
     "iopub.status.idle": "2025-05-01T00:24:20.564351Z",
     "shell.execute_reply": "2025-05-01T00:24:20.563969Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011626,
     "end_time": "2025-05-01T00:24:20.565461",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.553835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f87cb8",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001012,
     "end_time": "2025-05-01T00:24:20.567529",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.566517",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9670b6fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.570126Z",
     "iopub.status.busy": "2025-05-01T00:24:20.569985Z",
     "iopub.status.idle": "2025-05-01T00:24:20.574151Z",
     "shell.execute_reply": "2025-05-01T00:24:20.573664Z"
    },
    "papermill": {
     "duration": 0.006647,
     "end_time": "2025-05-01T00:24:20.575158",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.568511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ea4d3b",
   "metadata": {
    "papermill": {
     "duration": 0.001079,
     "end_time": "2025-05-01T00:24:20.577413",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.576334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5827e15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.580100Z",
     "iopub.status.busy": "2025-05-01T00:24:20.579959Z",
     "iopub.status.idle": "2025-05-01T00:24:20.646952Z",
     "shell.execute_reply": "2025-05-01T00:24:20.646621Z"
    },
    "papermill": {
     "duration": 0.069813,
     "end_time": "2025-05-01T00:24:20.648251",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.578438",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef68f260",
   "metadata": {
    "papermill": {
     "duration": 0.001407,
     "end_time": "2025-05-01T00:24:20.651266",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.649859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9d18088a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:20.654558Z",
     "iopub.status.busy": "2025-05-01T00:24:20.654403Z",
     "iopub.status.idle": "2025-05-01T00:24:20.968298Z",
     "shell.execute_reply": "2025-05-01T00:24:20.967868Z"
    },
    "papermill": {
     "duration": 0.316921,
     "end_time": "2025-05-01T00:24:20.969501",
     "exception": false,
     "start_time": "2025-05-01T00:24:20.652580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.714901,
   "end_time": "2025-05-01T00:24:21.307913",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-05-01T00:24:18.593012",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}