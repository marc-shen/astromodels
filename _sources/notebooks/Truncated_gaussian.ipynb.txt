{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c67beef6",
   "metadata": {
    "papermill": {
     "duration": 0.001425,
     "end_time": "2024-05-17T21:07:56.209276",
     "exception": false,
     "start_time": "2024-05-17T21:07:56.207851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Truncated gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "80e81ba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:56.212416Z",
     "iopub.status.busy": "2024-05-17T21:07:56.212219Z",
     "iopub.status.idle": "2024-05-17T21:07:57.702308Z",
     "shell.execute_reply": "2024-05-17T21:07:57.701843Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.493312,
     "end_time": "2024-05-17T21:07:57.703806",
     "exception": false,
     "start_time": "2024-05-17T21:07:56.210494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95ffd3e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.706921Z",
     "iopub.status.busy": "2024-05-17T21:07:57.706576Z",
     "iopub.status.idle": "2024-05-17T21:07:57.713461Z",
     "shell.execute_reply": "2024-05-17T21:07:57.713096Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009688,
     "end_time": "2024-05-17T21:07:57.714710",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.705022",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bae7e29b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.717417Z",
     "iopub.status.busy": "2024-05-17T21:07:57.717269Z",
     "iopub.status.idle": "2024-05-17T21:07:57.725231Z",
     "shell.execute_reply": "2024-05-17T21:07:57.724866Z"
    },
    "papermill": {
     "duration": 0.01073,
     "end_time": "2024-05-17T21:07:57.726410",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.715680",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Truncated_gaussian\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9fe26302",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.728979Z",
     "iopub.status.busy": "2024-05-17T21:07:57.728843Z",
     "iopub.status.idle": "2024-05-17T21:07:57.731750Z",
     "shell.execute_reply": "2024-05-17T21:07:57.731415Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005463,
     "end_time": "2024-05-17T21:07:57.732884",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.727421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86c25011",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000978,
     "end_time": "2024-05-17T21:07:57.734875",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.733897",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a84b159b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.737363Z",
     "iopub.status.busy": "2024-05-17T21:07:57.737221Z",
     "iopub.status.idle": "2024-05-17T21:07:57.741891Z",
     "shell.execute_reply": "2024-05-17T21:07:57.741545Z"
    },
    "papermill": {
     "duration": 0.007268,
     "end_time": "2024-05-17T21:07:57.743080",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.735812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A  truncated Gaussian function defined on the interval between the lower_bound (a) and upper_bound (b)</li>\n",
       "\n",
       "<li>formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma} \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma} \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>mu: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Central value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>sigma: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: standard deviation</li>\n",
       "\n",
       "<li>min_value: 1e-12</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: lower bound of gaussian, setting to -np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of gaussian  setting to np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A  truncated Gaussian function defined on the interval between the lower_bound\n",
       "    * (a) and upper_bound (b)\n",
       "  * formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma}\n",
       "    * \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma}\n",
       "    * \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$\n",
       "  * parameters:\n",
       "    * F:\n",
       "      * value: 1.0\n",
       "      * desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * mu:\n",
       "      * value: 0.0\n",
       "      * desc: Central value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * sigma:\n",
       "      * value: 1.0\n",
       "      * desc: standard deviation\n",
       "      * min_value: 1.0e-12\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * lower_bound:\n",
       "      * value: -1.0\n",
       "      * desc: lower bound of gaussian, setting to -np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of gaussian  setting to np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59364778",
   "metadata": {
    "papermill": {
     "duration": 0.001109,
     "end_time": "2024-05-17T21:07:57.745339",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.744230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "644b1973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.748508Z",
     "iopub.status.busy": "2024-05-17T21:07:57.748368Z",
     "iopub.status.idle": "2024-05-17T21:07:57.856047Z",
     "shell.execute_reply": "2024-05-17T21:07:57.855578Z"
    },
    "papermill": {
     "duration": 0.11092,
     "end_time": "2024-05-17T21:07:57.857287",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.746367",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d63b775b",
   "metadata": {
    "papermill": {
     "duration": 0.001849,
     "end_time": "2024-05-17T21:07:57.860773",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.858924",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7ed4b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:07:57.864172Z",
     "iopub.status.busy": "2024-05-17T21:07:57.864027Z",
     "iopub.status.idle": "2024-05-17T21:07:58.018299Z",
     "shell.execute_reply": "2024-05-17T21:07:58.016965Z"
    },
    "papermill": {
     "duration": 0.157819,
     "end_time": "2024-05-17T21:07:58.019908",
     "exception": false,
     "start_time": "2024-05-17T21:07:57.862089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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b34zzj777Kiuro4bbrghNm/eHC+99FLMnj07rrrqqhg+fHj06dMnpk6dGs8880wsX7680FMHAAAoqKKOvWeffTbefPPNOOecc3JjnTp1iqeeeioOO+ywWL9+fQwdOjS3raqqKrp27RqLFi0qxHQBAACKRlHH3p/+9Kc48sgj48knn4yzzz47ampq4oorrogXX3wx6uvro6SkJLp06ZL3mM6dO0dDQ0OBZgwAAFAcSgs9gd156623oqmpKX70ox/FhAkTory8PH784x/HJZdcEtdee22UlZVFSUl+r5aXl0djY2Orv+aQIUN2uW3MmDHRrVu3Vj83AADAwVLUsdfS0hJbt26Nm266KXr37h0REd27d88FWVNTU7S0tOQFX1NTU1RUVBRkvgAAAMWiqGPv6KOPjoiIT3ziE7mxioqKqKysjNdffz2yLIu1a9dGVVVVbvvatWvjrLPOavXXnD9//i63rVy58gNdNQQAADhYivozeyeeeGJERDz//PO5sbfeeitee+21+OQnPxnHHHNMLFiwILdt1apVUV9fv9u3YgIAABwKivrK3qc+9ak444wzYuLEiTFx4sQ46qij4oc//GF069YtTjvttBg5cmTMnDkzKisro3379nHDDTdEbW1tHH/88YWeOgAAQEEVdexFRNx8881x0003xTXXXBPbtm2LU045Je64444oKSmJurq62Lx5c1x77bWxdevWqK2tjSlTphR6ygAAAAXXLsuyrNCTaCt2fGavY8eO0aNHj0JPJyIialfPLvQUAAAgaY93vbTQU8izt11S1J/ZAwAAoHXEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILEHgAAQILaVOw99NBDccIJJ8SGDRsiIqK5uTkmT54cNTU1MXDgwJg4cWI0NjYWeJYAAACF12Zi77XXXosZM2bkjd14442xcOHCmDlzZtx1112xcuXKuO666wo0QwAAgOLRZmLvuuuui549e+b+vnHjxnjggQfiW9/6VgwaNCj69+8fEyZMiEcffTQaGhoKOFMAAIDCaxOxd//998e6devi61//em5s6dKlERExaNCg3Fi/fv2itLQ0Fi9efNDnCAAAUExKCz2BPVmzZk38y7/8S/zkJz+JjRs35sbr6+ujsrIyysrKcmNlZWXRqVOnD3Rlb8iQIbvcNmbMmOjWrVurnxsAAOBgKeore1mWxcSJE2PUqFF5b+GMiGhsbIz27dvv9Jjy8nI3aQEAAA55RX1lb+7cufHmm29GXV3dTtsqKipiy5YtO403NTVFRUVFq7/m/Pnzd7lt5cqVQhIAAGgTijr2FixYEC+++GKcdNJJEfHulb6IiNNPPz0+9rGPxbp166K5uTn3Vs5t27bFunXrokuXLgWbMwAAQDEo6tibPHlybNq0Kff35cuXx7hx42LOnDlx7LHHxumnnx5PP/10nHrqqRERsWTJksiyLAYOHFioKQMAABSFoo69zp07R+fOnXN/X79+fUREHHfccdGpU6c499xzY9q0aTF16tR45513YsqUKXHhhRdGeXl5oaYMAABQFIo69vZk0qRJMWPGjKirq4vS0tIYMWJEjBs3rtDTAgAAKLh22Y4PwrFHO27Q0rFjx+jRo0ehpxMREbWrZxd6CgAAkLTHu15a6Cnk2dsuKepfvQAAAEDriD0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEFX3sNTQ0xNVXXx0DBw6Mvn37xqhRo2LFihUREZFlWdxyyy0xePDg6N+/f4wePTrWr19f4BkDAAAUXtHH3pgxY+Kll16K2267Le6+++6oqKiIK664IjZv3hyzZs2Ke++9N6ZOnRpz5syJLVu2xJVXXlnoKQMAABRcaaEnsDsvv/xyLFmyJO6///7o169fRER873vfi5qampg3b17Mnj07rrrqqhg+fHhEREydOjWGDRsWy5cvj+rq6kJOHQAAoKCK+srea6+9Fp07d46ePXvmxjp27BgdOnSINWvWxPr162Po0KG5bVVVVdG1a9dYtGhRIaYLAABQNIr6yt4pp5wSv/3tb/PGHn744di4cWN07949SkpKokuXLnnbO3fuHA0NDa3+mkOGDNnltjFjxkS3bt1a/dwAAAAHS1HH3t/atm1bzJo1K2699db4zGc+E42NjVFWVhYlJfkXJ8vLy6OxsbFAswQAACgObSL2nnvuuRg/fny89NJLcdlll8WYMWNiwYIF0dTUFC0tLXnB19TUFBUVFa3+WvPnz9/ltpUrVwpJAACgTSjqz+xFRPzmN7+JkSNHRnl5efziF7+IsWPHxuGHHx6VlZWRZVmsXbs2b/+1a9dGVVVVgWYLAABQHIo69jZt2hTjx4+P4cOHxz333BM9evTIbevRo0ccc8wxsWDBgtzYqlWror6+frefuwMAADgUFPXbOBcuXBiNjY1x+eWXx5o1a/K2ffjDH46RI0fGzJkzo7KyMtq3bx833HBD1NbWxvHHH1+gGQMAABSHoo69+vr62Lp1a3z5y1/eadvo0aPjyiuvjM2bN8e1114bW7dujdra2pgyZcrBnygAAECRaZdlWVboSbQVO27Q0rFjx7y3lBZS7erZhZ4CAAAk7fGulxZ6Cnn2tkuK+jN7AAAAtI7YAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASFCbj73m5uaYPHly1NTUxMCBA2PixInR2NhY6GkBAAAUVJuPvRtvvDEWLlwYM2fOjLvuuitWrlwZ1113XaGnBQAAUFClhZ7AB7Fx48Z44IEH4vbbb49BgwZFRMSECRPioosuioaGhjj66KMLPEMAAIDCaNNX9pYuXRoRkQu9iIh+/fpFaWlpLF68uFDTAgAAKLg2fWWvvr4+Kisro6ysLDdWVlYWnTp1ioaGhlY955AhQ3a5bdq0aVFRURGbN2+OlStXtur597crmz9R6CkAAEDSVm4qju/9d9i8eXNERDQ1Ne12vzYde42NjdG+ffudxsvLyw/ITVp2RGVLS0vR3ATm49Gx0FMAAICkNW4tju/936ulpWW329t07FVUVMSWLVt2Gm9qaoqKiopWPef8+fN3ue25556L5ubmKCkpiSOOOKJVz78/LV++PCIiqqurCzyTQ4P1Pnis9cFlvQ8u633wWOuDy3ofXNb74CnGtW5qaoqWlpa8dzi+n3ZZlmUHaU773bx58+Lqq6+O//7v/84d6LZt26J///5x2223xemnn17gGR5YO95yurtAZf+x3gePtT64rPfBZb0PHmt9cFnvg8t6Hzxtea3b9A1aampqIsuyePrpp3NjS5YsiSzLYuDAgQWcGQAAQGG16dirqKiIc889N6ZNmxZLliyJJ598MiZOnBgXXnhhlJeXF3p6AAAABdOmP7MXETFp0qSYMWNG1NXVRWlpaYwYMSLGjRtX6GkBAAAUVJuPvQ4dOsT06dNj+vTphZ4KAABA0WjTb+MEAADg/bXpu3ECAADw/lzZAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYAwAASJDYawOmT58eU6dO3eN+K1eujJEjR0a/fv3izDPPjF/84hd529esWROXX3559O/fP84444z40Y9+dKCm3CYtWrQovvjFL0bfvn1jxIgR8cQTTxR6Sknb3+v91ltvxf/+3/87Pv3pT8epp54a3/3ud2Pr1q37Z7Jt3L6u9fLly+MrX/lKnHjiiTFgwIC4+uqr48033zwoc22LmpubY/LkyVFTUxMDBw6MiRMnRmNj4y73v+eee2LYsGFx4oknxiWXXBIvv/xy3vZf/epX8dnPfjb69esXF1xwQfzhD384wEfQtuzLem/bti1uvvnmOO2006JPnz7xuc99Lh555JGDPOO2a1/P7T1xbu/e/l5v9s6GDRuiV69esWHDhl3uk2VZ3HLLLTF48ODo379/jB49OtavX5+3z55e2wsmo2ht27Yte/LJJ7P+/ftn3/72t3e779tvv52deuqp2fjx47MVK1ZkDz74YNanT5/siSeeyLIsy7Zv3559/vOfz772ta9lzz77bPbYY49lJ598cnbPPfccjEMpeqtWrcpOPPHE7Pvf/372wgsvZLNnz8569+6drVix4n33v/TSS7M+ffq8758HH3wwy7Isu+mmm3badtFFFx3Eoype+7reWZZlV1111U7rOX78+Nz2r33ta9n555+fLV26NFu4cGFWW1ubffe73z0Yh1PU9nWtN2zYkJ188snZN7/5zezZZ5/N5s+fn5111lnZN77xjdw+zu18U6ZMyf7X//pf2cKFC7OlS5dmX/rSl7IxY8a8776PPPJI1rdv3+zBBx/MVqxYkV177bXZsGHDss2bN2dZlmX/8z//k/Xu3Tv7yU9+kr3wwgvZd7/73ezTn/509tprrx3EIypu+7Let9xySzZgwIDs4YcfzlasWJHNnDkzO+GEE7Jnn302y7Is27hxY1ZdXb3T+fzUU08dxCMqXvuy1itWrHjf/yfW19dnWebc3ht7u96///3vd/k9yJlnnpllmXN7b7322mvZ1VdfnXXv3j1raGjY5X4/+tGPspqamuyxxx7Lli9fnn31q1/N/v7v/z63fU+v7YUk9orU6tWrsz59+mTdu3fPunfvvsfYu/vuu7OhQ4dmzc3NubHx48dnV1xxRZZlWfbEE09k1dXV2RtvvJHbfuutt2bnnHPOAZl/W/Od73wnO//88/PG/vEf/3GX675mzZrsxRdfzPvzr//6r9nw4cNzLxaXX355dtttt+Xts2bNmgN+LG3Bvq53lmXZ2WefnT3wwAN567njm4Q//elPWffu3bM//elPuf0ffPDBbODAgXn/TRyK9nWtf/7zn2ef/vSns6amptzY/Pnzs+7du2dr167Nssy5/bfeeuutrHfv3rkfrGXZu9+I9ejRI1u/fv1O+5933nl5P4TYvHlz1q9fv+xXv/pVlmXv/lDjb7+5a2lpyYYPH579+Mc/PnAH0Ybs63oPHjw4u/POO/PGLrjgguxb3/pWlmVZ9swzz2SDBg3a6fX8nXfeObAH0gbs61o//PDD2Re/+MWd1nLHa7Bze/f2Zb3feeedndb5ueeey04//fRs9uzZWZY5t/fGpEmTct9n7y72WlpaslNPPTXvAsmaNWuy7t27Z8uWLcuybM+v7YXkbZxF6phjjon7778/Hnrooejdu/ce91+8eHEMGjQoDj/88NxYTU1NLFq0KCLefRtX375946ijjsrb/qc//SkaGhr2+/zbmsWLF8fQoUPzxk4++eTc+r1XVVVVfOITn8j9KSkpiZ/85Cfxgx/8IDp16hQRES+//HKccsopeftVVVUd8GNpC/Z1vbdv3x719fUxdOjQvPWsrKzMPV9VVVV88pOfzHu+t956K1asWHHgDqQN2Ne1fuONN2LAgAFRVlaWGzv66KMjImLdunUR4dz+W0uXLo2IiEGDBuXG+vXrF6WlpbF48eK8fTdt2hTPPfdc3r9H+/bto2/fvrl/j/f+e7Vr1y4GDhy4y3+vQ82+rHdTU1Mcdthh0a9fv7zxo48+Oncu//nPf44TTjgh71z+xCc+ER06dDjAR1L89mWtI959Xejdu/dOa7nj+xLn9u7ty3p36NBhp3WeO3du9OzZMy655JKIcG7vjbq6unjooYdi+vTpu93vxRdfjPXr1+edv1VVVdG1a9dYtGjRXr22F5LYK1JlZWXRs2fP6NmzZ3Ts2HGP+69atSqOPfbYvLHOnTvHli1bYtOmTbvcHhE7vef4ULSr9dmbEM6yLK6//vo455xzom/fvhHx7vvu16xZEz/72c/ijDPOiGHDhsXUqVPj7bffPiDzb2v2db1Xr14dERE33HBDDBkyJM4888yYOXNmNDc3R0REfX19dO3aNe8xO0LwUD+/93Wt6+rq4o477sgbmzt3bnTo0CE+/vGPO7ffo76+PiorK/PiuKysLDp16rTTGq9evTpaWlp2+e+xadOmeOONN1r9WnQo2Jf1PuKII+LJJ5+Mmpqa3Ngrr7wSCxcujJ49e0bEu4GycePGOP/886OmpiYuuOCC+N3vfndwDqbI7ctaR7y7lq+88kqce+65ccopp8TFF18cy5Yti4hwbu+FfV3vv/XUU0/Ff/7nf8Z1112XG3Nu71lVVVX07NkzjjvuuN3uV19fHyUlJdGlS5e88R3n755e2wtN7CWisbExjjjiiLyx8vLy3LY9bT/Uvd/6dOzYca/W5le/+lU8//zzMWbMmNzYX/7yl2hpaYmjjz46br/99pg4cWL89re/jX/6p3+KLMv2+/zbmn1d7z//+c+xffv2+NSnPhU/+tGP4sorr4z77rsvJk+enHu+9u3b5z2mtLQ0jjjiiEP+/P4g5/Ybb7wR11xzTdx3331x9dVXR8eOHZ3b7/F+517Eu6+v713jHX9/7/479t3TdvZtvd/rsccei5EjR0anTp3isssui4h3vyFuaGiIb3zjG/HjH/84+vXrF1dcccX7Xrk61OzrWv/5z3+Ot956K8aPHx933HFHfPSjH42LLroo/vznPzu390Jrz+2WlpaYPn16XHTRRXk/9HRu7z+NjY1RVlYWJSX52dRWXrtLCz2BQ9Xbb78dr7/++i63d+vWLdq1a7fXz/ehD30otmzZkjfW1NQUEREf/vCH97g9dXta712tT0VFxW6fN8uyuPXWW+Piiy/OvdUtIuL444+PJ554Ij72sY9FRETv3r3jox/9aFx44YXxwgsvRI8ePT7A0RS//b3eJ598cjz55JO5q3U9e/aM0tLSGDt2bFx33XXxoQ99KF555ZW8x2RZFlu3bt3jv2Fbd6DO7V/+8pcxffr0aGlpie9+97vxhS98ISKc2+9VUVGx0/pGvP8a7/j75s2b88abm5ujoqIiPvShD+12O/u23jts2LAhJk2aFI899lgMGzYspk+fnlvrSZMmRYcOHeLII4+MiIjq6up46aWXYs6cOXlXBA9F+7rWP/zhD+Ooo47KfcPbt2/f+PznPx/33Xdf7oehzu1da825HRHxyCOPxKuvvhpf//rX88ad2/tPRUVFNDU1RUtLS17w7fi32dNre6GJvQKZN29eTJgwYZfbly5duldv39yhsrIy/vrXv+aNvfrqq9GpU6do3759VFZWxh//+Medth922GG5t3OmbE/rfeyxx77v+u3pc0i/+93v4pVXXokLL7wwb/yII47IfTO8w45vgtetW5f8N8T7e707duy4038PPXr0iCzL4vXXX4/OnTvHf/3Xf+Vtf+2116KlpWWnt12k5kCc2zfffHPccccd8aUvfSn++Z//Oe8HGYf6uf1elZWVsW7dumhubs69/Wrbtm2xbt26nc69Y445JiLeXf+//Qn8q6++Gr169Yry8vI48sgj49VXX8173N68Fh0q9mW9I959G/M//uM/RktLS9x2223xmc98Jm/7jn+Tv3XCCSfEf//3fx+YA2hD9nWt/+7v/i7v7yUlJfGpT30q1q1b59zeC/u63jv87Gc/i3PPPTf3A4wdnNv7T2VlZWRZFmvXrs07X9euXRtnnXXWHl/bC83bOAvky1/+crzwwgu7/LMvoRcRMXTo0Fi0aFFs3749N7ZgwYIYPHhwbvuyZcvyPlezYMGC6NevX+6nPinb03p/9rOfjQULFuQ95m/Xb1f+7//9vzFgwIDcFacdfvjDH8YFF1yQN7Zs2bJo165d3k1EUrW/1/v666+Pb37zm3ljy5Ytiw4dOsSxxx4bQ4cOjdWrV+dd3Zs/f3507tw5+fXe32v99NNPxx133BGTJk2Km266KS/0Ipzb71VTUxNZlsXTTz+dG1uyZElkWRYDBw7M2/eoo46Kvn37xvz583NjmzZtimeeeSaGDBkSEe++Vv/t9u3bt8eiRYty2w91+7LeEe++dnTo0CEeeuihnUJv8+bNMXjw4Jg3b17e+PLly+NTn/rUgTmANmRf1rq+vj5qamri2WefzY1t3749nn/++dxaOrd3b1/P7Yh336r5zDPPxDnnnJM37tzev3r06BHHHHNM3v9LV61aFfX19TFkyJC9em0vqALcAZR9NGrUqJ1uk7558+bsL3/5S+73d7zxxhtZTU1NNmnSpOz555/P7rjjjqxXr165W8Ju3bo1++xnP5tdeeWV2XPPPZf9/Oc/z/r06ZP913/910E/nmL08ssvZ9XV1dmtt96aPffcc9mMGTOyE088MfvrX/+aZdm76/eXv/wle/vtt3OP2bZtW3bSSSftdFvvLMuy5cuXZ717986mTZuWLVu2LHv88cez4cOHZ2PHjj1ox1TM9nW9H3vssaxnz565/X/5y19mp5xySnbzzTfnnvOiiy7KLrjgguyZZ57JHn744WzAgAG5W1AfyvZ1radNm5aNGDEi+8tf/rLTn82bNzu338eECROys846K/v973+fPfHEE9kZZ5yRTZs2LcuyLFu/fn22evXq3L4PPvhgduKJJ2YPP/xwtnTp0uySSy7JvvjFL2bbt2/PsuzdW6336tUru+eee7Jly5ZlV199dTZ06NBs06ZNBTm2YrS3693Q0JCdcMIJ2f3337/Tubzj14iMHj06O+OMM7J58+Zlzz77bHbTTTdlvXv3zl588cWCHV8x2Zdz+0tf+lI2YsSI7He/+132zDPPZP/8z/+cDRgwIHc7e+f2nu3LemfZu7/77cQTT8y2bt2603M5t/feokWLdvrVC2vXrs29TmRZlt12223Zqaeemj3xxBPZokWLsnPPPTerq6vLbd/Ta3shib024P1ib8eJuWjRotzY8uXLs/PPPz/r06dPdtZZZ2Xz5s3Le0x9fX128cUXZ9XV1dmwYcOy++6776DMv6347W9/m33+85/Pqqursy996UvZkiVLcttWrVqVde/ePfuP//iP3Njzzz+fde/ePVu8ePH7Pt+TTz6ZnXfeeVl1dXV26qmnZpMnT84aGxsP+HG0Ffu63g899FB2zjnnZH369MlOP/307Ac/+EHe/+AaGhqy0aNHZ/369csGDx6c3X777Qf1eIrZvqz11772tbzfO/S3f3a83ji3873zzjvZddddl5100knZySefnE2bNi33u8XGjRuXDRs2LG//WbNmZUOGDMn69euXXXHFFXnfUGTZu+f68OHDs+rq6uwrX/lK3u+PZO/X+5lnntnluTxq1Kgsy7Ls7bffziZPnpydeuqpWZ8+fbLzzjsv+93vflewYys2+3Ju7/jl1CeffHLWr1+/bNSoUbkfOO/g3N69fX0t+cY3vpE7l9/Lub333i/2Ro0albe227Zty773ve9lJ598cta/f//smmuuybsAkGV7fm0vlHZZdgjePg0AACBxPrMHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAAfB4sWL44QTToiFCxcWeioAHCLEHgAAQILEHgAAQILEHgDswWWXXRYDBw6MrVu35o1PmDAhBgwYEE1NTTFv3rz4+7//++jfv3/U1NTEpZdeGk8//fQun3P8+PFx2mmn5Y2tXr06TjjhhHjggQdyY5s3b46bbropTjvttOjbt2/8wz/8Qzz++OP79wABSJLYA4A9GDFiRGzcuDF+//vf58a2bt0av/71r+Oss86KFStWxFVXXRXHHXdc3HjjjTF+/Ph444034qtf/Wq8+eabrf6627dvj69//evx4IMPxmWXXRbf//7347jjjotvfOMb8cgjj+yHIwMgZaWFngAAFLvPfOYzMWXKlJg3b14MHjw4IiKeeuqpeOutt+ILX/hC/PGPf4yTTjopvv/970e7du0iIuLv/u7v4pJLLokXXnghampqWvV1f/WrX8XixYvj5z//efTv3z8iIs4888x44403YubMmfG5z31u/xwgAElyZQ8A9uDII4+M2traeOyxxyLLsoiIePTRR6NLly4xYMCA+Id/+Ie45557YtOmTfHss8/Go48+Gvfee29EvHt1rrWefPLJ6Ny5c3Tv3j0aGxtzf0477bR45ZVXoqGhYb8cHwBpcmUPAPbCueeeG4888kj84Q9/iOrq6njsscdi5MiR0a5du1i1alVMmjQpFi9eHJ06dYrjjz8+Pvaxj+3z19gRkjusX78+XnvttTjppJPed/833ngjjj766FYdDwDpE3sAsBeGDBkSH/nIR2LevHnR2NgYb775ZnzhC1+IiIhx48ZFQ0NDPProo3HcccdFRMTChQvjl7/85S6fb8fbPf/Wez/f96EPfSj3OcD3U1VV1cqjAeBQIPYAYC8cfvjhcfbZZ8djjz0Wb7/9dvTt2zc+/vGPR0TEihUr4rzzzsuFXkTs8Zenl5eXR2NjY2RZlgu/JUuW5O1z8sknxxNPPBHHHXdcVFZW5sbvuuuueOqpp2LWrFn76/AASJDYA4C9NGLEiJg7d26sXbs2xo0blxuvrq6O//zP/4xPfvKT8eEPfzh+85vfxP/8z/9ExLs3cunRo8dOz/XpT3867r777vi3f/u3OO+88+L555+Pn/70p3n7nHfeeTF37ty47LLL4uKLL44jjzwyFixYEP/+7/8eEyZMiJISH70HYNf8XwIA9tJJJ50Uxx57bLS0tMTZZ5+dG7/xxhujuro6vvOd78QNN9wQnTp1il/84hcxePDg+OlPfxqrVq3a6bnOPvvsqKuri7vvvjvOPPPMuOuuu+Kmm27K26dDhw5x9913R58+feJ73/tejBs3LpYtWxbTp0+Piy+++IAfLwBtW7vsvZ8GBwAAoM1zZQ8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBBYg8AACBB/x/CVFJZNIVkIAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.97391,
   "end_time": "2024-05-17T21:07:58.450362",
   "environment_variables": {},
   "exception": null,
   "input_path": "Truncated_gaussian.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Truncated_gaussian.ipynb",
   "parameters": {
    "func_name": "Truncated_gaussian",
    "positive_prior": false
   },
   "start_time": "2024-05-17T21:07:55.476452",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}