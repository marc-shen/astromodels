{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "683c0e82",
   "metadata": {
    "papermill": {
     "duration": 0.010229,
     "end_time": "2024-09-10T20:23:40.706656",
     "exception": false,
     "start_time": "2024-09-10T20:23:40.696427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Truncated gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "68203ca2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:40.718251Z",
     "iopub.status.busy": "2024-09-10T20:23:40.717620Z",
     "iopub.status.idle": "2024-09-10T20:23:42.124510Z",
     "shell.execute_reply": "2024-09-10T20:23:42.124012Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.414443,
     "end_time": "2024-09-10T20:23:42.126007",
     "exception": false,
     "start_time": "2024-09-10T20:23:40.711564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "529e7212",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.129082Z",
     "iopub.status.busy": "2024-09-10T20:23:42.128756Z",
     "iopub.status.idle": "2024-09-10T20:23:42.130925Z",
     "shell.execute_reply": "2024-09-10T20:23:42.130511Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005045,
     "end_time": "2024-09-10T20:23:42.132253",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.127208",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c2d187b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.134804Z",
     "iopub.status.busy": "2024-09-10T20:23:42.134671Z",
     "iopub.status.idle": "2024-09-10T20:23:42.140797Z",
     "shell.execute_reply": "2024-09-10T20:23:42.140376Z"
    },
    "papermill": {
     "duration": 0.008851,
     "end_time": "2024-09-10T20:23:42.142033",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.133182",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Truncated_gaussian\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b9300fe2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.144606Z",
     "iopub.status.busy": "2024-09-10T20:23:42.144468Z",
     "iopub.status.idle": "2024-09-10T20:23:42.147248Z",
     "shell.execute_reply": "2024-09-10T20:23:42.146883Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005476,
     "end_time": "2024-09-10T20:23:42.148494",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.143018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27832dcd",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000963,
     "end_time": "2024-09-10T20:23:42.150475",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.149512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0d2eb3f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.153083Z",
     "iopub.status.busy": "2024-09-10T20:23:42.152890Z",
     "iopub.status.idle": "2024-09-10T20:23:42.163701Z",
     "shell.execute_reply": "2024-09-10T20:23:42.163305Z"
    },
    "papermill": {
     "duration": 0.013532,
     "end_time": "2024-09-10T20:23:42.164960",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.151428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A  truncated Gaussian function defined on the interval between the lower_bound (a) and upper_bound (b)</li>\n",
       "\n",
       "<li>formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma} \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma} \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>mu: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Central value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>sigma: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: standard deviation</li>\n",
       "\n",
       "<li>min_value: 1e-12</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: lower bound of gaussian, setting to -np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of gaussian  setting to np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A  truncated Gaussian function defined on the interval between the lower_bound\n",
       "    * (a) and upper_bound (b)\n",
       "  * formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma}\n",
       "    * \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma}\n",
       "    * \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$\n",
       "  * parameters:\n",
       "    * F:\n",
       "      * value: 1.0\n",
       "      * desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * mu:\n",
       "      * value: 0.0\n",
       "      * desc: Central value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * sigma:\n",
       "      * value: 1.0\n",
       "      * desc: standard deviation\n",
       "      * min_value: 1.0e-12\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * lower_bound:\n",
       "      * value: -1.0\n",
       "      * desc: lower bound of gaussian, setting to -np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of gaussian  setting to np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ba4c3b2",
   "metadata": {
    "papermill": {
     "duration": 0.001107,
     "end_time": "2024-09-10T20:23:42.167229",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.166122",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2395234c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.170118Z",
     "iopub.status.busy": "2024-09-10T20:23:42.169984Z",
     "iopub.status.idle": "2024-09-10T20:23:42.270371Z",
     "shell.execute_reply": "2024-09-10T20:23:42.269968Z"
    },
    "papermill": {
     "duration": 0.103302,
     "end_time": "2024-09-10T20:23:42.271652",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.168350",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f18172a",
   "metadata": {
    "papermill": {
     "duration": 0.001395,
     "end_time": "2024-09-10T20:23:42.274673",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.273278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "841bf89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:23:42.278037Z",
     "iopub.status.busy": "2024-09-10T20:23:42.277892Z",
     "iopub.status.idle": "2024-09-10T20:23:42.424041Z",
     "shell.execute_reply": "2024-09-10T20:23:42.423559Z"
    },
    "papermill": {
     "duration": 0.149228,
     "end_time": "2024-09-10T20:23:42.425229",
     "exception": false,
     "start_time": "2024-09-10T20:23:42.276001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3sAAAMICAYAAABxe/yMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA7c0lEQVR4nO3de5RU1Z3o8R8t4Wk6BqWZNKhrTIIgNIgBWwRUmonRMZiHzigrjq8YQ1yO5KojD4dIeKh53IhRE03CJYmvqPdG76xorgMxGgEhOEwEFUw0xgYiCo2KtG3z6H3/cFErJSLQAlW9+XzW4g/3OVW9z+ZY9LdP1el2KaUUAAAAZKWi1BMAAABgzxN7AAAAGRJ7AAAAGRJ7AAAAGRJ7AAAAGRJ7AAAAGRJ7AAAAGRJ7AAAAGWpf6gm0Jc8880xs2rQpKioqomPHjqWeDgAAsB9qbm6OlpaW6NChQ/Tr12+H+4m93bBp06ZoaWmJlpaW2LJlS6mnAwAA7Mc2bdr0vtvF3m6oqKiIlpaWqKioiM6dO5d6OgAAwH6oqamp0CXvR+ztho4dO8aWLVuic+fO0adPn1JPBwAA2A+tWLEiGhsbd/rRMjdoAQAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyFD7Uk8AANqiulWzW/3YR3pdsAdnAgDvzZU9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADLUv9QS2Wb9+fQwfPjzmzZsX3bp1i4iIhoaGmDFjRjz++OPR3NwcAwYMiKuvvjr69u0bEREppfj+978f9957b7z11lsxbNiwmDJlShxyyCGlPBQA9rG6VbNb9bhHel2wh2cCAOWjLK7svfrqqzFjxozYunVr0fi4cePihRdeiJtvvjnuuOOOqKysjIsvvjiampoiImLWrFlx9913x9SpU+P222+Pt99+Oy655JJSHAIAAEBZKfmVvW984xtxzz33bDf+4osvxuLFi+Pee++NgQMHRkTEd77znaitrY25c+fGZz/72Zg9e3ZcdtllMWrUqIiImDp1aowcOTKWLVsWNTU1+/Q4AAAAyknJr+yNHTs2HnjggZg+fXrR+CuvvBI9evQovGUzIqJr167RuXPnWLt2bTz//POxbt26GDFiRGF7dXV19OrVKxYuXLjP5g8AAFCOSn5lr7q6Oqqrq2PDhg1F48cdd1z87ne/Kxp78MEHY8OGDdG3b9+or6+PioqK6NmzZ9E+PXr0iIaGhlbPZ/jw4TvcNm7cuDjiiCNa/dwAAAD7Ssmv7O2KLVu2xG233Rbjx4+PT3/60zF06NBobGyMDh06REVF8SF06dIlGhsbSzRTAACA8lDyK3s788wzz8SECRPihRdeiAsvvDDGjRsXERGVlZXR3NwcLS0tRcHX3NwclZWVrf568+bN2+G2FStWCEkAAKBNKOsre7/97W9jzJgx0aVLl/jlL38ZV155ZXzoQx+KiIiqqqpIKcWaNWuKHrNmzZqorq4uxXQBAADKRtnG3saNG2PChAkxatSouPPOO6NPnz5F2/v06RPdu3eP+fPnF8ZWrlwZ9fX17/u5OwAAgP1B2b6Nc8GCBdHY2BgXXXRRrF69umjbRz7ykTjooINizJgxMXPmzKiqqopOnTrFtddeG3V1dXH44YeXaNYAAADloWxjr76+PjZv3hxf/OIXt9t26aWXxr/+67/G2LFjo6mpKa666qrYvHlz1NXVxZQpU/b9ZAH2orpVs1v1uEd6XbCHZwIAtCVlE3u1tbXx3HPPFf77oosuiosuuuh9H3PAAQfElVdeGVdeeeXenh4AAECbUraf2QMAAKD1xB4AAECGxB4AAECGyuYzewA5a+1NVsiTm+4AsC+4sgcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhN2gBAPaKD3JjIjejAfjgXNkDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIUPtSTwAA2DV1q2a3+rGP9LpgD84EgLbAlT0AAIAMiT0AAIAMiT0AAIAMiT0AAIAMuUELQKbczAMA9m+u7AEAAGRI7AEAAGRI7AEAAGRI7AEAAGTIDVoAANogN2ECdsaVPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAy5GycA23GXP/7WBzkfSvE129o5WIr1BfYPruwBAABkSOwBAABkSOwBAABkSOwBAABkyA1aAGA/4CYgO7c/3RQG2D+4sgcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhN2iBjJTq5gKt/bpuaAAAsPe4sgcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhN2gBoCx8kBsMAQDbc2UPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ2IPAAAgQ+1LPQGgPNStml3qKQDsEV7Pdu6DrNEjvS7YgzMB9iZX9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADLUvtQTAGgr6lbNLvUUANqsD/Ia+kivC/bgTGD/4coeAABAhsQeAABAhsQeAABAhsQeAABAhtygBQDgA3IDJ6AcubIHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQIbEHAACQobKJvfXr18dRRx0V69evL4xt2rQprrnmmqitrY0hQ4bEpEmTorGxsbA9pRQ33nhjDBs2LAYNGhSXXnpprFu3rhTTBwAAKCvtSz2BiIhXX301vvWtb8XWrVuLxq+77rpYsGBBzJw5Mzp16hTTpk2Lq6++OmbOnBkREbNmzYq77747ZsyYET169IiZM2fGJZdcEvfee28JjgIAAD6YulWzW/W4R3pdsIdnQg5KHnvf+MY34p577tlufMOGDXHffffFLbfcEkOHDo2IiIkTJ8a5554bDQ0N0a1bt5g9e3ZcdtllMWrUqIiImDp1aowcOTKWLVsWNTU1+/Q4AAAAyknJ38Y5duzYeOCBB2L69OlF40uWLImIKIReRMTAgQOjffv2sWjRonj++edj3bp1MWLEiML26urq6NWrVyxcuHDfTB4AAKBMlfzKXnV1dVRXV8eGDRuKxuvr66Oqqio6dOhQGOvQoUN069YtGhoaomPHjlFRURE9e/YselyPHj2ioaFhn8wdAACgXJU89naksbExOnXqtN14ly5dorGxMRobG6NDhw5RUVHxnttba/jw4TvcNm7cuDjiiCNa/dwAAAD7StnGXmVlZbz99tvbjTc3N0dlZWVUVlZGc3NztLS0FAXftu0AsDOtvRECALQFZRt7VVVVsXbt2ti0aVPhrZxbtmyJtWvXRs+ePaN79+6RUoo1a9ZEdXV14XFr1qyJU045pdVfd968eTvctmLFig901RAAAGBfKfkNWnaktrY2Ukrx5JNPFsYWL14cKaUYMmRI9OnTJ7p37x7z588vbF+5cmXU19e/71sxAQAA9gdle2WvsrIyTj/99Jg2bVpMnTo13nrrrZgyZUqcffbZ0aVLl4iIGDNmTMycOTOqqqqiU6dOce2110ZdXV0cfvjhJZ49AABAaZVt7EVETJ48OWbMmBFjx46N9u3bx+jRo2P8+PGF7WPHjo2mpqa46qqrYvPmzVFXVxdTpkwp3YQBAADKRLuUUir1JNqKbZ/Z69q1a/Tp06fU04HttLWbTTzS64JST2G3tLX1BchFW/v34oNo7b81+9MasetdUraf2QMAAKD1xB4AAECGxB4AAECGxB4AAECGyvpunAAA8EFukOXGJezPXNkDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIUPtSTwDKWd2q2a1+7CO9LtiDM2FP+iB/rwCwM/6doVy4sgcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhN2gBAACytz/eeM+VPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAy5QQv7hQ/ygVwAAGiLXNkDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIUPtSTwAAAPaWulWzSz0FKBlX9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADLUvtQTAPZfdatml3oKAEAJfJDvAR7pdcEenEneXNkDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIUPtST4DSqVs1u9WPfaTXBXtwJgAAwJ7myh4AAECGxB4AAECGxB4AAECGxB4AAECGxB4AAECGxB4AAECGxB4AAECGxB4AAECGxB4AAECG2pd6Auxf6lbNbvVjH+l1wR6cCQAA5M2VPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAy5QQut8kFutAIAAOx9ruwBAABkSOwBAABkSOwBAABkSOwBAABkyA1aAACgjfsgN897pNcFe3AmlBNX9gAAADIk9gAAADIk9gAAADIk9gAAADJU9jdoaWxsjOuvvz4eeeSRaGlpiZNOOikmTpwYlZWVkVKK73//+3HvvffGW2+9FcOGDYspU6bEIYccUuppsxd8kA8eAwDw3tzcJV9lf2Xvm9/8ZvzhD3+IG2+8Mb73ve/FkiVLYtKkSRERMWvWrLj77rtj6tSpcfvtt8fbb78dl1xySYlnDAAAUHplHXubNm2KBx98MMaNGxeDBw+OoUOHxhVXXBG/+c1v4q233orZs2fHZZddFqNGjYr+/fvH1KlT46mnnoply5aVeuoAAAAlVdax19jYGFu2bIkuXboUxjp27BgtLS2xfPnyWLduXYwYMaKwrbq6Onr16hULFy4sxXQBAADKRll/Zu+jH/1o1NTUxG233RZ9+vSJiIjbbrstBg8eHK+//npUVFREz549ix7To0ePaGhoaPXXHD58+A63jRs3Lo444ohWPzcAAMC+UtaxFxExZcqU+NKXvhRDhw6NiIj27dvHz3/+81i9enV06NAhKiqKL0526dIlGhsbSzFVKOLDzgAAlFJZx97atWtj7NixMXz48LjwwgsjIuLnP/95jB07NiZPnhzNzc3R0tJSFHzNzc1RWVnZ6q85b968HW5bsWKFkAQAANqEso69//f//l9s3LgxbrjhhujQoUNERAwcODCOP/74WLlyZaSUYs2aNVFdXV14zJo1a+KUU04p1ZQBAADKQlnfoGXr1q3Rrl27orEDDjggDjjggKiqqoru3bvH/PnzC9tWrlwZ9fX17/u5OwAAgP1BWV/ZGzVqVMycOTOuuOKK+PKXvxzt27ePu+66K1JKUVdXF6+++mrMnDkzqqqqolOnTnHttddGXV1dHH744aWeOgAAQEmVdewdeuihcdddd8X3v//9+OpXvxoppaipqYmf/exncfDBB8fYsWOjqakprrrqqti8eXPU1dXFlClTSj3tfeqD3AQEAADIV1nHXkTEUUcdFbfeeut7bjvggAPiyiuvjCuvvHIfzwoAAKC8lfVn9gAAAGgdsQcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhsQcAAJAhsQcAAJChsv+l6rA/qls1u9RTAADYKd+zlDdX9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADIk9gAAADLUfld3PPfcc3f5Sdu1axc/+9nPWjUhAAAAPrhdjr3NmzdHu3bt3nefNWvWxF//+ted7gcAAMDetcuxd/fdd+9w29atW2PWrFnxgx/8ID760Y/GhAkT9sjkAAAAaJ1djr0dWbp0aUyePDn++Mc/xujRo2PixInx0Y9+dE/MDQAAgFZqdext3Lgxvve978UvfvGLqK6ujp/85CcxbNiwPTk3AAAAWqlVsffwww/HjBkzoqGhIc4777wYN25cdOrUaU/PDQAAgFbardh7+eWX45vf/GY8+uijcdRRR8UPf/jD6Nev396aGwAAAK20y7E3e/bsuOmmmyKlFFdddVWcf/75UVHh1/QBAACUo12OvW9961vRrl27qK6ujt/85jfxm9/8Zof7tmvXLu644449MkEAAAB23y7H3pAhQ/bmPAAAANiDdjn2br/99r05DwAAAPYgH7oDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgDAADIkNgD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vxUrVsSYMWNi4MCBcfLJJ8cvf/nLou2rV6+Oiy66KAYNGhQnnXRS/PjHP95bU26TFi5cGJ///OdjwIABMXr06Hj00UdLPaWs7en1fuONN+J//I//EZ/61Kfi+OOPj29/+9uxefPmPTPZNm5313rZsmXxpS99KY4++ugYPHhwXH755fH666/vk7m2RZs2bYprrrkmamtrY8iQITFp0qRobGzc4f533nlnjBw5Mo4++ug4//zz48UXXyza/utf/zo+85nPxMCBA+Oss86KP/zhD3v5CNqW3VnvLVu2xA033BAnnHBC9O/fP/7xH/8xHnrooX0847Zrd8/tnXFuv789vd7s3Pr16+Ooo46K9evX73CflFLceOONMWzYsBg0aFBceumlsW7duqJ9dva6XlKJsrVly5b02GOPpUGDBqVvfvOb77vvm2++mY4//vg0YcKEtHz58nT//fen/v37p0cffTSllNLWrVvTZz/72fSVr3wlPf3002nu3Lnp2GOPTXfeeee+OJSyt3LlynT00Uen7373u+m5555Ls2fPTv369UvLly9/z/0vuOCC1L9///f8c//996eUUrr++uu323buuefuw6MqX7u73imldNlll223nhMmTChs/8pXvpLOPPPMtGTJkrRgwYJUV1eXvv3tb++Lwylru7vW69evT8cee2z6+te/np5++uk0b968dMopp6Svfe1rhX2c28WmTJmS/uEf/iEtWLAgLVmyJH3hC19I48aNe899H3rooTRgwIB0//33p+XLl6errroqjRw5MjU1NaWUUvrv//7v1K9fv/TTn/40Pffcc+nb3/52+tSnPpVeeeWVfXhE5W131vvGG29MgwcPTg8++GBavnx5mjlzZjryyCPT008/nVJKacOGDammpma78/mJJ57Yh0dUvnZnrZcvX/6e/ybW19enlJzbu2JX1/v3v//9Dr8HOfnkk1NKzu1d8corr6TLL7889e7dOzU0NOxwvx//+MeptrY2zZ07Ny1btix9+ctfTv/0T/9U2L6z1/VSE3tlatWqVal///6pd+/eqXfv3juNvTvuuCONGDEibdq0qTA2YcKEdPHFF6eUUnr00UdTTU1Neu211wrbb7rppnTaaaftlfm3Nd/61rfSmWeeWTT2L//yLztc99WrV6fnn3++6M/3v//9NGrUqMILxkUXXZRuvvnmon1Wr16914+lLdjd9U4ppVNPPTXdd999Reu57ZuEP/3pT6l3797pT3/6U2H/+++/Pw0ZMqTo/4n90e6u9S9+8Yv0qU99KjU3NxfG5s2bl3r37p3WrFmTUnJu/6033ngj9evXr/CDtZTe+UasT58+ad26ddvtf8YZZxT9EKKpqSkNHDgw/frXv04pvfNDjb/95q6lpSWNGjUq/eQnP9l7B9GG7O56Dxs2LN12221FY2eddVb693//95RSSk899VQaOnTodq/nb7311t49kDZgd9f6wQcfTJ///Oe3W8ttr8HO7fe3O+v91ltvbbfOzzzzTDrxxBPT7NmzU0rO7Z2ZPHly4Xvs94u9lpaWdPzxxxddHFm9enXq3bt3Wrp0aUpp56/rpeZtnGWqe/fuce+998YDDzwQ/fr12+n+ixYtiqFDh8aHPvShwlhtbW0sXLgwIt55G9eAAQPioIMOKtr+pz/9KRoaGvb4/NuaRYsWxYgRI4rGjj322ML6vVt1dXV8/OMfL/ypqKiIn/70p/G9730vunXrFhERL774Yhx33HFF+1VXV+/1Y2kLdne9t27dGvX19TFixIii9ayqqio8X3V1dXziE58oer433ngjli9fvvcOpA3Y3bV+7bXXYvDgwdGhQ4fC2MEHHxwREWvXro0I5/bfWrJkSUREDB06tDA2cODAaN++fSxatKho340bN8YzzzxT9PfRqVOnGDBgQOHv491/X+3atYshQ4bs8O9rf7M7693c3BwHHHBADBw4sGj84IMPLpzLf/7zn+PII48sOpc//vGPR+fOnffykZS/3VnriHdeF/r167fdWm77vsS5/f52Z707d+683Trfdddd0bdv3zj//PMjwrm9M2PHjo0HHnggpk+f/r77Pf/887Fu3bqic7e6ujp69eoVCxcu3KXX9VITe2WqQ4cO0bdv3+jbt2907dp1p/uvXLkyDj300KKxHj16xNtvvx0bN27c4faI2O59x/ujHa3ProRwSim+8Y1vxGmnnRYDBgyIiHfed7969er4+c9/HieddFKMHDkypk6dGm+++eZemX9bs7vrvWrVqoiIuPbaa2P48OFx8sknx8yZM2PTpk0REVFfXx+9evUqesy2ENzfz+/dXeuxY8fGrbfeWjR21113RefOnePv//7vndvvUl9fH1VVVUVx3KFDh+jWrdt2a7xq1apoaWnZ4d/Hxo0b47XXXmv1a9H+YHfWu2PHjvHYY49FbW1tYeyll16KBQsWRN++fSPinUDZsGFDnHnmmVFbWxtnnXVWPP744/vmYMrc7qx1xDtr+dJLL8Xpp58exx13XJx33nmxdOnSiAjn9i7Y3fX+W0888UT8x3/8R1x99dWFMef2+6uuro6+ffvGYYcd9r771dfXR0VFRfTs2bNofNu5u7PX9XIg9jLR2NgYHTt2LBrr0qVLYdvOtu/v3mt9unbtuktr8+tf/zqeffbZGDduXGHsL3/5S7S0tMTBBx8ct9xyS0yaNCl+97vfxb/+679GSmmPz7+t2d31/vOf/xxbt26NT37yk/HjH/84LrnkkrjnnnvimmuuKTxfp06dih7Tvn376Nix435/fn+Qc/u1116LK664Iu655564/PLLo2vXrs7td3mvcy/indfXd6/xtv9+9/7b9t3ZdnZvvd9t7ty5MWbMmOjWrVtceOGFEfHON8QNDQ3xta99LX7yk5/EwIED4+KLL37PK1f7m91d6z//+c/xxhtvxIQJE+LWW2+NQw45JM4999z485//7NzeBa09t1taWmL69Olx7rnnFv3Q07m9ZzQ2NkaHDh2ioqI4mdrS63b7Uk9gf/Xmm2/Gq6++usPtRxxxRLRr126Xn+/DH/5wvP3220Vjzc3NERHxkY98ZKfbc7ez9d7R+lRWVr7v86aU4qabborzzjuv8Fa3iIjDDz88Hn300fjYxz4WERH9+vWLQw45JM4+++x47rnnok+fPh/gaMrfnl7vY489Nh577LHC1bq+fftG+/bt48orr4yrr746PvzhD8dLL71U9JiUUmzevHmnf4dt3d46t3/1q1/F9OnTo6WlJb797W/H5z73uYhwbr9bZWXldusb8d5rvO2/m5qaisY3bdoUlZWV8eEPf/h9t7N7673N+vXrY/LkyTF37twYOXJkTJ8+vbDWkydPjs6dO8eBBx4YERE1NTXxwgsvxO233150RXB/tLtr/YMf/CAOOuigwje9AwYMiM9+9rNxzz33FH4Y6tzesdac2xERDz30ULz88svx1a9+tWjcub1nVFZWRnNzc7S0tBQF37a/l529rpcDsVcic+bMiYkTJ+5w+5IlS3bp7ZvbVFVVxV//+teisZdffjm6desWnTp1iqqqqvjjH/+43fYDDjig8HbOnO1svQ899ND3XL+dfQ7p8ccfj5deeinOPvvsovGOHTsWvhneZts3wWvXrs3+G+I9vd5du3bd7v+HPn36REopXn311ejRo0f853/+Z9H2V155JVpaWrZ760Vu9sa5fcMNN8Stt94aX/jCF+Lf/u3fin6Qsb+f2+9WVVUVa9eujU2bNhXefrVly5ZYu3btdude9+7dI+Kd9f/bn8C//PLLcdRRR0WXLl3iwAMPjJdffrnocbvyWrS/2J31jnjnbcz/8i//Ei0tLXHzzTfHpz/96aLt2/5O/taRRx4Z//Vf/7V3DqAN2d21/ru/+7ui/66oqIhPfvKTsXbtWuf2Ltjd9d7m5z//eZx++umFH2Bs49zeM6qqqiKlFGvWrCk6V9esWROnnHLKTl/Xy4G3cZbIF7/4xXjuued2+Gd3Qi8iYsSIEbFw4cLYunVrYWz+/PkxbNiwwvalS5cWfa5m/vz5MXDgwMJPfXK2s/X+zGc+E/Pnzy96zN+u34783//7f2Pw4MGFK07b/OAHP4izzjqraGzp0qXRrl27opuI5GpPr/c3vvGN+PrXv140tnTp0ujcuXMceuihMWLEiFi1alXR1b158+ZFjx49sl/vPb3WTz75ZNx6660xefLkuP7664tCL8K5/W61tbWRUoonn3yyMLZ48eJIKcWQIUOK9j3ooINiwIABMW/evMLYxo0b46mnnorhw4dHxDuv1X+7fevWrbFw4cLC9v3d7qx3xDuvHZ07d44HHnhgu9BramqKYcOGxZw5c4rGly1bFp/85Cf3zgG0Ibuz1vX19VFbWxtPP/10YWzr1q3x7LPPFtbSuf3+dvfcjnjnrZpPPfVUnHbaaUXjzu09p0+fPtG9e/eif0dXrlwZ9fX1MXz48F16XS+5EtwBlN10zjnnbHeb9KampvSXv/yl8Ds8XnvttVRbW5smT56cnn322XTrrbemo446qnBb2M2bN6fPfOYz6ZJLLknPPPNM+sUvfpH69++f/vM//3OfH085evHFF1NNTU266aab0jPPPJNmzJiRjj766PTXv/41pfTO+v3lL39Jb775ZuExW7ZsScccc8x2t/VOKaVly5alfv36pWnTpqWlS5emRx55JI0aNSpdeeWV++yYytnurvfcuXNT3759C/v/6le/Sscdd1y64YYbCs957rnnprPOOis99dRT6cEHH0yDBw8u3IJ6f7a7az1t2rQ0evTo9Je//GW7P01NTc7t9zBx4sR0yimnpN///vfp0UcfTSeddFKaNm1aSimldevWpVWrVhX2vf/++9PRRx+dHnzwwbRkyZJ0/vnnp89//vNp69atKaV3brV+1FFHpTvvvDMtXbo0XX755WnEiBFp48aNJTm2crSr693Q0JCOPPLIdO+99253Lm/7NSKXXnppOumkk9KcOXPS008/na6//vrUr1+/9Pzzz5fs+MrJ7pzbX/jCF9Lo0aPT448/np566qn0b//2b2nw4MGFW9o7t3dud9Y7pXd+/9vRRx+dNm/evN1zObd3zcKFC7f71Qtr1qwpvEaklNLNN9+cjj/++PToo4+mhQsXptNPPz2NHTu2sH1nr+ulJvbagPeKvW0n58KFCwtjy5YtS2eeeWbq379/OuWUU9KcOXOKHlNfX5/OO++8VFNTk0aOHJnuueeefTL/tuJ3v/td+uxnP5tqamrSF77whbR48eLCtpUrV6bevXun//N//k9h7Nlnn029e/dOixYtes/ne+yxx9IZZ5yRampq0vHHH5+uueaa1NjYuNePo63Y3fV+4IEH0mmnnZb69++fTjzxxPS9732v6B+4hoaGdOmll6aBAwemYcOGpVtuuWWfHk852521/spXvlL0u4f+9s+21xvndrG33norXX311emYY45Jxx57bJo2bVrhd4uNHz8+jRw5smj/WbNmpeHDh6eBAwemiy++uOibipTeOddHjRqVampq0pe+9KWi3x/Jrq/3U089tcNz+ZxzzkkppfTmm2+ma665Jh1//PGpf//+6YwzzkiPP/54yY6t3OzOub3tF1Qfe+yxaeDAgemcc84p/MB5G+f2+9vd15Kvfe1rhXP53Zzbu+a9Yu+cc84pWtctW7ak73znO+nYY49NgwYNSldccUXRD/9T2vnreim1S2k/vH0aAABA5nxmDwAAIENiDwAAIENiDwAAIENiDwAAIENiDwAAIENiDwAAIENiDwAAIENiDwD2gUWLFsWRRx4ZCxYsKPVUANhPiD0AAIAMiT0AAIAMiT0A2IkLL7wwhgwZEps3by4anzhxYgwePDiam5tjzpw58U//9E8xaNCgqK2tjQsuuCCefPLJHT7nhAkT4oQTTigaW7VqVRx55JFx3333Fcaampri+uuvjxNOOCEGDBgQ//zP/xyPPPLInj1AALIk9gBgJ0aPHh0bNmyI3//+94WxzZs3x29+85s45ZRTYvny5XHZZZfFYYcdFtddd11MmDAhXnvttfjyl78cr7/+equ/7tatW+OrX/1q3H///XHhhRfGd7/73TjssMPia1/7Wjz00EN74MgAyFn7Uk8AAMrdpz/96ZgyZUrMmTMnhg0bFhERTzzxRLzxxhvxuc99Lv74xz/GMcccE9/97nejXbt2ERHxd3/3d3H++efHc889F7W1ta36ur/+9a9j0aJF8Ytf/CIGDRoUEREnn3xyvPbaazFz5sz4x3/8xz1zgABkyZU9ANiJAw88MOrq6mLu3LmRUoqIiIcffjh69uwZgwcPjn/+53+OO++8MzZu3BhPP/10PPzww3H33XdHxDtX51rrscceix49ekTv3r2jsbGx8OeEE06Il156KRoaGvbI8QGQJ1f2AGAXnH766fHQQw/FH/7wh6ipqYm5c+fGmDFjol27drFy5cqYPHlyLFq0KLp16xaHH354fOxjH9vtr7EtJLdZt25dvPLKK3HMMce85/6vvfZaHHzwwa06HgDyJ/YAYBcMHz48PvrRj8acOXOisbExXn/99fjc5z4XERHjx4+PhoaGePjhh+Owww6LiIgFCxbEr371qx0+37a3e/6td3++78Mf/nDhc4Dvpbq6upVHA8D+QOwBwC740Ic+FKeeemrMnTs33nzzzRgwYED8/d//fURELF++PM4444xC6EXETn95epcuXaKxsTFSSoXwW7x4cdE+xx57bDz66KNx2GGHRVVVVWH8Rz/6UTzxxBMxa9asPXV4AGRI7AHALho9enTcddddsWbNmhg/fnxhvKamJv7jP/4jPvGJT8RHPvKR+O1vfxv//d//HRHv3MilT58+2z3Xpz71qbjjjjvihz/8YZxxxhnx7LPPxs9+9rOifc4444y466674sILL4zzzjsvDjzwwJg/f3787//9v2PixIlRUeGj9wDsmH8lAGAXHXPMMXHooYdGS0tLnHrqqYXx6667LmpqauJb3/pWXHvttdGtW7f45S9/GcOGDYuf/exnsXLlyu2e69RTT42xY8fGHXfcESeffHL86Ec/iuuvv75on86dO8cdd9wR/fv3j+985zsxfvz4WLp0aUyfPj3OO++8vX68ALRt7dK7Pw0OAABAm+fKHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIbEHgAAQIb+P1EAjRjgR4FwAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.610601,
   "end_time": "2024-09-10T20:23:42.754018",
   "environment_variables": {},
   "exception": null,
   "input_path": "Truncated_gaussian.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Truncated_gaussian.ipynb",
   "parameters": {
    "func_name": "Truncated_gaussian",
    "positive_prior": false
   },
   "start_time": "2024-09-10T20:23:40.143417",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}