{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2efbbee8",
   "metadata": {
    "papermill": {
     "duration": 0.044017,
     "end_time": "2023-11-01T20:29:35.467423",
     "exception": false,
     "start_time": "2023-11-01T20:29:35.423406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Truncated gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f68be6dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:35.477797Z",
     "iopub.status.busy": "2023-11-01T20:29:35.477186Z",
     "iopub.status.idle": "2023-11-01T20:29:39.906262Z",
     "shell.execute_reply": "2023-11-01T20:29:39.902473Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.44302,
     "end_time": "2023-11-01T20:29:39.914189",
     "exception": false,
     "start_time": "2023-11-01T20:29:35.471169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e1390b88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:39.927190Z",
     "iopub.status.busy": "2023-11-01T20:29:39.926664Z",
     "iopub.status.idle": "2023-11-01T20:29:39.937763Z",
     "shell.execute_reply": "2023-11-01T20:29:39.933787Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.026319,
     "end_time": "2023-11-01T20:29:39.945303",
     "exception": false,
     "start_time": "2023-11-01T20:29:39.918984",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "69fd295c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:39.961372Z",
     "iopub.status.busy": "2023-11-01T20:29:39.960431Z",
     "iopub.status.idle": "2023-11-01T20:29:39.974112Z",
     "shell.execute_reply": "2023-11-01T20:29:39.970749Z"
    },
    "papermill": {
     "duration": 0.027971,
     "end_time": "2023-11-01T20:29:39.979992",
     "exception": false,
     "start_time": "2023-11-01T20:29:39.952021",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Truncated_gaussian\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe4853d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:39.989403Z",
     "iopub.status.busy": "2023-11-01T20:29:39.988845Z",
     "iopub.status.idle": "2023-11-01T20:29:40.001964Z",
     "shell.execute_reply": "2023-11-01T20:29:39.998318Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.024469,
     "end_time": "2023-11-01T20:29:40.007877",
     "exception": false,
     "start_time": "2023-11-01T20:29:39.983408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9335b75",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003979,
     "end_time": "2023-11-01T20:29:40.015290",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.011311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5531d3b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:40.025090Z",
     "iopub.status.busy": "2023-11-01T20:29:40.024590Z",
     "iopub.status.idle": "2023-11-01T20:29:40.046861Z",
     "shell.execute_reply": "2023-11-01T20:29:40.044601Z"
    },
    "papermill": {
     "duration": 0.033348,
     "end_time": "2023-11-01T20:29:40.052387",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.019039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A  truncated Gaussian function defined on the interval between the lower_bound (a) and upper_bound (b)</li>\n",
       "\n",
       "<li>formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma} \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma} \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>mu: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Central value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>sigma: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: standard deviation</li>\n",
       "\n",
       "<li>min_value: 1e-12</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: lower bound of gaussian, setting to -np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of gaussian  setting to np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A  truncated Gaussian function defined on the interval between the lower_bound\n",
       "    * (a) and upper_bound (b)\n",
       "  * formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma}\n",
       "    * \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma}\n",
       "    * \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$\n",
       "  * parameters:\n",
       "    * F:\n",
       "      * value: 1.0\n",
       "      * desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * mu:\n",
       "      * value: 0.0\n",
       "      * desc: Central value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * sigma:\n",
       "      * value: 1.0\n",
       "      * desc: standard deviation\n",
       "      * min_value: 1.0e-12\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * lower_bound:\n",
       "      * value: -1.0\n",
       "      * desc: lower bound of gaussian, setting to -np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of gaussian  setting to np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbeb826e",
   "metadata": {
    "papermill": {
     "duration": 0.004067,
     "end_time": "2023-11-01T20:29:40.060441",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.056374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6cc19db7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:40.071006Z",
     "iopub.status.busy": "2023-11-01T20:29:40.070452Z",
     "iopub.status.idle": "2023-11-01T20:29:40.397178Z",
     "shell.execute_reply": "2023-11-01T20:29:40.394902Z"
    },
    "papermill": {
     "duration": 0.337505,
     "end_time": "2023-11-01T20:29:40.401707",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.064202",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0f7c7e2",
   "metadata": {
    "papermill": {
     "duration": 0.004358,
     "end_time": "2023-11-01T20:29:40.410441",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.406083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "63f4018f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:29:40.422153Z",
     "iopub.status.busy": "2023-11-01T20:29:40.421661Z",
     "iopub.status.idle": "2023-11-01T20:29:40.911496Z",
     "shell.execute_reply": "2023-11-01T20:29:40.909514Z"
    },
    "papermill": {
     "duration": 0.503522,
     "end_time": "2023-11-01T20:29:40.918418",
     "exception": false,
     "start_time": "2023-11-01T20:29:40.414896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADIk9AACADLWp2Hv44YfjyCOPjLVr10ZExMaNG+Oaa66J2traGDx4cEyaNCkaGxtLPEsAAIDSazOx99prr8V1111XNHbDDTfEvHnzYvr06XHnnXfGsmXL4qqrrirRDAEAAMpHm4m9q666Knr37l34+7p16+LBBx+M//iP/4ghQ4bEwIEDY+LEifHYY49FQ0NDCWcKAABQem0i9h544IFYvXp1fPWrXy2MLVq0KCIihgwZUhgbMGBAVFZWxoIFC/b5HAEAAMpJZaknsDMrV66M//k//2f8+Mc/jnXr1hXG6+vro7q6Otq3b18Ya9++fXTt2tWVPQAAYL9X1rGXUopJkybFueeeG7179y66YtfY2BgdO3bc5jGdO3d+XzdpGTZs2Ha3jR07No444ohWPzcAAMC+UtZv47z33nvjzTffjNGjR2+zraqqKjZs2LDNeHNzc1RVVe2L6QEAAJStsr6yN3fu3HjxxRfjmGOOiYh3r/RFRJx44onx0Y9+NFavXh0bN24svJVz8+bNsXr16ujevXurv+acOXO2u23ZsmV+tQMAANAmlHXsXXPNNbF+/frC35csWRLjx4+Pu+66Kw499NA48cQT4+mnn47jjz8+IiIWLlwYKaUYPHhwqaYMAABQFso69rp16xbdunUr/H3NmjUREXHYYYdF165d4/TTT49rr702pk6dGu+8805MmTIlzj777OjcuXOppgwAAFAWyjr2dmby5Mlx3XXXxejRo6OysjJGjRoV48ePL/W0AAAASq5d2vpBOHZq62f2unTpEr169Sr1dCIiom7FzFJPAQAAsvZ4jwtLPYUiu9olZX03TgAAAFpo7GOvoaEhLr/88hg8eHD0798/zj333Fi6dGlERKSU4uabb46hQ4fGwIEDY8yYMbFmzZoSzxgAAKD0yj72xo4dGy+99FLceuutcffdd0dVVVVccskl0dTUFDNmzIj77rsvpk6dGnfddVds2LAhLr300lJPGQAAoOQqSz2BHXn55Zdj4cKF8cADD8SAAQMiIuLb3/521NbWxqxZs2LmzJlx2WWXxciRIyMiYurUqTFixIhYsmRJ9OvXr5RTBwAAKKmyvrL32muvRbdu3aJ3796FsS5dukSnTp1i5cqVsWbNmhg+fHhhW01NTfTo0SPmz59fiukCAACUjbK+snfcccfFb3/726KxRx55JNatWxc9e/aMioqK6N69e9H2bt26RUNDw76cJgAAQNkp69j7W5s3b44ZM2bELbfcEp/+9KejsbEx2rdvHxUVxRcnO3fuHI2Nja3+OsOGDdvutrFjx8YRRxzR6ucGAADYV8r6bZxbPffcc3HGGWfEzTffHBdccEHcdNNNUVVVFc3NzdHS0lK0b3Nzc1RVVZVopgAAAOWh7K/s/eY3v4mxY8dG79694+c//3n06tUrIiKqq6sjpRSrVq2Kmpqawv6rVq2KU045pdVfb86cOdvdtmzZsvd11RAAAGBfKesre+vXr48JEybEyJEj45577imEXkREr1694pBDDom5c+cWxpYvXx719fU7fCsmAADA/qCsr+zNmzcvGhsb4+KLL46VK1cWbfvQhz4U55xzTkyfPj2qq6ujY8eOcf3110ddXV0cfvjhJZoxAABAeSjr2Kuvr49NmzbFF77whW22jRkzJi699NJoamqKK6+8MjZt2hR1dXUxZcqUfT9RAACAMtMupZRKPYm2Yutn9rp06VL0ltJSqlsxs9RTAACArD3e48JST6HIrnZJWX9mDwAAgNYRewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABkSewAAABlq87G3cePGuOaaa6K2tjYGDx4ckyZNisbGxlJPCwAAoKTafOzdcMMNMW/evJg+fXrceeedsWzZsrjqqqtKPS0AAICSqiz1BN6PdevWxYMPPhi33XZbDBkyJCIiJk6cGOedd140NDTEwQcfXOIZAgAAlEabvrK3aNGiiIhC6EVEDBgwICorK2PBggWlmhYAAEDJtekre/X19VFdXR3t27cvjLVv3z66du0aDQ0NrXrOYcOGbXfbtddeG1VVVdHU1BTLli1r1fPvaZdu/HippwAAAFlbtr48vvffqqmpKSIimpubd7hfm469xsbG6Nix4zbjnTt33is3adkalS0tLWVzE5iPRZdSTwEAALLWuKk8vvf/ey0tLTvc3qZjr6qqKjZs2LDNeHNzc1RVVbXqOefMmbPdbc8991xs3LgxKioqokOHDq16/j1pyZIlERHRr1+/Es9k/2C99x1rvW9Z733Leu871nrfst77lvXed8pxrZubm6OlpaXoHY7vpV1KKe2jOe1xs2bNissvvzz+67/+q3CgmzdvjoEDB8att94aJ554YolnuHdtfcvpjgKVPcd67zvWet+y3vuW9d53rPW+Zb33Leu977TltW7TN2ipra2NlFI8/fTThbGFCxdGSikGDx5cwpkBAACUVpuOvaqqqjj99NPj2muvjYULF8aTTz4ZkyZNirPPPjs6d+5c6ukBAACUTJv+zF5ExOTJk+O6666L0aNHR2VlZYwaNSrGjx9f6mkBAACUVJuPvU6dOsW0adNi2rRppZ4KAABA2WjTb+MEAADgvbXpu3ECAADw3lzZAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYAwAAyJDYawOmTZsWU6dO3el+y5Yti3POOScGDBgQJ598cvz85z8v2r5y5cq4+OKLY+DAgXHSSSfFD3/4w7015TZp/vz58fnPfz769+8fo0aNiieeeKLUU8rWnl7rt956K/7H//gf8alPfSqOP/74+Na3vhWbNm3aM5PNwO6u95IlS+JLX/pSHH300TFo0KC4/PLL480339wnc22LNm7cGNdcc03U1tbG4MGDY9KkSdHY2Ljd/e+5554YMWJEHH300XHBBRfEyy+/XLT9V7/6VXzmM5+JAQMGxFlnnRV/+MMf9vIRtC27s96bN2+Om266KU444YTo27dv/NM//VM8+uij+3jGbdfunts749zesT293uyatWvXxlFHHRVr167d7j4ppbj55ptj6NChMXDgwBgzZkysWbOmaJ+dvbaXTKJsbd68OT355JNp4MCB6Rvf+MYO93377bfT8ccfnyZMmJCWLl2aHnroodS3b9/0xBNPpJRS2rJlS/rsZz+bvvKVr6Rnn302zZ49Ox177LHpnnvu2ReHUvaWL1+ejj766PSd73wnvfDCC2nmzJmpT58+aenSpe+5/4UXXpj69u37nn8eeuihlFJKN9544zbbzjvvvH14VOVpd9c6pZQuu+yybdZywoQJhe1f+cpX0he/+MW0aNGiNG/evFRXV5e+9a1v7YvDKXu7u95r165Nxx57bPr617+enn322TRnzpx0yimnpK997WuFfZzbxaZMmZL+8R//Mc2bNy8tWrQonXHGGWns2LHvue+jjz6a+vfvnx566KG0dOnSdOWVV6YRI0akpqamlFJK//3f/5369OmTfvzjH6cXXnghfetb30qf+tSn0muvvbYPj6i87c5633zzzWnQoEHpkUceSUuXLk3Tp09PRx55ZHr22WdTSimtW7cu9evXb5vz+amnntqHR1S+dmetly5d+p7/T6yvr08pObd3xa6u9+9///vtfg9y8sknp5Sc27vqtddeS5dffnnq2bNnamho2O5+P/zhD1NtbW2aPXt2WrJkSfryl7+c/vmf/7mwfWev7aUk9srUihUrUt++fVPPnj1Tz549dxp7d999dxo+fHjauHFjYWzChAnpkksuSSml9MQTT6R+/fqlN954o7D9lltuSaeddtpemX9b881vfjN98YtfLBr713/91+2u+8qVK9OLL75Y9Od73/teGjlyZOHF4uKLL0633npr0T4rV67c68dS7nZ3rVNK6dRTT00PPvhg0Vpu/QbhT3/6U+rZs2f605/+VNj/oYceSoMHDy7672F/tbvr/bOf/Sx96lOfSs3NzYWxOXPmpJ49e6ZVq1allJzbf+utt95Kffr0KfxgLaV3vxHr1atXWrNmzTb7n3nmmUU/iGhqakoDBgxIv/rVr1JK7/5g42+/uWtpaUkjR45MP/rRj/beQbQhu7veQ4cOTXfccUfR2FlnnZX+4z/+I6WU0jPPPJOGDBmyzev5O++8s3cPpA3Y3bV+5JFH0uc///lt1nLr67Bze8d2Z73feeedbdb5ueeeSyeeeGKaOXNmSsm5vSsmT55c+D57R7HX0tKSjj/++KILJCtXrkw9e/ZMixcvTint/LW9lLyNs0wdcsgh8cADD8TDDz8cffr02en+CxYsiCFDhsQHPvCBwlhtbW3Mnz8/It59G1f//v3joIMOKtr+pz/9KRoaGvb4/NuaBQsWxPDhw4vGjj322ML6/b2ampr4+Mc/XvhTUVERP/7xj+O73/1udO3aNSIiXn755TjuuOOK9qupqdnrx1Ludnett2zZEvX19TF8+PCitayuri48X01NTXziE58oer633norli5duvcOpI3Y3fV+4403YtCgQdG+ffvC2MEHHxwREatXr44I5/bfWrRoUUREDBkypDA2YMCAqKysjAULFhTtu379+njuueeK/j06duwY/fv3L/x7/P2/V7t27WLw4MHb/ffa3+zOejc3N8cBBxwQAwYMKBo/+OCDC+fyn//85zjyyCOLzuWPf/zj0alTp718JOVvd9Y64t3XhT59+myzllu/L3Fu79jurHenTp22Wed77703evfuHRdccEFEOLd3xejRo+Phhx+OadOm7XC/F198MdasWVN0/tbU1ESPHj1i/vz5u/TaXkpir0y1b98+evfuHb17944uXbrsdP/ly5fHoYceWjTWrVu32LBhQ6xfv3672yNim/cc74+2tz67EsIppbj66qvjtNNOi/79+0fEu++7X7lyZfz0pz+Nk046KUaMGBFTp06Nt99+e6/Mvy3Z3bVesWJFRERcf/31MWzYsDj55JNj+vTpsXHjxoiIqK+vjx49ehQ9ZmsIOrd3f71Hjx4dt99+e9HYvffeG506dYqPfexjzu2/U19fH9XV1UVx3L59++jates2a7xixYpoaWnZ7r/H+vXr44033mj1a9H+YHfWu0OHDvHkk09GbW1tYeyVV16JefPmRe/evSPi3UBZt25dfPGLX4za2to466yz4ne/+92+OZgytztrHfHuWr7yyitx+umnx3HHHRfnn39+LF68OCLCub0Ldne9/9ZTTz0Vv/jFL+Kqq64qjDm3d66mpiZ69+4dhx122A73q6+vj4qKiujevXvR+Nbzd2ev7aUm9jLR2NgYHTp0KBrr3LlzYdvOtu/v3mt9unTpsktr86tf/Sqef/75GDt2bGHsL3/5S7S0tMTBBx8ct912W0yaNCl++9vfxr/9279FSmmPz78t2d21/vOf/xxbtmyJT37yk/HDH/4wLr300rj//vvjmmuuKTxfx44dix5TWVkZHTp0cG7H+zu333jjjbjiiivi/vvvj8svvzy6dOni3P4773X+Rbz7+vr3a7z173+//9Z9d7ad3Vvvvzd79uw455xzomvXrnHRRRdFxLvfEDc0NMTXvva1+NGPfhQDBgyISy655D2vXO1vdnet//znP8dbb70VEyZMiNtvvz0+8pGPxHnnnRd//vOfndu7oLXndktLS0ybNi3OO++8oh98Orf3nMbGxmjfvn1UVBRnU1t57a4s9QT2V2+//Xa8/vrr291+xBFHRLt27Xb5+T74wQ/Ghg0bisaam5sjIuJDH/rQTrfnbmfrvb31qaqq2uHzppTilltuifPPP7/wVreIiMMPPzyeeOKJ+OhHPxoREX369ImPfOQjcfbZZ8cLL7wQvXr1eh9HU9729Fofe+yx8eSTTxau1vXu3TsqKytj3LhxcdVVV8UHP/jBeOWVV4oek1KKTZs27fTfLwd769z+5S9/GdOmTYuWlpb41re+FZ/73OciYv8+t99LVVXVNusb8d5rvPXvTU1NReMbN26Mqqqq+OAHP7jD7ezeem+1du3amDx5csyePTtGjBgR06ZNK6z15MmTo1OnTnHggQdGRES/fv3ipZdeirvuuqvoiuD+aHfX+vvf/34cdNBBhW94+/fvH5/97Gfj/vvvL/ww1Lm9fa05tyMiHn300Xj11Vfjq1/9atG4c3vPqaqqiubm5mhpaSkKvq3/Njt7bS81sVcis2bNiokTJ253+6JFi3bp7ZtbVVdXx1//+teisVdffTW6du0aHTt2jOrq6vjjH/+4zfYDDjig8HbOnO1svQ899ND3XL+dfQ7pd7/7Xbzyyitx9tlnF4136NCh8M3wVlu/CV69enXW3xDv6bXu0qXLNv8t9OrVK1JK8frrr0e3bt3iP//zP4u2v/baa9HS0rLNWy5ytDfO7Ztuuiluv/32OOOMM+Lf//3fi36QsT+f2++luro6Vq9eHRs3biy8/Wrz5s2xevXqbc6/Qw45JCLeXf+//Qn8q6++GkcddVR07tw5DjzwwHj11VeLHrcrr0X7i91Z74h338b8r//6r9HS0hK33nprfPrTny7avvXf5G8deeSR8V//9V975wDakN1d63/4h38o+ntFRUV88pOfjNWrVzu3d8HurvdWP/3pT+P0008v/ABjK+f2nlNdXR0ppVi1alXR+bpq1ao45ZRTdvraXmrexlkiX/jCF+KFF17Y7p/dCb2IiOHDh8f8+fNjy5YthbG5c+fG0KFDC9sXL15c9LmauXPnxoABAwo/9cnZztb7M5/5TMydO7foMX+7ftvzf//v/41BgwYVrjpt9f3vfz/OOuusorHFixdHu3btim4kkqM9vdZXX311fP3rXy8aW7x4cXTq1CkOPfTQGD58eKxYsaLo6t6cOXOiW7du2a91xJ5f76effjpuv/32mDx5ctx4441FoRexf5/b76W2tjZSSvH0008XxhYuXBgppRg8eHDRvgcddFD0798/5syZUxhbv359PPPMMzFs2LCIePe1+m+3b9myJebPn1/Yvr/bnfWOePf1o1OnTvHwww9vE3pNTU0xdOjQmDVrVtH4kiVL4pOf/OTeOYA2ZHfWur6+Pmpra+PZZ58tjG3ZsiWef/75wlo6t3dsd8/tiHffqvnMM8/EaaedVjTu3N6zevXqFYccckjR/0uXL18e9fX1MWzYsF16bS+pEtwBlN107rnnbnOb9KampvSXv/yl8Ps73njjjVRbW5smT56cnn/++XT77beno446qnBL2E2bNqXPfOYz6dJLL03PPfdc+tnPfpb69u2b/vM//3OfH085evnll1O/fv3SLbfckp577rl03XXXpaOPPjr99a9/TSm9u35/+ctf0ttvv114zObNm9MxxxyzzW29U0ppyZIlqU+fPunaa69NixcvTo8//ngaOXJkGjdu3D47pnK1u2s9e/bs1Lt378L+v/zlL9Nxxx2XbrrppsJznnfeeemss85KzzzzTHrkkUfSoEGDCref3t/t7npfe+21adSoUekvf/nLNn+ampqc2+9h4sSJ6ZRTTkm///3v0xNPPJFOOumkdO2116aUUlqzZk1asWJFYd+HHnooHX300emRRx5JixYtShdccEH6/Oc/n7Zs2ZJSevdW60cddVS655570uLFi9Pll1+ehg8fntavX1+SYytHu7reDQ0N6cgjj0wPPPDANufy1l8jMmbMmHTSSSelWbNmpWeffTbdeOONqU+fPunFF18s2fGVk905t88444w0atSo9Lvf/S4988wz6d///d/ToEGDCrezd27v3O6sd0rv/u63o48+Om3atGmb53Ju77r58+dv86sXVq1aVXidSCmlW2+9NR1//PHpiSeeSPPnz0+nn356Gj16dGH7zl7bS0nstQHvFXtbT8z58+cXxpYsWZK++MUvpr59+6ZTTjklzZo1q+gx9fX16fzzz0/9+vVLI0aMSPfff/8+mX9b8dvf/jZ99rOfTf369UtnnHFGWrhwYWHb8uXLU8+ePdP/+T//pzD2/PPPp549e6YFCxa85/M9+eST6cwzz0z9+vVLxx9/fLrmmmtSY2PjXj+OtmB31/rhhx9Op512Wurbt2868cQT03e/+92i/7k1NDSkMWPGpAEDBqShQ4em2267bZ8eT7nbnfX+yle+UvR7h/72z9bXG+d2sXfeeSddddVV6ZhjjknHHntsuvbaawu/W2z8+PFpxIgRRfvPmDEjDRs2LA0YMCBdcsklRd9QpPTu+T5y5MjUr1+/9KUvfanod0iy6+v9zDPPbPdcPvfcc1NKKb399tvpmmuuSccff3zq27dvOvPMM9Pvfve7kh1budmdc3vrL6c+9thj04ABA9K5555b+IHzVs7tHdvd15Kvfe1rhXP57zm3d917xd65555btLabN29O3/72t9Oxxx6bBg4cmK644oqiCwAp7fy1vVTapbQf3j4NAAAgcz6zBwAAkCGxBwAAkCGxBwAAkCGxBwAAkCGxBwAAkCGxBwAAkCGxBwAAkCGxBwD7wIIFC+LII4+MefPmlXoqAOwnxB4AAECGxB4AAECGxB4A7MRFF10UgwcPjk2bNhWNT5w4MQYNGhTNzc0xa9as+Od//ucYOHBg1NbWxoUXXhhPP/30dp9zwoQJccIJJxSNrVixIo488sh48MEHC2NNTU1x4403xgknnBD9+/ePf/mXf4nHH398zx4gAFkSewCwE6NGjYp169bF73//+8LYpk2b4te//nWccsopsXTp0rjsssvisMMOixtuuCEmTJgQb7zxRnz5y1+ON998s9Vfd8uWLfHVr341HnroobjoooviO9/5Thx22GHxta99LR599NE9cGQA5Kyy1BMAgHL36U9/OqZMmRKzZs2KoUOHRkTEU089FW+99VZ87nOfiz/+8Y9xzDHHxHe+851o165dRET8wz/8Q1xwwQXxwgsvRG1tbau+7q9+9atYsGBB/OxnP4uBAwdGRMTJJ58cb7zxRkyfPj3+6Z/+ac8cIABZcmUPAHbiwAMPjLq6upg9e3aklCIi4rHHHovu3bvHoEGD4l/+5V/innvuifXr18ezzz4bjz32WNx3330R8e7VudZ68skno1u3btGzZ89obGws/DnhhBPilVdeiYaGhj1yfADkyZU9ANgFp59+ejz66KPxhz/8Ifr16xezZ8+Oc845J9q1axfLly+PyZMnx4IFC6Jr165x+OGHx0c/+tHd/hpbQ3KrNWvWxGuvvRbHHHPMe+7/xhtvxMEHH9yq4wEgf2IPAHbBsGHD4sMf/nDMmjUrGhsb480334zPfe5zERExfvz4aGhoiMceeywOO+ywiIiYN29e/PKXv9zu8219u+ff+vvP933wgx8sfA7wvdTU1LTyaADYH4g9ANgFH/jAB+LUU0+N2bNnx9tvvx39+/ePj33sYxERsXTp0jjzzDMLoRcRO/3l6Z07d47GxsZIKRXCb+HChUX7HHvssfHEE0/EYYcdFtXV1YXxO++8M5566qmYMWPGnjo8ADIk9gBgF40aNSruvffeWLVqVYwfP74w3q9fv/jFL34Rn/jEJ+JDH/pQ/OY3v4n//u//joh3b+TSq1evbZ7rU5/6VNx9993xgx/8IM4888x4/vnn4yc/+UnRPmeeeWbce++9cdFFF8X5558fBx54YMydOzf+9//+3zFx4sSoqPDRewC2z/8lAGAXHXPMMXHooYdGS0tLnHrqqYXxG264Ifr16xff/OY34/rrr4+uXbvGz3/+8xg6dGj85Cc/ieXLl2/zXKeeemqMHj067r777jj55JPjzjvvjBtvvLFon06dOsXdd98dffv2jW9/+9sxfvz4WLx4cUybNi3OP//8vX68ALRt7dLffxocAACANs+VPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAyJPQAAgAz9fx7ReMZXQX+OAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.284212,
   "end_time": "2023-11-01T20:29:41.560489",
   "environment_variables": {},
   "exception": null,
   "input_path": "Truncated_gaussian.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Truncated_gaussian.ipynb",
   "parameters": {
    "func_name": "Truncated_gaussian",
    "positive_prior": false
   },
   "start_time": "2023-11-01T20:29:34.276277",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}