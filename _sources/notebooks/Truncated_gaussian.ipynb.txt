{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3da64d82",
   "metadata": {
    "papermill": {
     "duration": 0.004386,
     "end_time": "2022-09-28T03:11:16.801200",
     "exception": false,
     "start_time": "2022-09-28T03:11:16.796814",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Truncated gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "62632744",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:16.810251Z",
     "iopub.status.busy": "2022-09-28T03:11:16.809757Z",
     "iopub.status.idle": "2022-09-28T03:11:23.894806Z",
     "shell.execute_reply": "2022-09-28T03:11:23.891733Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 7.09324,
     "end_time": "2022-09-28T03:11:23.898081",
     "exception": false,
     "start_time": "2022-09-28T03:11:16.804841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f6baf5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:23.911083Z",
     "iopub.status.busy": "2022-09-28T03:11:23.910652Z",
     "iopub.status.idle": "2022-09-28T03:11:23.916960Z",
     "shell.execute_reply": "2022-09-28T03:11:23.915545Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014166,
     "end_time": "2022-09-28T03:11:23.920002",
     "exception": false,
     "start_time": "2022-09-28T03:11:23.905836",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e0546029",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:23.929439Z",
     "iopub.status.busy": "2022-09-28T03:11:23.928602Z",
     "iopub.status.idle": "2022-09-28T03:11:23.935126Z",
     "shell.execute_reply": "2022-09-28T03:11:23.932626Z"
    },
    "papermill": {
     "duration": 0.015186,
     "end_time": "2022-09-28T03:11:23.938311",
     "exception": false,
     "start_time": "2022-09-28T03:11:23.923125",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Truncated_gaussian\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d1f85cdb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:23.947744Z",
     "iopub.status.busy": "2022-09-28T03:11:23.946562Z",
     "iopub.status.idle": "2022-09-28T03:11:23.956351Z",
     "shell.execute_reply": "2022-09-28T03:11:23.954793Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01846,
     "end_time": "2022-09-28T03:11:23.959894",
     "exception": false,
     "start_time": "2022-09-28T03:11:23.941434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a13256c6",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003152,
     "end_time": "2022-09-28T03:11:23.966108",
     "exception": false,
     "start_time": "2022-09-28T03:11:23.962956",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "61776af7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:23.976764Z",
     "iopub.status.busy": "2022-09-28T03:11:23.975304Z",
     "iopub.status.idle": "2022-09-28T03:11:23.994384Z",
     "shell.execute_reply": "2022-09-28T03:11:23.992157Z"
    },
    "papermill": {
     "duration": 0.027977,
     "end_time": "2022-09-28T03:11:23.997522",
     "exception": false,
     "start_time": "2022-09-28T03:11:23.969545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A  truncated Gaussian function defined on the interval between the lower_bound (a) and upper_bound (b)</li>\n",
       "\n",
       "<li>formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma} \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma} \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>mu: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Central value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>sigma: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: standard deviation</li>\n",
       "\n",
       "<li>min_value: 1e-12</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: lower bound of gaussian, setting to -np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of gaussian  setting to np.inf results in half normal distribution</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A  truncated Gaussian function defined on the interval between the lower_bound\n",
       "    * (a) and upper_bound (b)\n",
       "  * formula: $\\begin{split}f(x;\\mu,\\sigma,a,b)=\\frac{\\frac{1}{\\sigma} \\phi\\left( \\frac{x-\\mu}{\\sigma}\n",
       "    * \\right)}{\\Phi\\left( \\frac{b-\\mu}{\\sigma} \\right) - \\Phi\\left( \\frac{a-\\mu}{\\sigma}\n",
       "    * \\right)}\\\\\\phi\\left(z\\right)=\\frac{1}{\\sqrt{2 \\pi}}\\exp\\left(-\\frac{1}{2}z^2\\right)\\\\\\Phi\\left(z\\right)=\\frac{1}{2}\\left(1+erf\\left(\\frac{z}{\\sqrt(2)}\\right)\\right)\\end{split}$\n",
       "  * parameters:\n",
       "    * F:\n",
       "      * value: 1.0\n",
       "      * desc: Integral between -inf and +inf. Fix this to 1 to obtain a Normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * mu:\n",
       "      * value: 0.0\n",
       "      * desc: Central value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * sigma:\n",
       "      * value: 1.0\n",
       "      * desc: standard deviation\n",
       "      * min_value: 1.0e-12\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * lower_bound:\n",
       "      * value: -1.0\n",
       "      * desc: lower bound of gaussian, setting to -np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of gaussian  setting to np.inf results in half normal distribution\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "830a2a74",
   "metadata": {
    "papermill": {
     "duration": 0.00377,
     "end_time": "2022-09-28T03:11:24.004908",
     "exception": false,
     "start_time": "2022-09-28T03:11:24.001138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ebf1586f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:24.014164Z",
     "iopub.status.busy": "2022-09-28T03:11:24.013729Z",
     "iopub.status.idle": "2022-09-28T03:11:25.031586Z",
     "shell.execute_reply": "2022-09-28T03:11:24.981906Z"
    },
    "papermill": {
     "duration": 1.111226,
     "end_time": "2022-09-28T03:11:25.119619",
     "exception": false,
     "start_time": "2022-09-28T03:11:24.008393",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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izlz5sQvfvGLaGtry7s8BpA1a9bE8uXL4/LLL4/p06fHlClT4qqrrooXX3wxbrvttrzLYwCaN29eTJ48Oe8y6CPCHTVr27ZtMWfOnJg3b17sv//+eZfDANXe3h7Tpk0ruTZq1Kh44YUXcqqIgWDFihURETFjxoxd16ZOnRr19fWxbNmyvMpiAHr++edjzJgxJb+MjxgxIhobG6O1tTXHyhiIbrrppmhtbY3//b//d96l0Efq8y4A+srnPve5OPLII+M973lP3HjjjXmXwwB17bXXlny8ffv2+OEPfxhHHXVUThUxEKxduzZaWlqioaFh17WGhoYYNWqUzh1lefOb3xz//d//XXLtpz/9aWzatEn3hbI888wz8bnPfS6+9rWvxaZNm/Iuhz4i3FGTli1bFrfeemvccssteZdCDXn00Ufj4osvjjVr1thzxytqb2+P4cOH97je1NRkqAqpdXZ2xg033BD//u//HqecckpJZxheSbFYjLlz58bZZ58dkydPtoKghgl3DEibN2/udVlcd3d3zJkzJy655JIYNWpUP1fGQPNKz1JExIQJE6Krqyv+/d//PW644YYYN25cfOtb34pjjjmmH6tkoGlubo7t27f3uL5jx45obm7OoSIGuoceeiguvvjiePzxx+NDH/pQzJo1K++SGEBuvPHG2LhxY5x//vl5l0IfE+4YkH75y1/GnDlzXvGe2bNnx+zZsyMiYufOnXHPPffE4sWLY+nSpbHvvvv2R5kMAK/2LN1zzz3xd3/3d3HffffFhRdeGH/9139dstQO9qSlpSVaW1ujo6Nj1/PS2dkZra2tMXbs2JyrY6D51a9+FbNmzYrJkyfHzTffHJMmTcq7JAaY3/zmN/HYY4/FG97whoj4QycvIuJtb3tbnH322bt+X2LgKxRf/teFGtHR0RHr1q0ruTZ79uwYP358/O3f/m0cdthhUVdnlhB750tf+lJ8+ctfjq9//esxderUvMthgNi0aVOccMIJcd1118UJJ5wQEX84VuO8886Lu+66K5qamnKukIFiy5Yt8Y53vCNOOOGEuOqqq6K+3vvylO/555+PLVu27Pr4gQceiNmzZ8f3vve9OOSQQ2L06NE5VkeW/C8ENaehoSEOP/zwkmuNjY3R3Nzc4zq8mltvvTVOP/30GDlyZDz11FMlrx166KE5VUW1a25ujpkzZ8b8+fPj8ssvj61bt8anP/3pOOusswQ7yrJ06dJob2+Pj3zkI/HMM8+UvLbffvvFyJEj8ymMAWXMmDExZsyYXR+vX78+IiLGjRtnC0uNEe4AXsG6devi0UcfjZtuuqnHa6tWrcqhIgaKSy+9NBYsWBDnn39+1NfXx+mnn27pE2Vbu3Zt7Ny5M/78z/+8x2t///d/Hx/72MdyqAqoVpZlAgAA1AAbjwAAAGqAcAcAAFADhDsAAIAaINwBAADUAOEOAACgBgh3AAAANUC4AwAAqAHCHQAAQA0Q7gAAAGqAcAcAAFADhDsAyNi3v/3tOPLII+OGG27YdW316tXx+te/PubMmZNjZQDUskKxWCzmXQQA1JJisRjnnntuPPDAA3HLLbfEa1/72nj/+98fzz33XNxyyy2x77775l0iADVIuAOAPrB27dqYOXNmTJs2LU466aRYsGBBXH/99fHWt74179IAqFHCHQD0ka9//evxL//yL1FfXx9nnHFGLFiwIO+SAKhh9twBQB953/veF8OHD4/Ozs44++yz8y4HgBon3AFAH/nc5z4X3d3dse+++8bChQvDYhkA+pJwBwB9YNmyZfGd73wnPvrRj8ZFF10Uy5YtixtvvDHvsgCoYfbcAUDGtm7dGjNnzowhQ4bET37ykxg6dGicc8458dBDD8VPfvKTOPjgg/MuEYAapHMHABn73Oc+F+vWrYtPf/rT0dDQEIVCIebPnx9dXV0xb948yzMB6BM6dwAAADVA5w4AAKAGCHcAAAA1QLgDAACoAcIdAABADRDuAAAAaoBwBwAAUAOEOwAAgBog3AEAANQA4Q4AAKAGCHcAAAA1QLgDAACoAcIdAABADfj/Ae/QVhISMyTQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3060fa5",
   "metadata": {
    "papermill": {
     "duration": 0.00776,
     "end_time": "2022-09-28T03:11:25.132399",
     "exception": false,
     "start_time": "2022-09-28T03:11:25.124639",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b0fa4ad9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:11:25.146856Z",
     "iopub.status.busy": "2022-09-28T03:11:25.145020Z",
     "iopub.status.idle": "2022-09-28T03:11:26.187868Z",
     "shell.execute_reply": "2022-09-28T03:11:26.186581Z"
    },
    "papermill": {
     "duration": 1.053277,
     "end_time": "2022-09-28T03:11:26.191090",
     "exception": false,
     "start_time": "2022-09-28T03:11:25.137813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3sAAAMKCAYAAAA8s12HAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA9xElEQVR4nO3dfXRV5Z3o8R8xRgg2tVjDNKCu0hZBCIgFIwIqYWq1FvuiM8qq41utTV2M9Kojb0UoL2pfxaodtWVoi2LVe6t3VrXXgVqtgFAcpoIKtlprgIpCUJEICZB9/3BxVo/IWwTOycPnsxZ/8Ox9Tp79sD3mm33OTrssy7IAAAAgKSWFngAAAAD7ntgDAABIkNgDAABIkNgDAABIkNgDAABIkNgDAABIkNgDAABIkNgDAABIkNgDAABIUNHE3vr16+P444+P9evXv+/2hx56KI477ri87c3NzTFx4sSoqamJAQMGxLhx46KxsfFATRkAAKBolRZ6AhERr7/+enznO9+Jbdu2ve/21157LaZNm7bD+I033hgLFiyI6dOnR/v27WPKlCkxfvz4mD59+n6Z53PPPRfNzc1RUlIShx122H75GgAAALvS1NQULS0tUVZWFr169drpfgWPveuvvz7uu+++Xe4zfvz46NmzZyxatCg3tmHDhnjggQfi9ttvj4EDB0ZExNixY+Oiiy6KhoaGOPLII/f5XJubm6OlpSVaWlpi69at+/z5AQAA9lRzc/Mutxc89urq6mLEiBHx7LPPxre+9a0dtt9///2xdu3auO666/Jib8mSJRERudCLiOjbt2+UlpbGokWL4nOf+9w+n2tJSUm0tLRESUlJdOjQYZ8/PwAAwO5s2rQp1yW7UvDYq6qqiqqqqtiwYcMO21avXh0/+MEP4mc/+9kO2+vr66OysjLKyspyY2VlZdGpU6doaGho9XwGDx68022jRo2Kbt26RYcOHaJHjx6t/hoAAACttWLFimhsbNztR8uK5gYt75VlWYwbNy4uvPDC6Nmz5w7bGxsbo3379juMl5eXu0kLAABw0Cv4lb2dmT17drz55ptRV1f3vtsrKipi8+bNO4w3NTVFRUVFq7/uvHnzdrpte0EDAAAUu6KNvfnz58eLL74YJ554YkS8e6UvIuK0006LCy+8ME488cRYu3ZtNDc3597KuXXr1li7dm106dKlYPMGAAAoBkUbexMnToyNGzfm/r5s2bIYPXp0zJo1K44++ug49NBDI8uyePrpp+OUU06JiIjFixdHlmUxYMCAQk0bAACgKBRt7HXu3Dk6d+6c+/u6desiIuKYY46JTp06RUTEOeecE1OmTInJkyfHO++8E5MmTYoLLrggysvLCzJnAACAYlG0sbcnJkyYENOmTYu6urooLS2N4cOHx+jRows9LQAAgIJrl23/MBy7tf0GLR07dvSrFwAAgILY0y4p2l+9AAAAQOuJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASVFnoCAHCwqV01s1WPe6zrpft4JgCkzJU9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABJUWegIA7FrtqpmtetxjXS/dxzPhYOUcBGibXNkDAABIkNgDAABIkNgDAABIkNgDAABIkBu0AEArtPamJQBwoLiyBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkCCxBwAAkKDSQk8AAD6o2lUzW/W4x7peuo9nAgDFw5U9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABIk9AACABJUWegIAQJpqV81s9WMf63rpPpwJwMHJlT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAEiT0AAIAElRZ6AtutX78+Bg8eHPPmzYtOnTpFRERDQ0NMmzYtnnzyyWhqaoo+ffrE+PHjo2fPnhERkWVZ/OhHP4r7778/3nnnnRg0aFBMmjQpPvrRjxbyUABgv6hdNbPVj32s66X7cCYAtAVF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RUVFVFRURFNTU7S0tOQF3/btrTVv3rydbluxYoWQBAAA2oSCf2ZvZyorK2Pt2rXR3NycG9u6dWusXbs2unTpEpWVlZFlWaxZsybvcWvWrImqqqoDPV0AAICiUrSxV1NTE1mWxdNPP50bW7x4cWRZFgMGDIgePXrEUUcdFfPnz89tX7lyZdTX1+/yc3cAAAAHg6J+G+c555wTU6ZMicmTJ8c777wTkyZNigsuuCDKy8sjImLEiBExffr0qKysjPbt28cNN9wQtbW1ceyxxxZ49gAAAIVVtLEXETFhwoSYNm1a1NXVRWlpaQwfPjxGjx6d215XVxebNm2K6667LrZs2RK1tbUxadKkwk0YAACgSLTLsiwr9CTaiu03aOnYsWP06NGj0NPhAGhrd9R8rOulhZ7CXmlr6wtA2/t/DaRoT7ukaD+zBwAAQOuJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASVFnoCwL5TqF9S7hfsAgAUH1f2AAAAEiT2AAAAEiT2AAAAEiT2AAAAEuQGLQAA7LHW3gzsg9zM64PcgMxNxDiYubIHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQILEHAACQoNJCTwAAAHhX7aqZrXrcY10v3cczIQWu7AEAACRI7AEAACRI7AEAACRI7AEAACTIDVoAAEiWG55wMHNlDwAAIEFiDwAAIEFiDwAAIEFiDwAAIEFu0AIAAPtQa28KA/uaK3sAAAAJEnsAAAAJEnsAAAAJEnsAAAAJEnsAAAAJEnsAAAAJEnsAAAAJEnsAAAAJEnsAAAAJKi30BAAAgINL7aqZrX7sY10v3YczSZsrewAAAAkSewAAAAkSewAAAAkSewAAAAlygxYAAHiPD3IDkbbGzVLS5coeAABAgsQeAABAgsQeAABAgsQeAABAgtygBQCA/e5guuEJFAtX9gAAABIk9gAAABIk9gAAABIk9gAAABIk9gAAABIk9gAAABIk9gAAABIk9gAAABIk9gAAABJUWugJwIFQu2pmoacAAAAHlCt7AAAACRJ7AAAACRJ7AAAACRJ7AAAACXKDFg6o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WVFdXR033HBDbNq0KV566aWYOXNmXHXVVTFs2LDo3bt3TJ48OZ555plYtmxZoacOAABQUEUde88++2y8+eabcfbZZ+fGOnXqFE899VQccsghsW7duhgyZEhuW1VVVXTt2jUWLlxYiOkCAAAUjaKOvT//+c9x+OGHxxNPPBFnnXVW1NTUxBVXXBEvvvhi1NfXR0lJSXTp0iXvMZ07d46GhoYCzRgAAKA4lBZ6Arvy1ltvRVNTU/zkJz+JsWPHRnl5efz0pz+NSy65JK677rooKyuLkpL8Xi0vL4/GxsZWf83BgwfvdNuoUaOiW7durX5uAACAA6WoY6+lpSW2bNkSN910U/Tq1SsiIrp3754LsqampmhpackLvqampqioqCjIfAEAAIpFUcfekUceGRERn/jEJ3JjFRUVUVlZGa+//npkWRZr1qyJqqqq3PY1a9bEmWee2eqvOW/evJ1uW7FixQe6aggAAHCgFPVn9k444YSIiHj++edzY2+99Va89tpr8clPfjKOOuqomD9/fm7bypUro76+fpdvxQQAADgYFPWVvU996lNx+umnx7hx42LcuHFxxBFHxI9//OPo1q1bnHrqqTFixIiYPn16VFZWRvv27eOGG26I2traOPbYYws9dQAAgIIq6tiLiLj55pvjpptuimuuuSa2bt0aJ598ctxxxx1RUlISdXV1sWnTprjuuutiy5YtUVtbG5MmTSr0lAEAAAquXZZlWaEn0VZs/8xex44do0ePHoWeTkRE1K6aWegpAABA0h7remmhp5BnT7ukqD+zBwAAQOuIPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgASJPQAAgAS1qdh76KGH4rjjjov169dHRERzc3NMnDgxampqYsCAATFu3LhobGws8CwBAAAKr83E3muvvRbTpk3LG7vxxhtjwYIFMX369LjrrrtixYoVMX78+ALNEAAAoHi0mdgbP3589OzZM/f3DRs2xAMPPBDf+ta3YuDAgdGvX78YO3ZsPProo9HQ0FDAmQIAABRem4i9+++/P9auXRtf//rXc2NLliyJiIiBAwfmxvr27RulpaWxaNGiAz5HAACAYlJa6AnszurVq+MHP/hB/OxnP4sNGzbkxuvr66OysjLKyspyY2VlZdGpU6cPdGVv8ODBO902atSo6NatW6ufGwAA4EAp6it7WZbFuHHj4sILL8x7C2dERGNjY7Rv336Hx5SXl7tJCwAAcNAr6it7s2fPjjfffDPq6up22FZRURGbN2/eYbypqSkqKipa/TXnzZu3020rVqwQkgAAQJtQ1LE3f/78ePHFF+PEE0+MiHev9EVEnHbaafGxj30s1q5dG83Nzbm3cm7dujXWrl0bXbp0KdicAQAAikFRx97EiRNj48aNub8vW7YsRo8eHbNmzYqjjz46TjvttHj66afjlFNOiYiIxYsXR5ZlMWDAgEJNGQAAoCgUdex17tw5OnfunPv7unXrIiLimGOOiU6dOsU555wTU6ZMicmTJ8c777wTkyZNigsuuCDKy8sLNWUAAICiUNSxtzsTJkyIadOmRV1dXZSWlsbw4cNj9OjRhZ4WAABAwbXLtn8Qjt3afoOWjh07Ro8ePQo9nYiIqF01s9BTAACApD3W9dJCTyHPnnZJUf/qBQAAAFpo6GOvoaEhrr766hgwYED06dMnLrzwwli+fHlERGRZFrfccksMGjQo+vXrFyNHjox169YVeMYAAACFV/SxN2rU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zL+t+c53vpOdd955eWP/8i//stN1X716dfbiiy/m/fnRj36UDRs2LPeCcfnll2e33XZb3j6rV6/e78fSFuztemdZlp111lnZAw88kLee279J+POf/5x17949+/Of/5zb/8EHH8wGDBiQ99/EwWhv1/qXv/xl9ulPfzpramrKjc2bNy/r3r17tmbNmizLnNt/76233sp69eqV+8Falr37jViPHj2ydevW7bD/ueeem/dDiE2bNmV9+/bNfvOb32RZ9u4PNf7+m7uWlpZs2LBh2U9/+tP9dxBtyN6u96BBg7I777wzb+z888/PvvWtb2VZlmXPPPNMNnDgwB1ez9955539eyBtwN6u9cMPP5x98Ytf3GEtt78GO7d3bW/W+5133tlhnZ977rnstNNOy2bOnJllmXN7dyZMmJD7HntXsdfS0pKdcsopeRdHVq9enXXv3j1bunRplmW7f10vNG/jLFJHHXVU3H///fHQQw9Fr169drv/okWLYuDAgXHooYfmxmpqamLhwoUR8e7buPr06RNHHHFE3vY///nP0dDQsM/n39YsWrQohgwZkjd20kkn5dbvvaqqquITn/hE7k9JSUn87Gc/ix/+8IfRqVOniIh4+eWX4+STT87br6qqar8fS1uwt+u9bdu2qK+vjyFDhuStZ2VlZe75qqqq4pOf/GTe87311luxfPny/XcgbcDervUbb7wR/fv3j7KystzYkUceGRERa9eujQjn9t9bsmRJREQMHDgwN9a3b98oLS2NRYsW5e27cePGeO655/L+Pdq3bx99+vTJ/Xu899+rXbt2MWDAgJ3+ex1s9ma9m5qa4pBDDom+ffvmjR955JG5c/kvf/lLHHfccXnn8ic+8Yno0KHDfj6S4rc3ax3x7utCr169dljL7d+XOLd3bW/Wu0OHDjus8+zZs6Nnz55xySWXRIRze3fq6urioYceiqlTp+5yvxdffDHWrVuXd+5WVVVF165dY+HChXv0ul5oYq9IlZWVRc+ePaNnz57RsWPH3e6/cuXKOProo/PGOnfuHJs3b46NGzfudHtE7PC+44PRztZnT0I4y7K4/vrr4+yzz44+ffpExLvvu1+9enX84he/iNNPPz2GDh0akydPjrfffnu/zL+t2dv1XrVqVURE3HDDDTF48OA444wzYvr06dHc3BwREfX19dG1a9e8x2wPwYP9/N7bta6rq4s77rgjb2z27NnRoUOH+PjHP+7cfo/6+vqorKzMi+OysrLo1KnTDmu8atWqaGlp2em/x8aNG+ONN95o9WvRwWBv1vuwww6LJ554ImpqanJjr7zySixYsCB69uwZEe8GyoYNG+K8886LmpqaOP/88+PJJ588MAdT5PZmrSPeXctXXnklzjnnnDj55JPj4osvjqVLl0ZEOLf3wN6u99976qmn4j//8z9j/PjxuTHn9q5VVVVFz54945hjjtnlfvX19VFSUhJdunTJG99+7u7udb0YiL1ENDY2xmGHHZY3Vl5entu2u+0Hu/dbn44dO+7R2vzmN7+J559/PkaNGpUb++tf/xotLS1x5JFHxu233x7jxo2L3//+9/Gv//qvkWXZPp9/W7O36/2Xv/wltm3bFp/61KfiJz/5SVx55ZVx3333xcSJE3PP1759+7zHlJaWxmGHHXbQn98f5Nx+44034pprron77rsvrr766ujYsaNz+z3e79yLePf19b1rvP3v791/+767287erfd7zZ07N0aMGBGdOnWKyy67LCLe/Ya4oaEhvvGNb8RPf/rT6Nu3b1xxxRXve+XqYLO3a/2Xv/wl3nrrrRgzZkzccccd8dGPfjQuuuii+Mtf/uLc3gOtPbdbWlpi6tSpcdFFF+X90NO5vW80NjZGWVlZlJTkJ1Nbet0uLfQEDlZvv/12vP766zvd3q1bt2jXrt0eP9+HPvSh2Lx5c95YU1NTRER8+MMf3u321O1uvXe2PhUVFbt83izL4tZbb42LL74491a3iIhjjz02Hn/88fjYxz4WERG9evWKj370o3HBBRfECy+8ED169PgAR1P89vV6n3TSSfHEE0/krtb17NkzSktL49prr43x48fHhz70oXjllVfyHpNlWWzZsmW3/4Zt3f46t3/961/H1KlTo6WlJb773e/GF77whYhwbr9XRUXFDusb8f5rvP3vmzZtyhtvbm6OioqK+NCHPrTL7ezdem+3fv36mDBhQsydOzeGDh0aU6dOza31hAkTokOHDnH44YdHRER1dXW89NJLMWvWrLwrggejvV3rH//4x3HEEUfkvunt06dPfP7zn4/77rsv98NQ5/bOtebcjoh45JFH4tVXX42vf/3reePO7X2joqIimpqaoqWlJS/4tv+77O51vRiIvQKZM2dOjB07dqfblyxZskdv39yusrIy/va3v+WNvfrqq9GpU6do3759VFZWxp/+9Kcdth9yyCG5t3OmbHfrffTRR7/v+u3uc0hPPvlkvPLKK3HBBRfkjR922GG5b4a32/5N8Nq1a5P/hnhfr3fHjh13+O+hR48ekWVZvP7669G5c+f4r//6r7ztr732WrS0tOzw1ovU7I9z++abb4477rgjvvSlL8W//du/5f0g42A/t9+rsrIy1q5dG83Nzbm3X23dujXWrl27w7l31FFHRcS76//3P4F/9dVX4/jjj4/y8vI4/PDD49VXX8173J68Fh0s9ma9I959G/O//Mu/REtLS9x2223xmc98Jm/79n+Tv3fcccfFf//3f++fA2hD9nat/+Ef/iHv7yUlJfGpT30q1q5d69zeA3u73tv94he/iHPOOSf3A4ztnNv7RmVlZWRZFmvWrMk7V9esWRNnnnnmbl/Xi4G3cRbIl7/85XjhhRd2+mdvQi8iYsiQIbFw4cLYtm1bbmz+/PkxaNCg3PalS5fmfa5m/vz50bdv39xPfVK2u/X+7Gc/G/Pnz897zN+v38783//7f6N///65K07b/fjHP47zzz8/b2zp0qXRrl27vJuIpGpfr/f1118f3/zmN/PGli5dGh06dIijjz46hgwZEqtWrcq7ujdv3rzo3Llz8uu9r9f66aefjjvuuCMmTJgQN910U17oRTi336umpiayLIunn346N7Z48eLIsiwGDBiQt+8RRxwRffr0iXnz5uXGNm7cGM8880wMHjw4It59rf777du2bYuFCxfmth/s9ma9I9597ejQoUM89NBDO4Tepk2bYtCgQTFnzpy88WXLlsWnPvWp/XMAbcjerHV9fX3U1NTEs88+mxvbtm1bPP/887m1dG7v2t6e2xHvvlXzmWeeibPPPjtv3Lm97/To0SOOOuqovP+Prly5Murr62Pw4MF79LpecAW4Ayh76cILL9zhNumbNm3K/vrXv+Z+h8cbb7yR1dTUZBMmTMief/757I477siOP/743G1ht2zZkn32s5/Nrrzyyuy5557LfvnLX2a9e/fO/uu//uuAH08xevnll7Pq6urs1ltvzZ577rls2rRp2QknnJD97W9/y7Ls3fX761//mr399tu5x2zdujU78cQTd7itd5Zl2bJly7JevXplU6ZMyZYuXZo99thj2bBhw7Jrr732gB1TMdvb9Z47d27Ws2fP3P6//vWvs5NPPjm7+eabc8950UUXZeeff372zDPPZA8//HDWv3//3C2oD2Z7u9ZTpkzJhg8fnv31r3/d4c+mTZuc2+9j7Nix2Zlnnpn94Q9/yB5//PHs9NNPz6ZMmZJlWZatW7cuW7VqVW7fBx98MDvhhBOyhx9+OFuyZEl2ySWXZF/84hezbdu2ZVn27q3Wjz/++Oyee+7Jli5dml199dXZkCFDso0bNxbk2IrRnq53Q0NDdtxxx2X333//Dufy9l8jMnLkyOz000/P5syZkz377LPZTTfdlPXq1St78cUXC3Z8xWRvzu0vfelL2fDhw7Mnn3wye+aZZ7J/+7d/y/r375+7pb1ze/f2Zr2z7N3f/3bCCSdkW7Zs2eG5nNt7ZuHChTv86oU1a9bkXiOyLMtuu+227JRTTskef/zxbOHChdk555yT1dXV5bbv7nW90MReG/B+sbf95Fy4cGFubNmyZdl5552X9e7dOzvzzDOzOXPm5D2mvr4+u/jii7Pq6ups6NCh2X333XdA5t9W/P73v88+//nPZ9XV1dmXvvSlbPHixbltK1euzLp37579n//zf3Jjzz//fNa9e/ds0aJF7/t8TzzxRHbuuedm1dXV2SmnnJJNnDgxa2xs3O/H0Vbs7Xo/9NBD2dlnn5317t07O+2007If/vCHef+Da2hoyEaOHJn17ds3GzRoUHb77bcf0OMpZnuz1l/72tfyfvfQ3//Z/nrj3M73zjvvZOPHj89OPPHE7KSTTsqmTJmS+91io0ePzoYOHZq3/4wZM7LBgwdnffv2za644oq8byqy7N1zfdiwYVl1dXX2la98Je/3R7Ln6/3MM8/s9Fy+8MILsyzLsrfffjubOHFidsopp2S9e/fOzj333OzJJ58s2LEVm705t7f/guqTTjop69u3b3bhhRfmfuC8nXN71/b2teQb3/hG7lx+L+f2nnm/2Lvwwgvz1nXr1q3Z9773veykk07K+vXrl11zzTV5P/zPst2/rhdSuyw7CG+fBgAAkDif2QMAAEiQ2AMAAEiQ2AMAAEiQ2AMAAEiQ2AMAAEiQ2AMAAEiQ2AMAAEiQ2AOAA2DRokVx3HHHxYIFCwo9FQAOEmIPAAAgQWIPAAAgQWIPAHbjsssuiwEDBsSWLVvyxseOHRv9+/ePpqammDNnTvzTP/1T9OvXL2pqauLSSy+Np59+eqfPOWbMmDj11FPzxlatWhXHHXdcPPDAA7mxTZs2xU033RSnnnpq9OnTJ/75n/85HnvssX17gAAkSewBwG4MHz48NmzYEH/4wx9yY1u2bInf/va3ceaZZ8by5cvjqquuimOOOSZuvPHGGDNmTLzxxhvx1a9+Nd58881Wf91t27bF17/+9XjwwQfjsssui+9///txzDHHxDe+8Y145JFH9sGRAZCy0kJPAACK3Wc+85mYNGlSzJkzJwYNGhQREU899VS89dZb8YUvfCH+9Kc/xYknnhjf//73o127dhER8Q//8A9xySWXxAsvvBA1NTWt+rq/+c1vYtGiRfHLX/4y+vXrFxERZ5xxRrzxxhsxffr0+NznPrdvDhCAJLmyBwC7cfjhh0dtbW3MnTs3siyLiIhHH300unTpEv37949//ud/jnvuuSc2btwYzz77bDz66KNx7733RsS7V+da64knnojOnTtH9+7do7GxMffn1FNPjVdeeSUaGhr2yfEBkCZX9gBgD5xzzjnxyCOPxB//+Meorq6OuXPnxogRI6Jdu3axcuXKmDBhQixatCg6deoUxx57bHzsYx/b66+xPSS3W7duXbz22mtx4oknvu/+b7zxRhx55JGtOh4A0if2AGAPDB48OD7ykY/EnDlzorGxMd588834whe+EBERo0ePjoaGhnj00UfjmGOOiYiIBQsWxK9//eudPt/2t3v+vfd+vu9DH/pQ7nOA76eqqqqVRwPAwUDsAcAeOPTQQ+Oss86KuXPnxttvvx19+vSJj3/84xERsXz58jj33HNzoRcRu/3l6eXl5dHY2BhZluXCb/HixXn7nHTSSfH444/HMcccE5WVlbnxu+66K5566qmYMWPGvjo8ABIk9gBgDw0fPjxmz54da9asidGjR+fGq6ur4z//8z/jk5/8ZHz4wx+O3/3ud/E///M/EfHujVx69Oixw3N9+tOfjrvvvjv+/d//Pc4999x4/vnn4+c//3nePueee27Mnj07Lrvssrj44ovj8MMPj/nz58f//t//O8aOHRslJT56D8DO+b8EAOyhE088MY4++uhoaWmJs846Kzd+4403RnV1dXznO9+JG264ITp16hS/+tWvYtCgQfHzn/88Vq5cucNznXXWWVFXVxd33313nHHGGXHXXXfFTTfdlLdPhw4d4u67747evXvH9773vRg9enQsXbo0pk6dGhdffPF+P14A2rZ22Xs/DQ4AAECb58oeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgsQeAABAgv4/HVRbPzFVO/AAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.770265,
   "end_time": "2022-09-28T03:11:27.375926",
   "environment_variables": {},
   "exception": null,
   "input_path": "Truncated_gaussian.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Truncated_gaussian.ipynb",
   "parameters": {
    "func_name": "Truncated_gaussian",
    "positive_prior": false
   },
   "start_time": "2022-09-28T03:11:15.605661",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}