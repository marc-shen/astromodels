{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6672d0a4",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88285c29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:24.474722Z",
     "iopub.status.busy": "2022-09-28T03:02:24.474248Z",
     "iopub.status.idle": "2022-09-28T03:02:27.917082Z",
     "shell.execute_reply": "2022-09-28T03:02:27.916047Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2647422f",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "890e36c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:27.922993Z",
     "iopub.status.busy": "2022-09-28T03:02:27.922201Z",
     "iopub.status.idle": "2022-09-28T03:02:27.929465Z",
     "shell.execute_reply": "2022-09-28T03:02:27.928592Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d41ea8b",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1926d94c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:27.934382Z",
     "iopub.status.busy": "2022-09-28T03:02:27.934014Z",
     "iopub.status.idle": "2022-09-28T03:02:27.945722Z",
     "shell.execute_reply": "2022-09-28T03:02:27.944782Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (cm2 keV s)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (cm2 keV s)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a934ab4a",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0df8202",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:27.950334Z",
     "iopub.status.busy": "2022-09-28T03:02:27.950005Z",
     "iopub.status.idle": "2022-09-28T03:02:27.958492Z",
     "shell.execute_reply": "2022-09-28T03:02:27.957408Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "232463d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:27.962902Z",
     "iopub.status.busy": "2022-09-28T03:02:27.962566Z",
     "iopub.status.idle": "2022-09-28T03:02:28.709880Z",
     "shell.execute_reply": "2022-09-28T03:02:28.708862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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+9V//NXfccUduvvnmvPOd7+zpWQEAAGhHt+Lui1/8Yvbbb79cf/31GTBgQPPy5cuX56Mf/Wi+8IUv5Gtf+1qPDQkAAEDHuvx77pJk4cKFOfXUU1uEXZIMHjw4f/d3f5eHHnqoR4YDAACgc7oVd5VKJWvXrm3za+vXr09TU9NmDQUAAEDXdCvuDjzwwNxyyy1ZvXp1i+WVSiW333579t577x4ZDgAAgM7p1s/c/cM//ENOP/30HHfccXnf+96XnXbaKcuWLctPf/rTPPnkk/n617/e03MCAADQgW7F3ejRo3PTTTfln/7pn3LDDTc0f0Rz1KhR+drXvpYjjjiiR4cEAACgY93+PXejR4/Ov/zLv2T16tV56aWXMmjQoGy77bY9ORsAAACd1Om4mz9/fvbdd99sv/32mT9//ibXHz9+/GYNBgAAQOd1Ou7OPvvs/PM//3MmTJiQs88+OzU1NalUKi3W2bCspqYmjz76aI8PCwAAQNs6HXff/va3M2rUqOb/BwAAoO/odNwdfPDBSZI1a9bk+eefz/jx4zN8+PBeGwwAAIDO6/Lvudt6660zc+bMLFy4sDfmAQAAoBu69UvMTz/99Nx0001ZuXJlT88DAABAN3TrVyG88sor+eMf/5ijjz467373u7PNNtu0+HpNTU0++9nP9siAAAAAbFq34u5nP/tZBg0alCT57W9/2+rrNTU1mzcVAAAAXdLluHvllVfy5S9/OW9/+9vztre9rTdmAgAAoIs6HXcrV67MZZddln/7t39rXnbYYYflyiuvzE477dQrwwEAANA5nY67r3zlK/nxj3+cE088MaNHj84LL7yQ7373u/n4xz+euXPn9uKIAAAAbEqn4+7OO+/M2WefnalTpzYv23fffXPBBRfkj3/8Y/7yL/+yN+YDAACgEzr9qxCef/75jB07tsWyQw45JJVKJS+99FKPDwYAAEDndTruKpVKamtrWywbOHBg89cAAAConm79EnMAAAD6li7FXXu/v87vtQMAAKiuLv2eu4985CNtLv/gBz/Y4u81NTX53e9+1/2pAAAA6JJOx91JJ53Um3MAAACwGToddzNnzuzNOQAAANgMTqgCAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQgKrH3erVq3PZZZdl3LhxGTt2bKZPn57GxsZNXu7JJ5/MmDFj8tOf/nQLTAkAANC3VT3uZs6cmfvvvz+zZs3KnDlzsmjRolx88cUdXmbdunWZNm1ampqattCUAAAAfVv/au58+fLlufXWWzN79uyMHz8+SXLRRRfljDPOSENDQ4YOHdrm5a6//voMHDhwS44KAADQp1X1nbuHH344SZrDLknGjBmT/v37Z8GCBW1e5ve//32uv/76zJgxY4vMCAAA8GZQ1XfuFi9enGHDhqW2trZ5WW1tbYYMGZKGhoZW669duzbTpk3LJz7xieyyyy49MsOECRPa/dqUKVOyxx579Mh+AAAAelNV37lrbGxs8+OVdXV1bZ5U5Rvf+EYGDRqUD37wg1tiPAAAgDeNqr5zN3jw4DZPirJq1aoMHjy4xbJHH300N954Y2677bbU1NT02Az33Xdfu19btGhRp87cCQAAUG1Vfedu2LBhqa+vz+rVq5uXrV27NvX19Rk5cmSLdRcsWJDXXnstxx9/fEaPHp3Ro0cnST75yU/mlFNO2aJzAwAA9DVVfedu3LhxqVQqeeihh3LooYcmSRYuXJhKpZKxY8e2WPekk07KxIkTWyw7/vjjc+GFF+aoo47aYjMDAAD0RVX/WOYJJ5yQK6+8MldccUVWrFiRyy+/PKeeemrq6urS0NCQpqamjBw5Mttvv3223377VtsYNmxYdt555ypMDwAA0HdUNe6S5NJLL82MGTMyefLk9O/fP5MmTcrUqVOTJNdee20efPDBzJs3r8pTAgAA9G01lUqlUu0h+qoNJ1QZNGhQRo0aVe1xAACAt6DOdklVT6gCAABAzxah63K1evTqXXXZZxo0bl7Fjx2b69OlpbGxsc921a9fmi1/8Yg4//PDsv//+Of744/OTn/xkC08MAADQ91Q97mbOnJn7778/s2bNypw5c7Jo0aJcfPHFba77ta99Ld/97nczbdq0/PCHP8zf/M3f5B//8R/z29/+dgtPDQAA0Lf0r+bOly9fnltvvTWzZ8/O+PHjkyQXXXRRzjjjjDQ0NGTo0KEt1v/BD36Qc889N8cff3ySZNSoUZk/f35uueWWXHnllVt8fgAAgL6iqu/cPfzww0nSHHZJMmbMmPTv3z8LFixose6qVauy1VZbZcyYMS2WDx06NPX19b0/LAAAQB9W1XfuFi9enGHDhqW2trZ5WW1tbYYMGZKGhoYW6w4YMCD33ntvi2VPP/107r///px11lndnmHChAntfm3KlCnZY489ur1tAACALaWq79w1NjZm4MCBrZbX1dW1e1KVDe6+++6cdtppGTJkSM4555zeGhEAAOBNoarv3A0ePDhNTU2tlq9atSqDBw9u8zLLli3LpZdemrvvvjtHHnlkrrrqqmy33XbdnuG+++5r92uLFi3aZGQCAAD0BVWNu2HDhqW+vj6rV69u/mjm2rVrU19fn5EjR7Za/5lnnsnpp5+e9evX56tf/WqOPfbYLT0yAABAn1TVj2WOGzculUolDz30UPOyhQsXplKpZOzYsa3W//SnP51tttkmc+fOFXYAAABvUPWPZZ5wwgm58sorc8UVV2TFihW5/PLLc+qpp6auri4NDQ1pamrKyJEjs2zZssyfPz9XXnllXn311bz66qvN2xk4cGCGDx9exSMBAACorqrGXZJceumlmTFjRiZPnpz+/ftn0qRJmTp1apLk2muvzYMPPph58+bl2WefTaVSySWXXNJqGwcffHBuuummLT06AABAn1FTqVQq1R6ir9pwQpVBgwZl1KhR1R4HAAB4C+psl1T1Z+4AAADoGeIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAFWPu9WrV+eyyy7LuHHjMnbs2EyfPj2NjY3trn/zzTfnyCOPzF/91V/lrLPOylNPPbUFpwUAAOibqh53M2fOzP33359Zs2Zlzpw5WbRoUS6++OI2173jjjvyuc99LlOmTMktt9yS4cOH58Mf/nCampq28NQAAAB9S/9q7nz58uW59dZbM3v27IwfPz5JctFFF+WMM85IQ0NDhg4d2mL966+/Ph/60Idy4oknJkk+85nP5JBDDsk999yT4447bkuPv8W9unJt5j6wJL9/bkX2GlmXEw8Znu222fyb8NWVa/P9//tC7nlkWZLkr0cPyd9O3KnL225rviTNy3YbNjCr1qzP/EUvb9Z+urL/TW17w7HP+3VDXm5cm+3r+ufoMUM3a672roc3XsfjR/1FBmzdL0//qSl7jazLMWOG5u5fNbSafcO2frf4tTStWZ+t+iXr1if9apL1lWTg1v2y767btjrWDZf77dOvpXHVujS8ujr9amravc5fXbk23573XP7jofqsWrM+++6ybaafskd2GjJwk9fvC8ua8rnbnsqTL67MHm/fJheevHt2GjKw1frtHePm6Mo+unL/6O5jYkscM9D3tPc8uMHmfP/u6Pmoo+2+8Xm9afX67LDt1vnLYQPzV3sM7vJzUW++/uiN7fb2/nv7cu2t15PX16buO1vydumN/W143Nz1y4YseXlV+tUk++26XavXNltqni2pplKpVKq183vuuSfnn39+Hn744dTW1iZ5/WOa7373u/PZz342xx9/fPO6r732WsaOHZsbbrghhxxySPPyM844I3vssUcuv/zyHp9v0aJFaWxszKBBgzJq1Kge335XvLpybc7+0iNZXP/ndyl33XFgbpgyerPucK+uXJszv/jrPNuwqsXynd82MDf+f53fdlvz7fy2gUml0mrbm7Ofrux/U9fPqyvX5sxZj+TZpa3f+e3uXO1dD+vXrc/zL61u93L9t6rJ2nV/fijuuuPAfOWj++R/z3m0xbba88ZjbWuGN9p56IDc+A8HtHgSP/0Lv87zy1reTv371eRHF/1Vc6i1df3OPGPPnDnrNy1m779VTW78//bPRd9+vMX6bR3j5tx/25qpvX0k6fT9o7uPia7M82b6JgF07IVlTXn/Nb9s9Tz4o2kdP3925rmgve9TOw8dkNmT9231PeKNz3mn/9Ov2v2+05Xnot58/dEb2+3t/ff25dpbr63XBN29vjqaJen898ue0Bv3g45e373xtc2WmqendLZLqvqxzMWLF2fYsGHNYZcktbW1GTJkSBoaGlqs++yzz2b9+vXZZZddWiwfPnx4q3W7YsKECe3+eeSRR7q93Z4294ElrV6sL65vytwHlmz2dtuKr2eXdm3bbc337NKmDsOuO/vpyv43df3MfWBJmw/8zZmrveuho7BL0uJFQfL67J+77alOhd2G9TfM29YMLeZpWNXi2OY+sKRV2CXJ2vWVfO62p9rd5uL6pky/6fFWs69dV8n0mx5vtX5bx7g5t31bM7W3j67cP7r7mOjKPEA5PnfbU20+D27q+bMzzwXtfZ96tmFVm98j3vic19H3na48F/Xm64/e2G5v77+3L9feeh3d3l3V0Sxb+nbpjf119Pruja9tttQ8W1pVE7SxsTEDB7Yu57q6ulYnVdnw943Xr6ur26y4e7P4/XMr2lz++PNtL9/c7XZ12x1tZ1M29xg62n9H297UzN2Za3Ouh409+eLKLq2/Yd7OzPDGY+to/Q0ztLfOkpfbfvHQ3vKO5uiqzl7Xjz+/Iu19PqGt/Xf3MdGVeYBytPdcvannz848F3Tm+bmt7XbmM1mdfS7a0q8/ttRzZHf339uXa2+9jm7vrupolq58v+wJvXE/2NT3445eX1X7ftkTqvrO3eDBg9s8GcqqVasyePDgVusmycqVLW+Q1atXt1q3K+677752/4wePbrb2+1pe42sa3P5niPaXr652+3qtjvazqZs7jF0tP+Otr2pmbsz1+ZcDxvb4+3bdGn9DfN2ZoY3HltH62+Yob11hv9FbZeWdzRHV3X2ut5zRF2X7h/dfUx0ZR6gHO09V2/q+bMzzwWdeX5ua7td/T7QnRl66/XHlnqO7O7+e/ty7a3X0e3dVR3NsqVvl97Y36bu/x29vqr2/bInVDXuhg0blvr6+qxe/ed/5V+7dm3q6+szcuTIFuvuuOOOSZIXXnihxfIXXnghI0aM6P1hq+zEQ4Zn1x1bvmu5244Dm0/WsTnb3XnogFbLd3lb17bd1ny7vG1gm9venP10Zf+bun5OPGT46z8X2INztXc9jNih49jpv1VNi7/vtuPAXHjy7q221Z43HmtbM7SYZ+iAFsd24iHDM2JI69upf7+aXHjy7u1uc7cdB+bq0/dsNXv/rWpy9el7tlq/rWPcnNu+rZna20dX7h/dfUx0ZR6gHBeevHubz4Obev7szHNBe9+ndhk6oM3vEW98zuvo+05Xnot68/VHb2y3t/ff25drb72Obu+u6miWLX279Mb+Onp998bXNltqni2tqidUWb58eQ499NDMmTMnhx56aJJk/vz5Offcc/Pggw+mrq5lJZ9yyik59NBD8w//8A9JXj/JysSJEzN79uzmy/ekvnRCleTPZ+95/PkV2XNEz58t897fvH4mriP237yzZb5xviTNy3bd8fWzZT7w2MubtZ+u7L/zZ8tcllca12T7Qf1z1AE9c7bMja+HN17Hh+z9+tkyF9c3Zc8Rfz6r4sazN58t85nX0rR6fbbaKlm3Ls1nzRxY2y/77tL+2TJ/t/i1vNa0Lg2vrslW/dq/zjecVe0nD9WnaRNny9x4xk2dLXPD+u0d4+boyj66cv/o7mNiSxwz0Pd09myZ3Xku6Oj5qKPtvvF5feX/O1vm7sMHZszu3T9bZm+8/uiN7fb2/nv7cu2t15PX16buO1vydumN/W143Nz9/86WWdONs2X2te/dne2SqsZdkkyfPj3//d//nSuuuCIrVqzI5ZdfnqOPPjqXXHJJGhoa0tTU1Pwu3ty5c/OZz3wmM2bMyE477ZQvf/nLefnll/OjH/0o/fr1/JuQfS3uAACAt57OdknVM/TSSy/NjBkzMnny5PTv3z+TJk3K1KlTkyTXXnttHnzwwcybNy9JcuKJJ2bZsmWZOXNmXn311YwbNy7f+MY3eiXsAAAA3kyq/s5dX+adOwAAoNreFL/nDgAAgJ4h7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAArQv9oD9GWrVq1KkqxcuTKLFi2q8jQAAMBb0cqVK5P8uU/aI+46sH79+ub/NjY2VnkaAADgrWxDn7RH3HWgtrY2q1evTr9+/TJgwIBe288jjzySJBk9enSv7YO+w+391uM2f+txm7/1uM3fetzmbz3VvM1XrVqV9evXp7a2tsP1aiqVSmULzUQ7JkyYkCS57777qjwJW4Lb+63Hbf7W4zZ/63Gbv/W4zd963gy3uROqAAAAFEDcAQAAFEDcAQAAFEDcAQAAFEDcAQAAFMDZMgEAAArgnTsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiDsAAIACiLs+4KqrrsoVV1zRavkDDzyQE088MQcccEAmTZqUe+65Z8sPB2yW1atX57LLLsu4ceMyduzYTJ8+PY2NjdUeC9hMy5Yty7777ptly5Y1L/N4L1tbtzllamhoyD/+4z9m7NixOeCAA/KhD30ojz76aJKkUqnkS1/6Ug477LAceOCBOf/887N06dIqT/xn4q6K1q1bl5///Oe57bbbWn3t2Wefzcc//vFMnDgxP/zhD/P+978/559/fhYtWlSFSektEyZMyOjRo1v8aev+wJvXzJkzc//992fWrFmZM2dOFi1alIsvvrjaY9FLvvOd77R6TB977LHVHose9qc//SkzZszIunXrWiz3eC9Xe7e5x3yZpkyZkieeeCJf/epX853vfCeDBw/ORz/60axcuTLXX399vve97+WKK67ITTfdlKamppx33nnVHrlZ/2oP8Fb13HPP5bjjjsvq1avb/Pp3v/vdvPOd78wFF1yQJNlrr70yb968/OAHP8inP/3pLTkqvaShoSENDQ25/fbbs/XWWzcvHzZsWBWnoictX748t956a2bPnp3x48cnSS666KKcccYZaWhoyNChQ6s8IT3tD3/4Q0466aSceeaZzcve+Pjmze/Tn/50vv/977da7vFervZu88RjvkRPPfVUFi5cmB/84AcZM2ZMkuTaa6/NuHHjctddd+WGG27IJz7xiRx99NFJkiuuuCJHHnlkHnnkkYwePbqaoyfxzl3V7LjjjvnBD36QuXPnZr/99mv19QULFmTixIktlh188MF54IEHttSI9LKnnnoqu+yyS0aNGpV3vOMdzX+22267ao9GD3n44YeTpPmFXpKMGTMm/fv3z4IFC6o1Fr3oqaeeykEHHdTiMb3rrrtWeyx60OTJkzN37txcddVVLZZ7vJervds88Zgv0ZIlSzJ8+PDss88+zcsGDRqUbbbZJs8991yWLl3a4jX6iBEjsvPOO/eZ1+jirkpqa2uzzz77ZJ999smgQYNaff2ZZ57JLrvs0mLZ8OHD09DQsKVGpJc99dRT6devXz70oQ9l3LhxOemkk/LjH/+42mPRgxYvXpxhw4altra2eVltbW2GDBnisVyop556KnfccUeOPfbYTJw4MZ/61Kfypz/9qdpj0YNGjBiRffbZp9ULeI/3crV3myce8yU65JBD8vOf/7zFY/k//uM/snz58uy1117p169fRo4c2eIyfek1urjroxobGzNgwIAWywYNGuQHswvy5JNPZtmyZfnABz6Qb33rW3nPe96TqVOnZu7cudUejR7S2NiYgQMHtlpeV1fnsVygxsbGLFmyJLW1tfmnf/qnzJw5M0888UTOPvvsrFq1qtrj0cs83t96PObLt3bt2nzzm9/M1KlTc+yxx6axsTG1tbXp169lQvWlx7mfueslr776aof/crPHHnukpqam3a9vt912aWpqarFs1apVGTx4cI/NSO/a1H3g3HPPzeTJk7P99tsnSfbbb7+88MILufHGG3PiiSduoSnpTYMHD271OE48lks1YMCAzJs3LyNGjGh+ft9zzz1zxBFH5L777mv++QzK5PH+1uMxX7bf/va3mTZtWp544omcc845mTJlSn7xi19k1apVWb9+fYvA60uPc3HXS+66665cdNFF7X794YcfbvPjmBsMGzYszz//fItlL7zwQkaMGNFjM9K7unMf2HvvvTNv3rzeHo0tZNiwYamvr8/q1aubP96xdu3a1NfXt/pIB29+/fv3b/OjOjvssEPq6+urNBVbisf7W4/HfLn+8z//M1OmTMk+++yT2267LaNGjUry+uO8UqnkxRdfbPGa/MUXX8xxxx1XrXFb8LHMXnLyySfnsccea/dPR2GXJBMnTswvfvGLFst+8Ytf5LDDDuvNselBm7oP/O3f/m2+/e1vt7jMI488kj333LNKE9PTxo0bl0qlkoceeqh52cKFC1OpVDJ27NgqTkZvmDt3bo4++uisWbOmedkzzzyTl156yeP6LcDj/a3HY75Mr732WqZNm5ajjz46N998c3PYJcmoUaOy4447tniN/swzz2Tx4sWZMGFCNcZtRdz1Uaecckp++9vf5qtf/Wp+97vf5eqrr87vfve7nHrqqdUejR4yYcKEfPWrX83cuXPz6KOPZs6cOfm3f/u3nHvuudUejR4yePDgnHDCCbnyyiuzcOHC3HvvvZk+fXpOPfXU1NXVVXs8eti4cePyyiuv5MILL8x///d/Z/78+ZkyZUre9a535d3vfne1x6OXeby/9XjMl+n+++9PY2NjPvKRj+S5557L008/3fxn+fLlOe200zJr1qzce++9WbBgQc4///wcddRR2W233ao9ehIfy+yz/vIv/zKzZ8/O5z73ucyZMyfvfOc7c91112WnnXaq9mj0kAsuuCADBgzIrFmzsnTp0uy+++6ZOXNmDj300GqPRg+69NJLM2PGjEyePDn9+/fPpEmTMnXq1GqPRS/Yaaed8q1vfSvXXnttzjnnnNTW1mbChAmZPn16tUdjC/F4f2vxmC/T4sWLs2bNmpx88smtvnb++efnvPPOy8qVK3PhhRdmzZo1Oeqoo3L55Zdv+UHbUVOpVCrVHgIAAIDN42OZAAAABRB3AAAABRB3AAAABRB3AAAABRB3AAAABRB3AAAABRB3AAAABRB3AAAABRB3ANCGBQsWZO+99879999f7VGazZ8/P+9973uz33775bnnnmtzndNPPz2nnXZaq+XLli3LpEmTsv/+++eOO+7o7VEBqIL+1R4AAOicb33rW1m2bFlmzZqVoUOHdvpyy5Yty5lnnpmnnnoqs2bNyjHHHNOLUwJQLeIOAN4kmpqasttuu+XYY4/t9GWWLVuWs846K08//XRmz56dI444ohcnBKCafCwTgKKcc845GTt2bNasWdNi+UUXXZSDDjooq1atSpLcddddOeWUU3LggQdm3LhxOfvss/PQQw+1u91p06bl8MMPb7Hs2Wefzd57751bb721ednKlStzzTXX5PDDD88BBxyQD3zgA5k3b94m5/7jH/+Y888/PwcddFDGjBmTD33oQ1mwYEHz1/fee+88+OCD+dWvfpW99947zz777Ca3uSHsFi9enG9+85vCDqBw4g6AokyaNCnLly/Pgw8+2LxszZo1+dnPfpbjjjsuAwYMyC9/+ct84hOfyK677pqZM2dm2rRpeemll/LhD384L7/8crf3vW7dunzsYx/L7bffnnPOOSef//zns+uuu+bjH/94fvKTn7R7ueeffz5/+7d/myeeeCIXXHBBrrnmmmy77bY566yzcu+99yZJrrvuuuy1117Zc889c9111+Vtb3tbh7O89NJLOeuss/Lkk0/muuuuy/jx47t9XAC8OfhYJgBFOfbYY3P55ZfnrrvuymGHHZbk9RORvPLKK/mf//N/Jkl+//vf513velc+//nPp6amJkny9re/PWeddVYee+yxjBs3rlv7vuOOO7JgwYLccsstOfDAA5Mk73nPe/LSSy9l1qxZOf7449u83OzZs7Nq1ap85zvfaf5ZuuOOOy6nnHJKPv/5z+eII47I4Ycfnuuuuy5r165t9Q7ixl599dXmY0mSpUuXdut4AHhz8c4dAEXZdtttc9RRR+Xuu+9OpVJJktx5550ZOXJkDjrooCTJBz7wgdx888157bXX8pvf/CZ33nlnvve97yV5/d237rr33nszfPjw7LXXXmlsbGz+c/jhh+fpp59OQ0NDm5e77777csQRR7Q4SUpNTU2OOeaY/P73v89rr73WpTkef/zxvPjii/nnf/7n7LjjjrnsssvywgsvdPu4AHhz8M4dAMU54YQT8pOf/CS//OUvM3r06Nx999057bTTmt+le+aZZ3LppZdmwYIFGTJkSHbbbbfstNNOXd7PhnjcYOnSpVmyZEne9a53tbn+Sy+91OZZLpcuXZoRI0a0Wr7tttsmSRobG5v/vzO233773HjjjRk1alRmzpyZc889NxdeeGFuvPHG9Ovn33UBSiXuACjOhAkTssMOO+Suu+5KY2NjXn755eaPZCbJ1KlT09DQkDvvvDO77rprkuT+++/Pv//7v7e7zQ1h+EYb/3zedttt1/xzfG1pK+CS1yNu2bJlrZY/99xz2XrrrbPDDju0O1db3vGOd2TUqFFJkokTJ+aDH/xgbr755lx33XX52Mc+1qVtAfDm4Z/vACjO1ltvnfe+9725++67c+edd+aAAw7I7rvv3vz1Rx99NBMnTmwOuySb/GXldXV1aWxsbPFu3cKFC1usc/DBB2fJkiXZddddc9BBBzX/efjhhzN79uwMHDiwzW2/+93vzj333NPi45dr1qzJnXfemXHjxqW2trZLx7+xCy+8MLvvvnu+8pWv5JFHHtmsbQHQd4k7AIo0adKkPP300/nXf/3XnHjiiS2+Nnr06Pz4xz/OLbfckjvuuCMXXnhh7rzzziSvn3ylrXfR3v3ud+e1117L17/+9SxZsiT/+Z//mRtvvLHFOu9///uz884755xzzsmtt96aO+64I5dcckm+8IUv5K//+q/b/Ujk+eefnxUrVuT000/Prbfemp/+9Kc577zzUl9fnylTpmz2dTFw4MBce+21qVQq+eQnP5kVK1Zs9jYB6HvEHQBFete73pVddtkl69evz3vf+94WX5s5c2ZGjx6dz372s7n66qszZMiQ3HbbbTnssMNy44035plnnmm1vfe+972ZPHlyvvOd7+Q973lP5syZk2uuuabFOttss02+853vZP/998+1116bqVOn5te//nWuuuqqnHnmme3Ouu++++bGG2/Mtttum6uuuioXXXRRmpqacsMNN+SAAw7oketj9OjROe+88/LHP/4xM2bM6JFtAtC31FQ2/mlwAAAA3nS8cwcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFAAcQcAAFCA/x+hzl/fuZj0HAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c395ad5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T03:02:28.715230Z",
     "iopub.status.busy": "2022-09-28T03:02:28.714415Z",
     "iopub.status.idle": "2022-09-28T03:02:28.996816Z",
     "shell.execute_reply": "2022-09-28T03:02:28.995808Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e25e5bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
