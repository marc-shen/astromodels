{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8822d20c",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b66c4a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:24.527250Z",
     "iopub.status.busy": "2024-02-06T22:14:24.526886Z",
     "iopub.status.idle": "2024-02-06T22:14:26.745306Z",
     "shell.execute_reply": "2024-02-06T22:14:26.743724Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d43dd7ac",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5dc4251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:26.751727Z",
     "iopub.status.busy": "2024-02-06T22:14:26.751353Z",
     "iopub.status.idle": "2024-02-06T22:14:26.760719Z",
     "shell.execute_reply": "2024-02-06T22:14:26.758695Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f20009c6",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "652ee597",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:26.766569Z",
     "iopub.status.busy": "2024-02-06T22:14:26.766233Z",
     "iopub.status.idle": "2024-02-06T22:14:26.775960Z",
     "shell.execute_reply": "2024-02-06T22:14:26.774755Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c594571e",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4ef9f024",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:26.781747Z",
     "iopub.status.busy": "2024-02-06T22:14:26.781376Z",
     "iopub.status.idle": "2024-02-06T22:14:26.790343Z",
     "shell.execute_reply": "2024-02-06T22:14:26.789159Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6f674d17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:26.795844Z",
     "iopub.status.busy": "2024-02-06T22:14:26.795468Z",
     "iopub.status.idle": "2024-02-06T22:14:27.462825Z",
     "shell.execute_reply": "2024-02-06T22:14:27.461541Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3cAAAMNCAYAAAA7io2xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA+7ElEQVR4nO3de5zWdZ3//+fgOOCguEJCQupqqXhA1gMiCrqeWrMvftW+lrae00LXr3x3LUE8piKWbVFJB1xzTS2TVtl2N/OrserXVMR1K1Mx84TnYDDRgWE4XL8//DE5MgMzw8A1vr3fbzdu5ef6XJ/P6/pcB64H1zWfqalUKpUAAADwvtar2gMAAACw7sQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAXpM3C1cuDC77LJLFi5c2O46jY2NueSSSzJq1KjstttuOeaYY/Lggw9uwCkBAAB6ph4Rd3/84x8zefLkrFixYo3rXXbZZbnvvvty1VVX5dZbb81uu+2WM888M6+//voGmhQAAKBnqnrcXXzxxRkzZkz+/d//fY3rNTY25j/+4z/ypS99KQceeGB22WWXXHrppdl8881z++23b6BpAQAAeqaqx924ceMyc+bMXHHFFWtcb8GCBenfv3923XXXlmW9evXKFltskfnz56/vMQEAAHq02moPMHjw4AwePDiLFi1a43rbbrtt7rvvvlbL/uu//itPPfVUTjjhhC7vf/To0e1eNnHixAwZMiS9evVK7969u7wPAACArlq6dGlWrlyZurq6Vh92vVfV464rKpVKfvrTn+bKK6/MbrvtlqOOOmq97GeLLbbIypUrs3Llyixfvny97AMAAKAjmpub13j5+y7uXnzxxUycODGPPPJIjjnmmFx44YWpre36zbj//vvbvew3v/lNli9fnl69emWTTTbp8j4AAAC6asmSJVm5cmV69VrzT9W9r+Lut7/9bU4//fQMGDAgN954Y/bZZ5/1ur/evXtn+fLl2WSTTTJ06ND1ui8AAIC2zJ07N42NjWv9UbH3TdxVKpV86Utfyo477pjp06envr6+2iMBAAD0GD067lb9/rpBgwbliSeeyPPPP58LL7xwtbNjbrrpphkwYEA1RgQAAOgRenTcffGLX0yS3HjjjZk3b16S5PTTT19tvaOPPjpXXXXVBp0NAACgJ6mpVCqVag/RU636bmvfvn39zB0AAFAVHe2Sqv8ScwAAANaduAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAAChAj4m7hQsXZpdddsnChQvbXadSqeSb3/xm9t9//+yxxx45++yzs2DBgg04JQAAQM/UI+Luj3/8YyZPnpwVK1ascb3rrrsuP/7xj3PZZZflxhtvTFNTU84666wNNCUAAEDPVVvtAS6++OL85Cc/Wet6lUol119/fc4555wccsghSZLLLrssBx10UB577LEMGzZsfY8K0K3eWrI8Mx96Pb9/eXE+vEVd5r70dubNX5rtP7xJzjtmu2zVv0+rdXYcUp9Dhw/I3b9pyOMvvJ2ly1dmo17JipVJn417ZZdtNs1R+w7KZpus+0v7e/e7pu2+urApV854Jo/Pa8zKSiW9a3ul/2Yb55DhA/KZMVt1aZ629p8kP/l/r+aex975hsdfD+vf5e13dYZ376szx2ht1+nMvrYd2CdJ8sIfmzq833W9rV05Lk/MeztNy1amd22vfGxwfcvMq+Z/5tXFaVq2Mr1qkpWVjj2G31qyvN3HQHvPlY7eP28tWZ4fzno5//HI/CxdtjK7bL1pJh27fZLkq7c9lz+8ujh96nplmw/1yV9t36/V9rryWABYH2oqlUqlmgO88sorefPNN/O73/0uF154YR588MH0799/tfWefvrp/I//8T9y9913Z+utt25Zfsghh+S4447LGWec0e2zzZ07N42Njenbt2+GDh3a7dsHPrjeWrI8p37zscyb39Tm5bUb1eSG/7Nbzv/h063Wqd2oJstXtP+yvc2WfXL9+GHr9Mayrdna2+6rC5tyzJT/zoqVbW/rIx/qkxv+T+fmaWv/HxnQOysrySsLl67z9rs6w7uPQWeO0dq2+e3P75z/Pf3JTu3r3db1Pu/MbenKcemsNe375G/8Ni81rP4YmPaF1Y/he58razpOby1ZnhP/8Td55Y3mVst71SQ1NTVZsXL159yq7SXp9GMBoLM62iVV/1rm4MGDs/POO2ebbbZZ43rz5s1Lr169MmTIkFbLBw0alIaGhi7vf/To0e3+eeyxx7q8XYA1mfnQ62t8A7x8RSWTbnx6tXXWFHZJMm9+U2Y+9Hq3z9bedr9623Pthl2SvLSg8/O0tf+XGpauFnZd3X5XZ3j3MejMMVrbNr9623Od3ldn9rs2nbktXTkunbWmfb837JJ3HgNtHcP3PlfWdJxmPvT6amGXvPOJYlth9+7tdeWxALC+vG/+SamxsTF1dXXp1at1j9bX16exsbFKUwF0ze9fXrzWdV7/0+pvNjvi6VfWvu01aW+2trb77GtLun2ejhybddn+usywal+dOUZr22Z7x3Bt++roftemM7elq8elszqz76Rjj8P2tru2ba9te+19/2l9PC4B1qbqn9x1VL9+/bJ06dKsXNn6n4iXLl2afv36dXm7999/f7t//BwfsL7sOKR+resM+ou6Lm17h8Fr3/aatDdbW9vd/sObdPs8HTk267L9dZlh1b46c4zWts32juHa9tXR/a5NZ25LV49LZ3Vm30nHHoftbXdt217b9rryWABYX943cTdw4MBUKpW89tprrZa/9tprGTx4cJWmAuiao/YdlG227NPu5bUb1eTKE3dYbZ3ajWrWuN1tt+zTcvKR7pytve2ed8x22WgNf5Ns/aHOz9PW/rce0DuD+/fulu13dYZ3H4POHKO1bfO8Y7br9L46s9+16cxt6cpx6aw17fsjA9p+DLR1DN/7XFnTcTpq30EZvMXq/5jSqybZqFfbz7lV2+vKYwFgfan6CVVWmT17dk466aR2T6iycuXKHHDAARk/fnyOPfbYJMmLL76YQw89NP/3//7fbLvttt0+kxOqAOvTqjPsPf3K4gz6izWfLfPpVxZnh8F/PgPgqjMRbrRRsmJF0qeuV3bZuvvPlrlqvx05W+YT8xqz4v8/W+aAfhvn4N3X/WyZ795/8s7ZMu/93TtnSjxwtw1ztsz2jkFnjtHartOZfa0KiXnzmzq833W9rV05Lk+8+Haamlemz8a98tGt6ltmXjX/M68tTlPzu8742oHH8KqzZbb1GGjvudLR+2fV2TJ//sj8NLVxtsxnXl2c3nW9su2WfTJ8u7bPltmZxwJAZ3S0S3p03L3++js/jDxo0Dt/qU+bNi0/+tGPcuWVV6ZPnz658sorM3jw4Hz3u99dLzOJOwAAoNo62iU9+p+VvvjFLyZJbrzxxiTJuHHjsmTJkpx33nlZtmxZDj744Fx66aVVnBAAAKBn6DGf3PVEPrkDAACq7X3ze+4AAABYd+IOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAOIOAACgAFWPu+bm5lxyySUZOXJkRowYkUmTJqWxsbHNdSuVSq6//vocdthh2XPPPXPyySfnD3/4wwaeGAAAoOepetxNmTIlDzzwQKZOnZrp06dn7ty5ueCCC9pc91/+5V9yzTXX5Nxzz80NN9yQ+vr6nH766e3GIAAAwAdFVeNu0aJFmTFjRi688MKMGjUqe+yxR84///zceeedaWhoWG3922+/Pcccc0wOP/zwDBs2LFdeeWVee+21/Nd//VcVpgcAAOg5aqu580cffTRJMmrUqJZlw4cPT21tbWbPnp0jjjii1fqLFi1KfX19y3/37t07NTU1aW5u7vIMo0ePbvey8ePHZ/vtt+/ytgEAADaUqn5yN2/evAwcODB1dXUty+rq6tK/f/82P7kbM2ZMbrvttjz11FNZunRpvv71r6e+vj4jRozYkGMDAAD0OFX95K6xsTF9+vRZbXl9fX2bP0d35pln5u67786RRx6ZmpqaVCqVnHvuudl88827PMP999/f7mVz587183wAAMD7QlXjrl+/fmlqalpt+dKlS9OvX7/Vlp911lmpq6vL97///XzoQx/KPffck2984xvZYYcdctBBB22IkQEAAHqkqsbdwIEDM3/+/DQ3N7d8NXP58uWZP39+hgwZ0mrdp556Kg8//HBuvvnm7L333kmS3XbbLb/73e9y++23izsAAOADrao/czdy5MhUKpU88sgjLcvmzJmTSqWy2s/RrVixos1t1NXVpXfv3ut1TgAAgJ6uqnHXr1+/HHnkkbn88sszZ86c3HvvvZk0aVKOO+641NfXp6GhIS+//HKSZOjQodlxxx3z5S9/Offdd1+eeuqp/PM//3N++ctf5phjjqnmzQAAAKi6mkqlUqnmAEuWLMnkyZNzxx13pLa2NmPHjs2ECROy8cYbZ+LEiXn44Ycza9asJMmCBQvyrW99K/fcc08WLVqU7bffPmeddVYOPfTQ9TLbqhOq9O3bN0OHDl0v+wAAAFiTjnZJ1eOuJxN3AABAtXW0S6r6tUwAAAC6h7gDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAoQNXjrrm5OZdccklGjhyZESNGZNKkSWlsbGx3/VmzZmXs2LEZNmxYDj300Nx+++0bcFoAAICeqepxN2XKlDzwwAOZOnVqpk+fnrlz5+aCCy5oc91f//rXOeecczJ27NjMmDEjn/zkJ3PBBRfkmWee2cBTAwAA9Cy11dz5okWLMmPGjEybNi2jRo1Kkpx//vk56aST0tDQkAEDBrRa/3vf+14OPfTQfP7zn0+SDB06NA8//HAeeuihfPSjH93g8wMAAPQUVf3k7tFHH02SlrBLkuHDh6e2tjazZ89ute7y5cvz0EMP5ZOf/GSr5T/+8Y/zt3/7t+t/WAAAgB6sqp/czZs3LwMHDkxdXV3Lsrq6uvTv3z8NDQ2t1n3xxRezZMmS/OlPf8rxxx+fP/zhD9lmm23yd3/3dzn44IO7PMPo0aPbvWz8+PHZfvvtu7xtAACADaWqn9w1NjamT58+qy2vr69f7aQqb775ZpLkG9/4Rv7X//pfue6667Lffvvl7/7u7/LII49skHkBAAB6qqp+ctevX780NTWttnzp0qXp169fq2UrV65Mkpxxxhn51Kc+lSTZfffdM3v27MycOTN77713l2a4//77271s7ty5azxzJwAAQE9R1U/uBg4cmPnz56e5ubll2fLlyzN//vwMGTKk1bqrTq7y3q9JfuxjH8v8+fPX/7AAAAA9WFXjbuTIkalUKq2+VjlnzpxUKpWMGDGi1bpbb711BgwYkCeffLLV8qefftrPxQEAAB94Vf9a5pFHHpnLL788l112WRYvXpxLL700xx13XOrr69PQ0JCmpqYMGTIkvXr1yuc+97lMmzYtW265ZXbZZZf84he/yNNPP51vfetb1bwZAAAAVVfVuEuSiy66KJMnT864ceNSW1ubsWPHZsKECUmSq6++Og8//HBmzZqVJPnc5z6XjTbaKN/+9rezYMGCDB06NNdee2222mqrat4EAACAqqupVCqVag/RU606oUrfvn0zdOjQao8DAAB8AHW0S6r6M3cAAAB0D3EHAABQAHEHAABQAHEHAABQAHEHAABQAHEHAABQgE7H3bJly7L77rvnl7/85fqYBwAAgC7odNxtvPHGGTFiRB588MH1MQ8AAABdUNuVK5144omZOHFiVqxYkTFjxmSTTTZZbZ1Ro0at83AAAAB0TE2lUql09krt/Vb0mpqaVCqV1NTU5Mknn1zn4aqto78JHgAAYH3paJd06ZO7H/7wh10eDAAAgO7XpbjbZ599unsOAAAA1kGX4i5556PBb37zm3n00UezePHiDBw4MGPGjMkXvvCFbLXVVt05IwAAAGvRpbibO3dujj/++PzFX/xF/uZv/iZ9+/bNyy+/nH/913/NHXfckZtvvjkf+9jHuntWAAAA2tGluPvGN76RXXfdNdddd1169+7dsnzRokX5/Oc/n69//ev5zne+021DAgAAsGad/j13STJnzpwcd9xxrcIuSfr165e//du/zSOPPNItwwEAANAxXYq7SqWS5cuXt3nZypUr09TUtE5DAQAA0Dldirs99tgjt9xyS5qbm1str1Qquf3227PTTjt1y3AAAAB0TJd+5u7v//7vc+KJJ+bwww/PJz/5yWy11VZZuHBhfvGLX+TZZ5/Nd7/73e6eEwAAgDXoUtwNGzYsN954Y/7xH/8x119/fctXNIcOHZrvfOc7OfDAA7t1SAAAANasy7/nbtiwYfnnf/7nNDc354033kjfvn2z6aabdudsAAAAdFCH4+7BBx/MLrvsks033zwPPvjgWtcfNWrUOg0GAABAx3U47k499dT80z/9U0aPHp1TTz01NTU1qVQqrdZZtaympiZPPvlktw8LAABA2zocdz/84Q8zdOjQlv8PAABAz9HhuNtnn32SJMuWLcsrr7ySUaNGZdCgQettMAAAADqu07/nbuONN86UKVMyZ86c9TEPAAAAXdClX2J+4okn5sYbb8ySJUu6ex4AAAC6oEu/CuHNN9/M888/n0MOOSR77bVXNtlkk1aX19TU5Ctf+Uq3DAgAAMDadSnufvnLX6Zv375Jkscff3y1y2tqatZtKgAAADql03H35ptv5lvf+lY+/OEP50Mf+tD6mAkAAIBO6nDcLVmyJJdcckn+7d/+rWXZ/vvvn8svvzxbbbXVehkOAACAjulw3H3729/Oz372sxx11FEZNmxYXn311fzoRz/KmWeemZkzZ67HEQEAAFibDsfdnXfemVNPPTUTJkxoWbbLLrvk3HPPzfPPP5+//Mu/XB/zAQAA0AEd/lUIr7zySkaMGNFq2b777ptKpZI33nij2wcDAACg4zocd5VKJXV1da2W9enTp+UyAAAAqqdLv8QcAACAnqVTcdfe76/ze+0AAACqq1O/5+70009vc/lnP/vZVv9dU1OTJ554outTAQAA0Ckdjrujjz56fc4BAADAOuhw3E2ZMmV9zgEAAMA6cEIVAACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAog7AACAAlQ97pqbm3PJJZdk5MiRGTFiRCZNmpTGxsa1Xu/ZZ5/N8OHD84tf/GIDTAkAANCzVT3upkyZkgceeCBTp07N9OnTM3fu3FxwwQVrvM6KFSsyceLENDU1baApAQAAerbaau580aJFmTFjRqZNm5ZRo0YlSc4///ycdNJJaWhoyIABA9q83nXXXZc+ffpsyFEBAAB6tKp+cvfoo48mSUvYJcnw4cNTW1ub2bNnt3md3//+97nuuusyefLkDTIjAADA+0FVP7mbN29eBg4cmLq6upZldXV16d+/fxoaGlZbf/ny5Zk4cWLOOeecbL311t0yw+jRo9u9bPz48dl+++27ZT8AAADrU1U/uWtsbGzz65X19fVtnlTle9/7Xvr27ZvPfvazG2I8AACA942qfnLXr1+/Nk+KsnTp0vTr16/VsieffDI33HBDbrvtttTU1HTbDPfff3+7l82dO7dDZ+4EAACotqp+cjdw4MDMnz8/zc3NLcuWL1+e+fPnZ8iQIa3WnT17dt5+++0cccQRGTZsWIYNG5Yk+eIXv5hjjz12g84NAADQ01T1k7uRI0emUqnkkUceyX777ZckmTNnTiqVSkaMGNFq3aOPPjpjxoxpteyII47Ieeedl4MPPniDzQwAANATVf1rmUceeWQuv/zyXHbZZVm8eHEuvfTSHHfccamvr09DQ0OampoyZMiQbL755tl8881X28bAgQPzkY98pArTAwAA9BxVjbskueiiizJ58uSMGzcutbW1GTt2bCZMmJAkufrqq/Pwww9n1qxZVZ4SAACgZ6upVCqVag/RU606oUrfvn0zdOjQao8DAAB8AHW0S6p6QhUAAAC6h7gDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAogLgDAAAoQNXjrrm5OZdccklGjhyZESNGZNKkSWlsbGxz3eXLl+cb3/hGDjjggOy222454ogj8vOf/3wDTwwAANDzVD3upkyZkgceeCBTp07N9OnTM3fu3FxwwQVtrvud73wnP/rRjzJx4sT89Kc/zd/8zd/kH/7hH/L4449v4KkBAAB6ltpq7nzRokWZMWNGpk2bllGjRiVJzj///Jx00klpaGjIgAEDWq1/66235owzzsgRRxyRJBk6dGgefPDB3HLLLbn88ss3+PwAAAA9RVU/uXv00UeTpCXskmT48OGpra3N7NmzW627dOnSbLTRRhk+fHir5QMGDMj8+fPX/7AAAAA9WFU/uZs3b14GDhyYurq6lmV1dXXp379/GhoaWq3bu3fv3Hvvva2WvfDCC3nggQdyyimndHmG0aNHt3vZ+PHjs/3223d52wAAABtKVT+5a2xsTJ8+fVZbXl9f3+5JVVa5++67c/zxx6d///457bTT1teIAAAA7wtV/eSuX79+aWpqWm350qVL069fvzavs3Dhwlx00UW5++67c9BBB+WKK67IZptt1uUZ7r///nYvmzt37lojEwAAoCeoatwNHDgw8+fPT3Nzc8tXM5cvX5758+dnyJAhq63/4osv5sQTT8zKlStzzTXX5LDDDtvQIwMAAPRIVf1a5siRI1OpVPLII4+0LJszZ04qlUpGjBix2voXX3xxNtlkk8ycOVPYAQAAvEvVv5Z55JFH5vLLL89ll12WxYsX59JLL81xxx2X+vr6NDQ0pKmpKUOGDMnChQvz4IMP5vLLL89bb72Vt956q2U7ffr0yaBBg6p4SwAAAKqrqnGXJBdddFEmT56ccePGpba2NmPHjs2ECROSJFdffXUefvjhzJo1Ky+99FIqlUouvPDC1baxzz775MYbb9zQowMAAPQYNZVKpVLtIXqqVSdU6du3b4YOHVrtcQAAgA+gjnZJVX/mDgAAgO4h7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAAog7gAAAApQ9bhrbm7OJZdckpEjR2bEiBGZNGlSGhsb213/5ptvzkEHHZS/+qu/yimnnJLnnntuA04LAADQM1U97qZMmZIHHnggU6dOzfTp0zN37txccMEFba57xx135Ktf/WrGjx+fW265JYMGDcrnPve5NDU1beCpAQAAepbaau580aJFmTFjRqZNm5ZRo0YlSc4///ycdNJJaWhoyIABA1qtf9111+WEE07IUUcdlST58pe/nH333Tf33HNPDj/88A09/gb36sKmfPW25/Lsa0uy/Yc3yXnHbJet+vdJkry1ZHlmPvR6fv/y4uw4pD5H7Tsom23S+u5tb51Vyx9/4e0sXb4yfTbulV222TTDtt00k2c8m9feWJpN6jbKLlv3zV4f27zNbW8obd2GJB1a1pWZ37u/Q4cPyN2/aejQdldd94l5b6dp2cr0ru2VXbfdtNOzrG2GzszUkX395P+9mnseW5gk+eth/fPJvbdsd/sdedx11doer+uyz/Ye89V8bANl6M7XqN+/vDjbDnzn7/kX/tjUoe2t6+tbR+fv7tf/zm5vTe+JunNfa1u3q8erO//uXqWzx6Qj71Pael/wmTFbtXsb1/QeojOP5a4er46+91rT/bY+39tsCDWVSqVSrZ3fc889Ofvss/Poo4+mrq4uyTtf09xrr73yla98JUcccUTLum+//XZGjBiR66+/Pvvuu2/L8pNOOinbb799Lr300m6fb+7cuWlsbEzfvn0zdOjQbt9+Z7y6sCmfuurXWb7iz3dX7UY1+ZeJf5VNN6nNqd98LPPm//kTzG227JPrxw9r9UBta51vf37n/O/pT7Zavjbv3faG0tZt+MiH+iSVSl5qWPrnZQN6JzU1eWlB+8ejq/ur3aim1X3Q3nbbum5XZunIDB2dqSP7Ovkbv211LJOktldNlq9cfftJ1vq466rOPF47u8/uum8A3qu9167ueo1a2/bW9fWto/N3x+3syn5XWdN7orUFXmf2tbZ11+V4ddff3at09ph05LGSJCdPfazV+6nknfdZN/z97qvdxrbW3ahXsmJl2zN35rh35Hh19PG/pvstWX/vbdZVR7ukql/LnDdvXgYOHNgSdklSV1eX/v37p6GhodW6L730UlauXJmtt9661fJBgwattm5njB49ut0/jz32WJe3292+ettzrR7USbJ8RSVfve25zHzo9dUeyPPmN2XmQ6+3/Hd763z1tuc6FXZtbXtDaes2vLSgabUYealh6WovLl2Zua39vfc+aG+7bV23K7N0ZIaOztSRfb33WCZpFXbv3n5HHndd1ZnHa2f32V33DcB7dcfr4ppeo9a2vXV9fevo/N39+t/Z7a3pPVF37mtt667L8equv7tX6ewx6chjZeZDr6/2fip5531WW7exrXXbC7t376cjs3XkeHX08b+m+219vrfZUKqaoI2NjenTZ/V/Taivr1/tpCqr/vu969fX169T3L1fPPvaknaXb9qn7bvx6VcWt/z/37+8uM112tvu2rx72xtKe7ehozo7c0f319Z213bdjs7S1dvclfunM/t6+pXFae8z/+54bHT28dqZfXbXfQPwXu29vnTna9Satreur28dnb87bue6bG9N74m6c19rW3ddj1dHZuiozh6TjjxW1vTdvq7exrVtpzPb6uwMHbnf1ud7mw2lqp/c9evXr82ToSxdujT9+vVbbd0kWbKk9YO0ubl5tXU74/7772/3z7Bhw7q83e62/Yc3aXf5jkPq27xsh8F/Xt7eOu1td23eve0Npb3b0FGdnbmj+2tru2u7bkdn6ept7sr905l97TC4vkOPu67q7OO1M/vsrvsG4L2643WxI6/F7W1vXV/fOjp/d7/+d3Z7a3pP1J37Wtu663q8OjJDR3X2mHTksbKmdbp6G9e2nc5sq7MzdOR+W5/vbTaUqsbdwIEDM3/+/DQ3N7csW758eebPn58hQ4a0WnfLLbdMkrz66qutlr/66qsZPHjw+h+2ys47ZrvUblTTalntRjU575jtctS+g7LNlq0/0dx2yz4tJxZJ0u465x2z3WrL1+a9295Q2roNW3+ozzs/Y/fuZQN6v/OzeO/SlZnb2t9774P2ttvWdbsyS0dm6OhMHdnXe49l8s7P3LW1/Y487rqqM4/Xzu6zu+4bgPfqjtfFNb1GrW176/r61tH5u/v1v7PbW9N7ou7c19rWXZfj1V1/d6/S2WPSkcfKUfsOWu39VPLO+6y2bmNb6260htLozHHvyPHq6ON/Tffb+nxvs6FU9YQqixYtyn777Zfp06dnv/32S5I8+OCDOeOMM/Lwww+nvr51JR977LHZb7/98vd///dJ3jnJypgxYzJt2rSW63ennnRClaRjZ8t8+pXF2WHwms+W+d513ntmoT51vbLL1qufLXPXbTbNnh/t1yPOlvnu25CkQ8vW5WyZq7az6mxNHdluy3F98e00NXf9jIxrm6EzM3VkXz/5f6/m3t+9c6arA3f785mu2tp+Rx53XbW2x+u67LO9x/z77YxYQM/Tna9RT7+yuOWN5rz5TR3a3rq+vnV0/u5+/e/s9rrjbJmd+bu8vXW7ery68+/uVbp8tsw1vE9p633B2s6W2d57iM48lrt6vDr63mtN99v6fG+zLjraJVWNuySZNGlS/vu//zuXXXZZFi9enEsvvTSHHHJILrzwwjQ0NKSpqanlU7yZM2fmy1/+ciZPnpytttoq3/rWt/KnP/0p//Iv/5Jevbr/Q8ieFncAAMAHT0e7pOoZetFFF2Xy5MkZN25camtrM3bs2EyYMCFJcvXVV+fhhx/OrFmzkiRHHXVUFi5cmClTpuStt97KyJEj873vfW+9hB0AAMD7SdU/uevJfHIHAABU2/vi99wBAADQPcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAcQdAABAAWqrPUBPtnTp0iTJkiVLMnfu3CpPAwAAfBAtWbIkyZ/7pD3ibg1WrlzZ8r+NjY1VngYAAPggW9Un7RF3a1BXV5fm5ub06tUrvXv3rvY4eeyxx5Ikw4YNq/IkrE/u5w8O9/UHg/v5g8H9/MHhvv5g6Gn389KlS7Ny5crU1dWtcb2aSqVS2UAzsY5Gjx6dJLn//vurPAnrk/v5g8N9/cHgfv5gcD9/cLivPxjer/ezE6oAAAAUQNwBAAAUQNwBAAAUQNwBAAAUQNwBAAAUwNkyAQAACuCTOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIOwAAgAKIu/eRK664Ipdddtlqyx966KEcddRR2X333TN27Njcc889G344oMOam5tzySWXZOTIkRkxYkQmTZqUxsbGao8FdNLChQuzyy67ZOHChS3LPL/L09b9TDkaGhryD//wDxkxYkR23333nHDCCXnyySeTJJVKJd/85jez//77Z4899sjZZ5+dBQsWVHniNRN37wMrVqzIfffdl9tuu221y1566aWceeaZGTNmTH7605/mU5/6VM4+++zMnTu3CpPS3UaPHp1hw4a1+tPW44D3lylTpuSBBx7I1KlTM3369MydOzcXXHBBtceim910002rPX8PO+ywao9FN/njH/+YyZMnZ8WKFa2We36Xpb372fO7HOPHj88zzzyTa665JjfddFP69euXz3/+81myZEmuu+66/PjHP85ll12WG2+8MU1NTTnrrLOqPfIa1VZ7ANbs5ZdfzuGHH57m5uY2L//Rj36Uj33sYzn33HOTJDvuuGNmzZqVW2+9NRdffPGGHJVu1tDQkIaGhtx+++3ZeOONW5YPHDiwilOxrhYtWpQZM2Zk2rRpGTVqVJLk/PPPz0knnZSGhoYMGDCgyhPSXf7whz/k6KOPzsknn9yy7N3PZd6/Lr744vzkJz9Zbbnnd1nau58Tz+9SPPfcc5kzZ05uvfXWDB8+PEly9dVXZ+TIkbnrrrty/fXX55xzzskhhxySJLnsssty0EEH5bHHHsuwYcOqOXq7fHLXw2255Za59dZbM3PmzOy6666rXT579uyMGTOm1bJ99tknDz300IYakfXkueeey9Zbb52hQ4fmox/9aMufzTbbrNqjsQ4effTRJGl545ckw4cPT21tbWbPnl2tsVgPnnvuuey9996tnr/bbLNNtceiG4wbNy4zZ87MFVdc0Wq553dZ2rufE8/vUrz++usZNGhQdt5555Zlffv2zSabbJKXX345CxYsaPU+e/DgwfnIRz7So99ni7serq6uLjvvvHN23nnn9O3bd7XLX3zxxWy99datlg0aNCgNDQ0bakTWk+eeey69evXKCSeckJEjR+boo4/Oz372s2qPxTqaN29eBg4cmLq6upZldXV16d+/v+dtYZ577rnccccdOeywwzJmzJh86Utfyh//+Mdqj0U3GDx4cHbeeefV3sx7fpelvfs58fwuxb777pv77ruv1XP2P/7jP7Jo0aLsuOOO6dWrV4YMGdLqOj39fba4e59rbGxM7969Wy3r27evH94uwLPPPpuFCxfm05/+dH7wgx/k4x//eCZMmJCZM2dWezTWQWNjY/r06bPa8vr6es/bgjQ2Nub1119PXV1d/vEf/zFTpkzJM888k1NPPTVLly6t9nisJ57fHwye32Vavnx5vv/972fChAk57LDD0tjYmLq6uvTq1TqXevrz2c/cVdlbb721xn/p2X777VNTU9Pu5ZtttlmamppaLVu6dGn69evXbTOyfqztvj/jjDMybty4bL755kmSXXfdNa+++mpuuOGGHHXUURtoSrpbv379VnvOJp63pendu3dmzZqVwYMHt7yG77DDDjnwwANz//33t/z8BmXx/P5g8Pwuz+OPP56JEyfmmWeeyWmnnZbx48fnV7/6VZYuXZqVK1e2Crye/nwWd1V211135fzzz2/38kcffbTNr2OuMnDgwLzyyiutlr366qsZPHhwt83I+tGV+36nnXbKrFmz1vdorEcDBw7M/Pnz09zc3PI1kOXLl2f+/PmrffWD96/a2to2v8qzxRZbZP78+VWaivXN8/uDwfO7LP/5n/+Z8ePHZ+edd85tt92WoUOHJnnn+VypVPLaa6+1el/92muv5fDDD6/WuGvla5lVdswxx+Spp55q98+awi5JxowZk1/96letlv3qV7/K/vvvvz7Hphus7b7/zGc+kx/+8IetrvPYY49lhx12qNLEdIeRI0emUqnkkUceaVk2Z86cVCqVjBgxooqT0Z1mzpyZQw45JMuWLWtZ9uKLL+aNN97wHC6Y5/cHg+d3Od5+++1MnDgxhxxySG6++eaWsEuSoUOHZsstt2z1PvvFF1/MvHnzMnr06GqM2yHi7n3u2GOPzeOPP55rrrkmTzzxRK688so88cQTOe6446o9Guto9OjRueaaazJz5sw8+eSTmT59ev7t3/4tZ5xxRrVHYx3069cvRx55ZC6//PLMmTMn9957byZNmpTjjjsu9fX11R6PbjJy5Mi8+eabOe+88/Lf//3fefDBBzN+/Pjsueee2Wuvvao9HuuJ5/cHg+d3OR544IE0Njbm9NNPz8svv5wXXnih5c+iRYty/PHHZ+rUqbn33nsze/bsnH322Tn44IOz7bbbVnv0dvla5vvcX/7lX2batGn56le/munTp+djH/tYrr322my11VbVHo11dO6556Z3796ZOnVqFixYkO222y5TpkzJfvvtV+3RWEcXXXRRJk+enHHjxqW2tjZjx47NhAkTqj0W3WirrbbKD37wg1x99dU57bTTUldXl9GjR2fSpEnVHo31zPO7fJ7f5Zg3b16WLVuWY445ZrXLzj777Jx11llZsmRJzjvvvCxbtiwHH3xwLr300g0/aCfUVCqVSrWHAAAAYN34WiYAAEABxB0AAEABxB0AAEABxB0AAEABxB0AAEABxB0AAEABxB0AAEABxB0AAEABxB0AtGH27NnZaaed8sADD1R7lBYPPvhgPvGJT2TXXXfNyy+/3OY6J554Yo4//vjVli9cuDBjx47NbrvtljvuuGN9jwpAFdRWewAAoGN+8IMfZOHChZk6dWoGDBjQ4estXLgwJ598cp577rlMnTo1hx566HqcEoBqEXcA8D7R1NSUbbfdNocddliHr7Nw4cKccsopeeGFFzJt2rQceOCB63FCAKrJ1zIBKMppp52WESNGZNmyZa2Wn3/++dl7772zdOnSJMldd92VY489NnvssUdGjhyZU089NY888ki72504cWIOOOCAVsteeuml7LTTTpkxY0bLsiVLluSqq67KAQcckN133z2f/vSnM2vWrLXO/fzzz+fss8/O3nvvneHDh+eEE07I7NmzWy7faaed8vDDD+c3v/lNdtppp7z00ktr3eaqsJs3b16+//3vCzuAwok7AIoyduzYLFq0KA8//HDLsmXLluWXv/xlDj/88PTu3Tu//vWvc84552SbbbbJlClTMnHixLzxxhv53Oc+lz/96U9d3veKFSvyhS98IbfffntOO+20fO1rX8s222yTM888Mz//+c/bvd4rr7ySz3zmM3nmmWdy7rnn5qqrrsqmm26aU045Jffee2+S5Nprr82OO+6YHXbYIddee20+9KEPrXGWN954I6ecckqeffbZXHvttRk1alSXbxcA7w++lglAUQ477LBceumlueuuu7L//vsneedEJG+++Wb+5//8n0mS3//+99lzzz3zta99LTU1NUmSD3/4wznllFPy1FNPZeTIkV3a9x133JHZs2fnlltuyR577JEk+fjHP5433ngjU6dOzRFHHNHm9aZNm5alS5fmpptuavlZusMPPzzHHntsvva1r+XAAw/MAQcckGuvvTbLly9f7RPE93rrrbdabkuSLFiwoEu3B4D3F5/cAVCUTTfdNAcffHDuvvvuVCqVJMmdd96ZIUOGZO+9906SfPrTn87NN9+ct99+O7/73e9y55135sc//nGSdz5966p77703gwYNyo477pjGxsaWPwcccEBeeOGFNDQ0tHm9+++/PwceeGCrk6TU1NTk0EMPze9///u8/fbbnZrj6aefzmuvvZZ/+qd/ypZbbplLLrkkr776apdvFwDvDz65A6A4Rx55ZH7+85/n17/+dYYNG5a77747xx9/fMundC+++GIuuuiizJ49O/3798+2226brbbaqtP7WRWPqyxYsCCvv/569txzzzbXf+ONN9o8y+WCBQsyePDg1ZZvuummSZLGxsaW/98Rm2++eW644YYMHTo0U6ZMyRlnnJHzzjsvN9xwQ3r18u+6AKUSdwAUZ/To0dliiy1y1113pbGxMX/6059avpKZJBMmTEhDQ0PuvPPObLPNNkmSBx54IP/+7//e7jZXheG7vffn8zbbbLOWn+NrS1sBl7wTcQsXLlxt+csvv5yNN944W2yxRbtzteWjH/1ohg4dmiQZM2ZMPvvZz+bmm2/Otddemy984Qud2hYA7x/++Q6A4my88cb5xCc+kbvvvjt33nlndt9992y33XYtlz/55JMZM2ZMS9glWesvK6+vr09jY2OrT+vmzJnTap199tknr7/+erbZZpvsvffeLX8effTRTJs2LX369Glz23vttVfuueeeVl+/XLZsWe68886MHDkydXV1nbr973Xeeedlu+22y7e//e089thj67QtAHoucQdAkcaOHZsXXngh//qv/5qjjjqq1WXDhg3Lz372s9xyyy254447ct555+XOO+9M8s7JV9r6FG2vvfbK22+/ne9+97t5/fXX85//+Z+54YYbWq3zqU99Kh/5yEdy2mmnZcaMGbnjjjty4YUX5utf/3r++q//ut2vRJ599tlZvHhxTjzxxMyYMSO/+MUvctZZZ2X+/PkZP378Oh+LPn365Oqrr06lUskXv/jFLF68eJ23CUDPI+4AKNKee+6ZrbfeOitXrswnPvGJVpdNmTIlw4YNy1e+8pVceeWV6d+/f2677bbsv//+ueGGG/Liiy+utr1PfOITGTduXG666aZ8/OMfz/Tp03PVVVe1WmeTTTbJTTfdlN122y1XX311JkyYkN/+9re54oorcvLJJ7c76y677JIbbrghm266aa644oqcf/75aWpqyvXXX5/dd9+9W47HsGHDctZZZ+X555/P5MmTu2WbAPQsNZX3/jQ4AAAA7zs+uQMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACiAuAMAACjA/we0rSb4HVUTWAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "274351d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:14:27.469316Z",
     "iopub.status.busy": "2024-02-06T22:14:27.468857Z",
     "iopub.status.idle": "2024-02-06T22:14:27.663060Z",
     "shell.execute_reply": "2024-02-06T22:14:27.661872Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef030f5d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
