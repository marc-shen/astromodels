{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "67ef79ea",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "18f84527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:11.287936Z",
     "iopub.status.busy": "2025-04-29T20:12:11.286932Z",
     "iopub.status.idle": "2025-04-29T20:12:12.510293Z",
     "shell.execute_reply": "2025-04-29T20:12:12.509808Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ba8fbe",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78a3a80a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:12.512625Z",
     "iopub.status.busy": "2025-04-29T20:12:12.512362Z",
     "iopub.status.idle": "2025-04-29T20:12:12.515651Z",
     "shell.execute_reply": "2025-04-29T20:12:12.515322Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c8486b1",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b716e068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:12.517410Z",
     "iopub.status.busy": "2025-04-29T20:12:12.517284Z",
     "iopub.status.idle": "2025-04-29T20:12:12.526825Z",
     "shell.execute_reply": "2025-04-29T20:12:12.526448Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cc12a5",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9098eeb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:12.528510Z",
     "iopub.status.busy": "2025-04-29T20:12:12.528411Z",
     "iopub.status.idle": "2025-04-29T20:12:12.531544Z",
     "shell.execute_reply": "2025-04-29T20:12:12.531217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4240ec17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:12.533168Z",
     "iopub.status.busy": "2025-04-29T20:12:12.533037Z",
     "iopub.status.idle": "2025-04-29T20:12:12.827931Z",
     "shell.execute_reply": "2025-04-29T20:12:12.827546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3cAAAMNCAYAAAA7io2xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA6BklEQVR4nO3dCbhVZb0/8B+IjIoFCgGihUOEotcBEYXMqbx28TpcC8shSwu9PvIvTcAJQpHKW6JFA2Vm5lCU0qjdlLQ/F0KIBkwxSxNnEVSUUeD8n3f1P9xzDmee9jnv+Xye5zz77DW+a6+19t7f/b7rXZ3KysrKAgAAgHatc6kLAAAAQNMJdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMtJlwt3r16hg2bFjxWJO1a9fGlClTYtSoUbH//vvHqaeeGgsXLmzVcgIAALRFbSLcvfzyyzF9+vTYsmVLrdNNmzYtfvvb38bnP//5+OEPf1gEvAsuuCBeeumlVisrAABAW1TycHf11VfHmDFj4uc//3mt06Vau1/84hfx2c9+No466qiilm/q1Kmxyy67xD333NNq5QUAAGiLSh7uxo8fH3Pnzo1rr7221uleeeWV6NOnT+y3337bhnXu3Dne/va3x8qVK1uhpAAAAG1Xl1IXYODAgcXfmjVrap1uzz33LJpkVvT73/8+Hn/88TjzzDMbvf7Ro0fXOG7SpEkxaNCgIkR269at0esAAABorI0bN8bWrVuja9eulSq72ly4a4yysrL40Y9+FNddd11x3d3JJ5/cIutJtYLpRUx/mzdvbpF1AAAA1MemTZtqHd/uwt0zzzxT1KgtWbKk6C3zyiuvjC5dGr8Z8+fPr3Hcn/70pyLUpZq7Hj16NHodAAAAjbV+/fqiwinlkmzC3Z///Oc477zzom/fvnHbbbfFYYcd1qLrS00xU7hLwW7o0KEtui4AAIDqLF++vOhgsq5Lxbq0p6aYqafMfffdN2bPnh09e/YsdZEAAADajDYd7srvX9e/f/949NFH4x//+EfRDLNq75g77bRTUZsHAADQUbXpcHfppZcWj6kJ5ooVK4r/U7PMqk455ZTixuYAAAAdVaey1N6RWtu29urVyzV3AABAm84lJb+JOQAAAE0n3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABloM+Fu9erVMWzYsOKxJmVlZXHjjTfGkUceGQcddFBcdNFF8corr7RqOQEAANqiNhHuXn755Zg+fXps2bKl1uluvvnmuPPOO2PatGlx2223xYYNG+LCCy9stXICAAC0VV1KXYCrr746fvCDH9Q5Xaq1u+WWW+Liiy+OY489thiWQt7RRx8dy5Yti+HDh7dCaQGaxxvrN8fc370Uf31uXezZr3sx7OmXN8S+g3rGyYf3j517dGm25Zcv8831m+OLdz8VT764Poa8o0dcduq7YkCf7tuVJT3/9R9Xxca3tsawwb3i8tP3KqZr7vLUtI3l0z664s3Y8NbW6Nalc+y35041zpOm/8H/fSEeXPbPlh/vG94nPjxmQPF/+fAtW8ti195dY6fuO8SwPapfVnPvk/puc9Xt3aFzxJatUWz33gN7Fvvhfx57NV5bu7kof/+3dat1O5papobsq5rWUd3+qGsZTVnvC6s3bHds79SjS6VyHLJ373jyxXWxYuXGStNUt89b4pwEaA2dylJqKqHnn38+Xn/99XjkkUfiyiuvjIULF0afPn22m+6JJ56If/u3f4v7778/Bg8evG14Cnrjxo2L888/v9nLtnz58li7dm306tUrhg4d2uzLBzqm9CX23BuXxYqVG6odv8du3eOWCcMb/WWyuuUP7NMtXn5tU2ze+r9v+V126BS3/p/9Y/L3nqixLEkKG3dPPqjRAa+68tS0jbW9NtXNk6Y/54Y/x7OrNlaaNm1vlJXF869uqrZMVZfV3Pukvttc13rr0pBy1adMDdlXNa3jnJnL4tlXKm/P7n27xa2fPqDWQN/Y9aZgd9rn/xibt1Q4tjt3il177xgvvlb9/i8/rlNQfn515WOnJc5JgNbKJSVvljlw4MB4z3veE3vssUet061YsSI6d+4cgwYNqjS8f//+sWrVqkavf/To0TX+pRpBgOaWagpq+zKfxqVpmnP56QtsxWCXpC/Dl99We7BLUi1SqhVpzvLUtI21vTbVzZOeVw125dtbU7CrblnNvU/qu811rbcuDSlXfcrUkH1V0zqqBrsk7aPaltGU9aZjs2KwS9KxXluwKz+u6xPsGlIWgFIrebirr5RUu3btWgS8inr27FmMA2gvUhOwujzx/LoWXX65l+r4AlwuNXdr7vJUt411lb3qPA3Z1tqW1dz7pL7b3JTyN7Rc9SlTQ/ZVQ9ZR1zKast6mHJsN0ZRzEqC1tJtw17t379i4cWNs3bq10vA0LI1rrPnz59f45zo+oCWka3jqss/Ani26/HL939a1XtOla5SauzzVbWNdZa86T0O2tbZlNfc+qe82N6X8DS1XfcrUkH3VkHXUtYymrLcpx2ZDNOWcBGgt7Sbc9evXr+hU5cUXX6w0PD1PTTsB2ovUOUO6hqcme+7WvZimOZc/qE+34jqkitI1d9edtU+tZSm/Nil1PtGc5alpG2t7baqbJz1P13NVNahvtxj49pqDa9VlNfc+qe8217XeujSkXPUpU0P2VU3r2H3X7bdncN9utS6jKetNx2Y6litKx/o76vjhIh3XxbWZ9dDUcxKgw3SoUm7RokVx9tln19ihSqqxe+973xsTJkyI008/vRj2zDPPxHHHHRf//d//HXvuuWezl0mHKkBLKe8ZMDX1Kv9Sm67rSbUDzdlbZlp++TLr6i2zvCzp+f1/XFX03NjcvWVWLE+dvWU+82Zs2LQ1uu/YudaeIct7Z3zokX/2injU/pV7y0zDU2+ZfXfuGjv12CGGDa69t8zm2if13eaq27vDDhHpzkBpu/caUN5b5mvx+tq3ivL326VbrdvR1DI1ZF/VtI7q9kd9e8tszHpr6y2zvBwH71Vzb5lV93lLnJMArZFL2nS4e+mll7Z1mpLMmjUr7rjjjrjuuuuie/fuxWOqtfv617/eImUS7gAAgFKrby5p0z9DXXrppcVjumF5Mn78+Fi/fn1cdtll8dZbb8UxxxwTU6dOLXEpAQAASq/N1Ny1RWruAACAUms397kDAACg6YQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgAyUPd5s2bYopU6bEyJEjY8SIEXH55ZfH2rVrq522rKwsbrnlljj++OPj4IMPjnPOOSf+9re/tXqZAQAA2pqSh7sZM2bEggULYubMmTF79uxYvnx5XHHFFdVO++Mf/zi++tWvxiWXXBK33npr9OzZM84777wawyAAAEBHUdJwt2bNmpgzZ05ceeWVMWrUqDjooINi8uTJ8atf/SpWrVq13fT33HNPnHrqqXHCCSfE8OHD47rrrosXX3wxfv/735ek/AAAAG1Fl1KufOnSpcVjCnblDjzwwOjSpUssWrQoTjzxxO3CYKqtK9etW7fo1KlT0bSzsUaPHl3juAkTJsSQIUMavWwAAIAOUXO3YsWK6NevX3Tt2nXbsPR/nz59qq25GzNmTNx9993x+OOPx8aNG+PLX/5yEfbStXoAAAAdWUlr7tK1ct27d99ueAps1V1Hd8EFF8T9998fJ510UlFjlzpYSdff7bLLLo0uw/z582scl67/cz0fAADQHpQ03PXu3Ts2bNiw3fBUK5fGVXXhhRcWNXvf/OY3Y9ddd40HH3wwbrjhhthnn33i6KOPbqVSAwAAtD0lDXepSebKlSuLa+bKm2Zu3ry5GDZo0KBK06ammA8//HDcfvvtceihhxbD9t9//3jkkUeKjlaEOwAAoCMr6TV36d52qWnlkiVLtg1bvHhxMazqdXRbtmypdhkpFKaOVQAAADqykoa71PQyXT93zTXXFKHuoYceKm5iPm7cuOK6u9SpynPPPVdMO3To0Nh3333jc5/7XPz2t78tavK++93vxgMPPFDcHgEAAKAj61SWqslKaP369TF9+vS49957i1sgjB07NiZOnBg77rhjTJo0qWiKOW/evGLaV155JW666abiWrt0W4R0m4J0Hd5xxx3XImUr71ClV69eRbgEAABobfXNJSUPd22ZcAcAALSXXFLSZpkAAAA0D+EOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkoOThbtOmTTFlypQYOXJkjBgxIi6//PJYu3ZtjdPPmzcvxo4dG8OHD4/jjjsu7rnnnlYtLwAAQFtU8nA3Y8aMWLBgQcycOTNmz54dy5cvjyuuuKLaaf/4xz/GxRdfXIS7OXPmxAc/+MFi2r///e+tXm4AAIC2pEspV75mzZoipM2aNStGjRpVDJs8eXKcffbZsWrVqujbt2+l6b/xjW8UtXWf/OQni+dDhw6Nhx9+OH73u9/FXnvtVZJtAAAAiI5ec7d06dLisTzYJQceeGB06dIlFi1aVGnazZs3FyEu1dZVdOedd8ZHP/rRVioxAABA21TSmrsVK1ZEv379omvXrtuGpf/79OlT1NxV9Mwzz8T69evjtddeizPOOCP+9re/xR577BH/+Z//Gcccc0yjyzB69Ogax02YMCGGDBnS6GUDAAB0iJq71HFK9+7dtxves2fP7TpVef3114vHG264If7jP/4jbr755jjiiCOKcLdkyZJWKzMAAEBbVNKau969e8eGDRu2G75x48ZiXEVbt24tHs8///w47bTTiv8POOCAovnm3Llz49BDD21UGebPn1/juNS5S209dwIAALQVJa25S00yV65cWdwOoeK1dWnYoEGDKk1b3rlK1WaSe++9dzE9AABAR1bScJfubVdWVlapWeXixYuLYemedxUNHjy4CHiPPfZYpeFPPPGE6+IAAIAOr+TNMk866aS45pprYtq0abFu3bqYOnVqjBs3rrjuLnWqkpptplq8zp07xyc+8Ynitgm77bZbDBs2LO67774i3N10002l3AwAAICOHe6Sq666KqZPnx7jx48vboGQblA+ceLEYtz1119f3Mdu3rx5xfMU7nbYYYf4yle+Eq+88kpxn7tvfetbMWDAgBJvBQAAQGl1KkttIKm1Q5VevXoVQRIAAKCt5pKSXnMHAABA8xDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAkAHhDgAAoCOGu7feeisOOOCAeOCBB1qmRAAAALR8uNtxxx1jxIgRsXDhwoavDQAAgBbRpTEznXXWWTFp0qTYsmVLjBkzJnr06LHdNKNGjWqO8gEAAFAPncrKysqigWq6K3qnTp0iLS49PvbYY9FR7gQPAABQ6lzSqJq7733ve00pGwAAAM2sUeHusMMOa+5yAAAA0Nrhrrxq8MYbb4ylS5fGunXrol+/fsX1d5/61KdiwIABTSkTAAAArRHuUrA744wz4m1ve1t84AMfKNp+Pvfcc/GTn/wk7r333rj99ttj7733bsyiAQAAaK1wd8MNN8R+++0XN998c3Tr1m3b8DVr1sQnP/nJ+PKXvxxf+9rXGrNoAAAAWuM+d8nixYtj3LhxlYJd0rt37/joRz8aS5YsacxiAQAAaM1wl253sHnz5mrHbd26NTZs2NDY8gAAANBa4e6ggw6Ku+66KzZt2rRd6Lvnnnvi3e9+d2MWCwAAQGtec/fpT386zjrrrDjhhBPigx/8YNE75urVq+O+++6LJ598Mr7+9a83tjwAAAC0VrgbPnx43HbbbfGlL30pbrnllm1NNNPd0lNHKkcddVRjFgsAAEBr3+cuBbzvfve7RdPMV199tbgdwk477dTYxQEAANAa4W7hwoUxbNiw2GWXXYr/6zJq1KimlAsAAICWCHfnnntufPvb347Ro0cX/3fq1KnoQKWi8mHp8bHHHmtIOQAAAGiNcPe9732vuKau/H8AAADaYbg77LDDise33nornn/++aLZZf/+/VuybAAAALTUfe523HHHmDFjRixevLihswIAANCWbmKe7nGXboWwfv365i8RAAAArXMrhNdffz3+8Y9/xLHHHhuHHHJI9OjRo9L41KHKF77whcYsGgAAgNYKdw888EBxX7vkL3/5y3bjU7gDAACgDYe7VGt30003xTve8Y7YddddW6ZUAAAA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4f7WoQoAAEAGhDsAAIAMCHcAAAAZEO4AAAAyINwBAABkQG+ZAAAAGVBzBwAAkAHhDgAAIAPCHQAAQAaEOwAAgAwIdwAAABkQ7gAAADIg3AEAAGRAuAMAAMiAcAcAAJAB4Q4AACADwh0AAEAGhDsAAIAMCHcAAAAZEO5K6Nprr41p06ZtN/x3v/tdnHzyyXHAAQfE2LFj48EHHyxJ+YDG2bRpU0yZMiVGjhwZI0aMiMsvvzzWrl1b6mIBTbR69eoYNmxY8VjO+d7x9jl5WrVqVXzmM58pzuP0HfzMM8+Mxx57rBhXVlYWN954Yxx55JFx0EEHxUUXXRSvvPJKtEXCXQls2bIlfvvb38bdd9+93bhnn302LrjgghgzZkz86Ec/itNOO604gJYvX16SstIyRo8eHcOHD6/0V93xQPs0Y8aMWLBgQcycOTNmz55dnL9XXHFFqYtFC/r+97+/3Tl9/PHHl7pYNKOXX345pk+fXnyGV+R873j73PmepwkTJsTf//73+OpXv1rs4969e8cnP/nJWL9+fdx8881x5513FpUyt912W2zYsCEuvPDCaIu6lLoAHc1zzz0XJ5xwQvFLX3XuuOOO2HvvveOSSy4pnu+7774xb968+OEPfxhXX311K5eWlvplKP3dc889seOOO24b3q9fv5KWi+axZs2amDNnTsyaNStGjRpVDJs8eXKcffbZxX7v27dvqYtIC/jb3/4Wp5xySpxzzjnbhlU8v2nf0ufvD37wg+2GO9873j5PnO/5eeqpp2Lx4sXF9+0DDzywGHb99dcXNfK//vWv45ZbbomLL744jj322GJcCnlHH310LFu2rAj3bYmau1a22267FQfO3LlzY7/99ttu/KJFi4pau4oOO+ywoqkm+byBDB48OIYOHRp77bXXtr+dd9651EWjGSxdurR4LP+il6QPii5duhTnN/me14ceemilc3qPPfYodbFoJuPHjy8+t9PlFBU53zvePk+c7/l56aWXon///vGe97xn27BevXpFjx49ioqZ1ASz4vfzgQMHxu67794mv58Ld62sa9euxYGT/tJBU9UzzzxTfPGvKB1s6RdA8pA+FDp37ly05U6/CKVf/37605+Wulg0kxUrVhS1sOlcL5f+79Onj/M48/P63nvvLZpmpS8An/3sZ4smXeQhfZFLn9tVv8A73zvePk+c7/k5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/vaiaWYKRuk6uvImmcnEiROLWrRUY5euiUvS/ex+/vOf17jM8mBYUdXr83beeedt1/FVp7oAl6Tgljo/qSrdy27HHXcstqUh9tprryLYJWPGjImPfOQjRU1lataZrgkEIE9+vgMgOykQpZt9pxq7FOBSr5Xvete7to1/7LHHitBTHuySum5W3rNnzyIoVqytW7x4caVpDjvssKLmLi03NQEt/1u6dGlxXV337t2rXfYhhxwSDz74YKXml6kTmFT2dP1f165doylSrV3a/q985SuxbNmyJi0LgLZLuAMg214z03VuP/nJT+Lkk0+uNC411fzpT39adHySOkFJ4ScFqfLOV6qrRUsBLIWvr3/960WA+81vflM0c6zotNNOi913373oKTPdHiEt+8orr4wvf/nL8b73va/GJpHpFgjr1q2Ls846q5jvvvvuiwsvvDBWrlwZEyZMaPJrkULl9ddfXwTTSy+9tFgXAPkR7gDIUrrubfDgwbF169aiFq+i1GwyBbwvfOELcd111xXX3d19991F75opsKVr8qpKyxg/fnzRo2XqAXP27NnFLQsq6tGjRzF+//33L8JUav755z//Oa699to455xzaizrsGHDivWm5plp2nRPvnTD8ltuuaWodWwOaXtTYEz305s+fXqzLBOAtqVTWdWrwQEAAGh31NwBAABkQLgDAADIgHAHAACQAeEOAAAgA8IdAABABoQ7AACADAh3AAAAGRDuAAAAMiDcAQAAZEC4AwAAyIBwBwAAEO3f/wPRBdqoei8R2wAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5beca1bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T20:12:12.829763Z",
     "iopub.status.busy": "2025-04-29T20:12:12.829603Z",
     "iopub.status.idle": "2025-04-29T20:12:12.893098Z",
     "shell.execute_reply": "2025-04-29T20:12:12.892711Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52cc3574",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
