{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fbcddd7b",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8d031d71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:37.269383Z",
     "iopub.status.busy": "2023-11-01T23:57:37.268903Z",
     "iopub.status.idle": "2023-11-01T23:57:39.950757Z",
     "shell.execute_reply": "2023-11-01T23:57:39.948520Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be477c11",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "60746d44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:39.961185Z",
     "iopub.status.busy": "2023-11-01T23:57:39.959850Z",
     "iopub.status.idle": "2023-11-01T23:57:39.971904Z",
     "shell.execute_reply": "2023-11-01T23:57:39.970340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606cef5e",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4bc7f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:39.979447Z",
     "iopub.status.busy": "2023-11-01T23:57:39.979005Z",
     "iopub.status.idle": "2023-11-01T23:57:39.994322Z",
     "shell.execute_reply": "2023-11-01T23:57:39.992836Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7c49658",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6935b0b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:40.001539Z",
     "iopub.status.busy": "2023-11-01T23:57:40.001143Z",
     "iopub.status.idle": "2023-11-01T23:57:40.015317Z",
     "shell.execute_reply": "2023-11-01T23:57:40.013755Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "18964b5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:40.022086Z",
     "iopub.status.busy": "2023-11-01T23:57:40.021683Z",
     "iopub.status.idle": "2023-11-01T23:57:40.850452Z",
     "shell.execute_reply": "2023-11-01T23:57:40.848774Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3cAAAMNCAYAAAA7io2xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/SrBM8AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA+yUlEQVR4nO3de3yU9Z3o8W8whhA0VpBQQLFaLxFB1gtGFHS9da09eJCurXa9V1t0PbJdW25eoChia7fSVnrBtS5FWyutst3dWlfLqoeCgMu2pVXUKgoi0pCoaCAJIXP+8CQ15h6STPjxfr9evFqf+c3zfOeWmQ8zGXIymUwmAAAA2K31yvYAAAAA7DpxBwAAkABxBwAAkABxBwAAkABxBwAAkABxBwAAkABxBwAAkABxBwAAkABxBwAAkIAeE3fl5eUxbNiwKC8vb3ZNRUVFzJgxI0aPHh3Dhw+PCRMmxPLly7txSgAAgJ6pR8Tdn//855g9e3bs3LmzxXWzZs2Kp59+Ou6444546KGHYvjw4XHNNdfE5s2bu2lSAACAninrcXfLLbfE2LFj49///d9bXFdRURH/8R//EV/5ylfitNNOi2HDhsXMmTNjv/32i0ceeaSbpgUAAOiZsh53EydOjMWLF8dtt93W4rotW7ZEv3794uijj67f1qtXr9h///2jtLS0q8cEAADo0XKzPcDgwYNj8ODBsXXr1hbXHXzwwfH000832Pbf//3f8cILL8TFF1/c4eOPGTOm2dOmTp0aQ4YMiV69ekXv3r07fAwAAICOqqqqitra2sjLy2vwZteHZT3uOiKTycTPfvazuP3222P48OExfvz4LjnO/vvvH7W1tVFbWxs1NTVdcgwAAIC2qK6ubvH03S7uNmzYEFOnTo1nn302JkyYEDfddFPk5nb8YixdurTZ0373u99FTU1N9OrVK/r06dPhYwAAAHTU9u3bo7a2Nnr1avm36naruPv9738fV111VfTv3z8WLlwYJ554Ypcer3fv3lFTUxN9+vSJ4uLiLj0WAABAU9auXRsVFRWt/qrYbhN3mUwmvvKVr8QRRxwR8+fPj4KCgmyPBAAA0GP06Lir+/frBg4cGM8991y8+uqrcdNNNzX6dsx99tkn+vfvn40RAQAAeoQeHXdf/vKXIyJi4cKFsX79+oiIuOqqqxqtO//88+OOO+7o1tkAAAB6kpxMJpPJ9hA9Vd1nW/v27et37gAAgKxoa5dk/R8xBwAAYNeJOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgASIOwAAgAT0mLgrLy+PYcOGRXl5ebNrMplMfOtb34pTTjkljj322Ljuuutiy5Yt3TglAABAz9Qj4u7Pf/5zzJ49O3bu3NniunvvvTd+8pOfxKxZs2LhwoVRWVkZ1157bTdNCQAA0HPlZnuAW265JX7605+2ui6TycR9990X119/fZx55pkRETFr1qw4/fTTY82aNTFixIiuHhVgt/Hu9ppY/MzmeHHjtjhiSEGMP2lg7Nsnt9XT6k7/6f/dFE+uKY+dtZk4oDAveu/dK3bWZiKTycTG8qqorKqNwwYXxOQJh8SgfvmtHq9ufxERfz2iX3zqhAHxxO/K6tefNbJ/g//+8ExtuVwdWdfZdvW4ded/bv17UbmjNnrn9oqjD96nyduo7jgf3T8v1r5eEa9u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pqYmSktLY8iQIQ3W1n25yoc/JnnYYYdFaWlp1w8LAADQg2U17kpKSiKTyTT4WOWqVasik8nEqFGjGqw96KCDon///vH888832P7SSy/5vTgAAGCPl/WPZZ533nlx6623xqxZs2Lbtm0xc+bMuPDCC6OgoCDKysqisrIyhgwZEr169YrPf/7zMW/evBgwYEAMGzYsfvWrX8VLL70U3/72t7N5MQAAALIuq3EXEXHzzTfH7NmzY+LEiZGbmxvjxo2LKVOmRETEnXfeGStXrowlS5ZERMTnP//52GuvveI73/lObNmyJYqLi+Oee+6JQYMGZfMiAAAAZF1OJpPJZHuInqruC1X69u0bxcXF2R4HAADYA7W1S7L6O3cAAAB0DnEHAACQAHEHAACQAHEHAACQAHEHAACQAHEHAACQgHbH3Y4dO+KYY46JX//6110xDwAAAB3Q7rjbe++9Y9SoUbF8+fKumAcAAIAOyO3ImS655JKYOnVq7Ny5M8aOHRt9+vRptGb06NG7PBwAAABtk5PJZDLtPVNz/yp6Tk5OZDKZyMnJieeff36Xh8u2tv5L8AAAAF2lrV3SoXfufvSjH3V4MAAAADpfh+LuxBNP7Ow5AAAA2AUdiruI998a/Na3vhWrV6+Obdu2RVFRUYwdOza++MUvxqBBgzpzRgAAAFrRobhbu3ZtXHTRRfGRj3wk/uZv/ib69u0bGzdujH/913+NRx99NB544IE47LDDOntWAAAAmtGhuLvrrrvi6KOPjnvvvTd69+5dv33r1q3xhS98Ib75zW/Gd7/73U4bEgAAgJa1+9+5i4hYtWpVXHjhhQ3CLiKisLAw/u7v/i6effbZThkOAACAtulQ3GUymaipqWnytNra2qisrNyloQAAAGifDsXdscceGw8++GBUV1c32J7JZOKRRx6JI488slOGAwAAoG069Dt3X/rSl+KSSy6Jc845Jz71qU/FoEGDory8PH71q1/FK6+8Et/73vc6e04AAABa0KG4GzFiRCxcuDD+6Z/+Ke677776j2gWFxfHd7/73TjttNM6dUgAAABa1uF/527EiBHxL//yL1FdXR1vvfVW9O3bN/bZZ5/OnA0AAIA2anPcLV++PIYNGxb77bdfLF++vNX1o0eP3qXBAAAAaLs2x90VV1wR//zP/xxjxoyJK664InJyciKTyTRYU7ctJycnnn/++U4fFgAAgKa1Oe5+9KMfRXFxcf3/BwAAoOdoc9ydeOKJERGxY8eOeOONN2L06NExcODALhsMAACAtmv3v3O39957x5w5c2LVqlVdMQ8AAAAd0KF/xPySSy6JhQsXxvbt2zt7HgAAADqgQ/8UwjvvvBOvvvpqnHnmmXH88cdHnz59Gpyek5MTX/va1zplQAAAAFrXobj79a9/HX379o2IiD/+8Y+NTs/Jydm1qQAAAGiXdsfdO++8E9/+9rfjox/9aBxwwAFdMRMAAADt1Oa42759e8yYMSP+7d/+rX7bKaecErfeemsMGjSoS4YDAACgbdocd9/5znfiF7/4RYwfPz5GjBgRmzZtih//+MdxzTXXxOLFi7twRAAAAFrT5rh77LHH4oorrogpU6bUbxs2bFjccMMN8eqrr8bHPvaxrpgPAACANmjzP4XwxhtvxKhRoxpsO+mkkyKTycRbb73V6YMBAADQdm2Ou0wmE3l5eQ225efn158GAABA9nToHzEHAACgZ2lX3DX379f5d+0AAACyq13/zt1VV13V5PbPfe5zDf47JycnnnvuuY5PBQAAQLu0Oe7OP//8rpwDAACAXdDmuJszZ05XzgEAAMAu8IUqAAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACRB3AAAACch63FVXV8eMGTOipKQkRo0aFdOnT4+KiopWz/fKK6/EyJEj41e/+lU3TAkAANCzZT3u5syZE8uWLYu5c+fG/PnzY+3atXHjjTe2eJ6dO3fG1KlTo7KyspumBAAA6Nlys3nw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9Bg5mUwmk+0heqq6L1Tp27dvFBcXZ3scAABgD9TWLsnq79wBAADQOcQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAAsQdAABAArIed9XV1TFjxowoKSmJUaNGxfTp06OioqLZ9Q888ECcfvrp8Vd/9Vdx+eWXx7p167pxWgAAgJ4p63E3Z86cWLZsWcydOzfmz58fa9eujRtvvLHJtY8++mh8/etfj0mTJsWDDz4YAwcOjM9//vNRWVnZzVMDAAD0LLnZPPjWrVtj0aJFMW/evBg9enREREybNi0uvfTSKCsri/79+zdYf++998bFF18c48ePj4iIr371q3HSSSfFk08+Geecc053j9/tNpVXxtcfXhevvLk9Dv1on5g84ZAY1C8/3t1eE4uf2RwvbtwWRwwpiPEnDYx9+zS+adu6rjmtnf+D8w0d0DuKD9wn3nyrutHa1vbTntMPLsqPiIg/vbEtqmpqI3/vXjFs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7egAAAB0Ch/LBAAASIC4AwAASIC4AwAASIC4AwAASIC4AwAASIC4AwAASIC4AwAASIC4AwAASIC4A4AmrFixIo488shYtmxZtkept3z58vjkJz8ZRx99dGzcuLHJNZdccklcdNFFjbaXl5fHuHHjYvjw4fHoo4929agAZEFutgcAANrmhz/8YZSXl8fcuXOjf//+bT5feXl5XHbZZbFu3bqYO3dunHXWWV04JQDZIu4AYDdRWVkZBx98cJx99tltPk95eXlcfvnl8dprr8W8efPitNNO68IJAcgmH8sEIClXXnlljBo1Knbs2NFg+7Rp0+KEE06IqqqqiIh4/PHH44ILLohjjz02SkpK4oorrohnn3222f1OnTo1Tj311AbbXn/99TjyyCNj0aJF9du2b98ed9xxR5x66qlxzDHHxGc+85lYsmRJq3O/+uqrcd1118UJJ5wQI0eOjIsvvjhWrFhRf/qRRx4ZK1eujN/97ndx5JFHxuuvv97qPuvCbv369fGDH/xA2AEkTtwBkJRx48bF1q1bY+XKlfXbduzYEb/+9a/jnHPOid69e8dvf/vbuP7662Po0KExZ86cmDp1arz11lvx+c9/Pt5+++0OH3vnzp3xxS9+MR555JG48sor4xvf+EYMHTo0rrnmmvjlL3/Z7PneeOON+OxnPxsvv/xy3HDDDXHHHXfEPvvsE5dffnk89dRTERFxzz33xBFHHBGHH3543HPPPXHAAQe0OMtbb70Vl19+ebzyyitxzz33xOjRozt8uQDYPfhYJgBJOfvss2PmzJnx+OOPxymnnBIR738RyTvvvBP/+3//74iIePHFF+O4446Lb3zjG5GTkxMRER/96Efj8ssvjxdeeCFKSko6dOxHH300VqxYEQ8++GAce+yxERHxiU98It56662YO3dunHvuuU2eb968eVFVVRX3339//e/SnXPOOXHBBRfEN77xjTjttNPi1FNPjXvuuSdqamoavYP4Ye+++279ZYmI2LJlS4cuDwC7F+/cAZCUffbZJ84444x44oknIpPJRETEY489FkOGDIkTTjghIiI+85nPxAMPPBDvvfde/OEPf4jHHnssfvKTn0TE++++ddRTTz0VAwcOjCOOOCIqKirq/5x66qnx2muvRVlZWZPnW7p0aZx22mkNviQlJycnzjrrrHjxxRfjvffea9ccL730Urz55pvxz//8zzFgwICYMWNGbNq0qcOXC4Ddg3fuAEjOeeedF7/85S/jt7/9bYwYMSKeeOKJuOiii+rfpduwYUPcfPPNsWLFiujXr18cfPDBMWjQoHYfpy4e62zZsiU2b94cxx13XJPr33rrrSa/5XLLli0xePDgRtv32WefiIioqKio//9tsd9++8WCBQuiuLg45syZE1dffXVMnjw5FixYEL16+XtdgFSJOwCSM2bMmNh///3j8ccfj4qKinj77bfrP5IZETFlypQoKyuLxx57LIYOHRoREcuWLYt///d/b3afdWH4QR/+/bx99923/vf4mtJUwEW8H3Hl5eWNtm/cuDH23nvv2H///Zudqykf//jHo7i4OCIixo4dG5/73OfigQceiHvuuSe++MUvtmtfAOw+/PUdAMnZe++945Of/GQ88cQT8dhjj8UxxxwThxxySP3pzz//fIwdO7Y+7CKi1X+svKCgICoqKhq8W7dq1aoGa0488cTYvHlzDB06NE444YT6P6tXr4558+ZFfn5+k/s+/vjj48knn2zw8csdO3bEY489FiUlJZGXl9euy/9hkydPjkMOOSS+853vxJo1a3ZpXwD0XOIOgCSNGzcuXnvttfjXf/3XGD9+fIPTRowYEb/4xS/iwQcfjEcffTQmT54cjz32WES8/+UrTb2Ldvzxx8d7770X3/ve92Lz5s3xX//1X7FgwYIGaz796U/HgQceGFdeeWUsWrQoHn300bjpppvim9/8Zvz1X/91sx+JvO6662Lbtm1xySWXxKJFi+JXv/pVXHvttVFaWhqTJk3a5esiPz8/7rzzzshkMvHlL385tm3btsv7BKDnEXcAJOm4446Lgw46KGpra+OTn/xkg9PmzJkTI0aMiK997Wtx++23R79+/eLhhx+OU045JRYsWBAbNmxotL9PfvKTMXHixLj//vvjE5/4RMyfPz/uuOOOBmv69OkT999/fwwfPjzuvPPOmDJlSvz+97+P2267LS677LJmZx02bFgsWLAg9tlnn7jtttti2rRpUVlZGffdd18cc8wxnXJ9jBgxIq699tp49dVXY/bs2Z2yTwB6lpzMh38bHAAAgN2Od+4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAASIO4AAAAS8P8A6C9rld8Isk4AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a31be33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:40.858942Z",
     "iopub.status.busy": "2023-11-01T23:57:40.857502Z",
     "iopub.status.idle": "2023-11-01T23:57:41.125108Z",
     "shell.execute_reply": "2023-11-01T23:57:41.123420Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adf73797",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
