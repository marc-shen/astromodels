{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b3f41898",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "28744c88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:20.167914Z",
     "iopub.status.busy": "2025-04-28T22:55:20.167493Z",
     "iopub.status.idle": "2025-04-28T22:55:21.328032Z",
     "shell.execute_reply": "2025-04-28T22:55:21.327541Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d2a1117",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "02403771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:21.330263Z",
     "iopub.status.busy": "2025-04-28T22:55:21.330018Z",
     "iopub.status.idle": "2025-04-28T22:55:21.333173Z",
     "shell.execute_reply": "2025-04-28T22:55:21.332809Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53ab0484",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e7534f08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:21.334950Z",
     "iopub.status.busy": "2025-04-28T22:55:21.334816Z",
     "iopub.status.idle": "2025-04-28T22:55:21.337908Z",
     "shell.execute_reply": "2025-04-28T22:55:21.337537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0023fd97",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e31e3e82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:21.339719Z",
     "iopub.status.busy": "2025-04-28T22:55:21.339617Z",
     "iopub.status.idle": "2025-04-28T22:55:21.348639Z",
     "shell.execute_reply": "2025-04-28T22:55:21.348262Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "def74f2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:21.350269Z",
     "iopub.status.busy": "2025-04-28T22:55:21.350175Z",
     "iopub.status.idle": "2025-04-28T22:55:21.644413Z",
     "shell.execute_reply": "2025-04-28T22:55:21.644001Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6aad40d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:55:21.646182Z",
     "iopub.status.busy": "2025-04-28T22:55:21.646026Z",
     "iopub.status.idle": "2025-04-28T22:55:21.715700Z",
     "shell.execute_reply": "2025-04-28T22:55:21.715255Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f1e4d35",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
