{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6de38889",
   "metadata": {
    "papermill": {
     "duration": 0.004327,
     "end_time": "2022-09-27T10:43:11.485549",
     "exception": false,
     "start_time": "2022-09-27T10:43:11.481222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2612a5cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:11.493941Z",
     "iopub.status.busy": "2022-09-27T10:43:11.493475Z",
     "iopub.status.idle": "2022-09-27T10:43:15.284962Z",
     "shell.execute_reply": "2022-09-27T10:43:15.283895Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.799219,
     "end_time": "2022-09-27T10:43:15.288158",
     "exception": false,
     "start_time": "2022-09-27T10:43:11.488939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "826d169c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.295685Z",
     "iopub.status.busy": "2022-09-27T10:43:15.295050Z",
     "iopub.status.idle": "2022-09-27T10:43:15.303646Z",
     "shell.execute_reply": "2022-09-27T10:43:15.302506Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015184,
     "end_time": "2022-09-27T10:43:15.306329",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.291145",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ea656d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.313097Z",
     "iopub.status.busy": "2022-09-27T10:43:15.312782Z",
     "iopub.status.idle": "2022-09-27T10:43:15.321063Z",
     "shell.execute_reply": "2022-09-27T10:43:15.320124Z"
    },
    "papermill": {
     "duration": 0.014711,
     "end_time": "2022-09-27T10:43:15.323781",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.309070",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f21872a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.330990Z",
     "iopub.status.busy": "2022-09-27T10:43:15.330406Z",
     "iopub.status.idle": "2022-09-27T10:43:15.339382Z",
     "shell.execute_reply": "2022-09-27T10:43:15.338455Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015632,
     "end_time": "2022-09-27T10:43:15.342142",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.326510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d44f4de",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002845,
     "end_time": "2022-09-27T10:43:15.348554",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.345709",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4cee0548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.355445Z",
     "iopub.status.busy": "2022-09-27T10:43:15.355119Z",
     "iopub.status.idle": "2022-09-27T10:43:15.366054Z",
     "shell.execute_reply": "2022-09-27T10:43:15.365160Z"
    },
    "papermill": {
     "duration": 0.017817,
     "end_time": "2022-09-27T10:43:15.369060",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.351243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c73ebb14",
   "metadata": {
    "papermill": {
     "duration": 0.00306,
     "end_time": "2022-09-27T10:43:15.375494",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.372434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0fe995e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.383194Z",
     "iopub.status.busy": "2022-09-27T10:43:15.382769Z",
     "iopub.status.idle": "2022-09-27T10:43:15.721343Z",
     "shell.execute_reply": "2022-09-27T10:43:15.720331Z"
    },
    "papermill": {
     "duration": 0.345751,
     "end_time": "2022-09-27T10:43:15.724128",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.378377",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d7235fa",
   "metadata": {
    "papermill": {
     "duration": 0.00341,
     "end_time": "2022-09-27T10:43:15.731253",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.727843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ab9a2dda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T10:43:15.739645Z",
     "iopub.status.busy": "2022-09-27T10:43:15.739269Z",
     "iopub.status.idle": "2022-09-27T10:43:16.122294Z",
     "shell.execute_reply": "2022-09-27T10:43:16.121174Z"
    },
    "papermill": {
     "duration": 0.390941,
     "end_time": "2022-09-27T10:43:16.125551",
     "exception": false,
     "start_time": "2022-09-27T10:43:15.734610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.725182,
   "end_time": "2022-09-27T10:43:16.861695",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-27T10:43:10.136513",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}