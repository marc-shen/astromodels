{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7e55357c",
   "metadata": {
    "papermill": {
     "duration": 0.004868,
     "end_time": "2022-09-27T14:41:28.144635",
     "exception": false,
     "start_time": "2022-09-27T14:41:28.139767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5922d9d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:28.154295Z",
     "iopub.status.busy": "2022-09-27T14:41:28.153607Z",
     "iopub.status.idle": "2022-09-27T14:41:32.438851Z",
     "shell.execute_reply": "2022-09-27T14:41:32.437685Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.294181,
     "end_time": "2022-09-27T14:41:32.442615",
     "exception": false,
     "start_time": "2022-09-27T14:41:28.148434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2fedba1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.451412Z",
     "iopub.status.busy": "2022-09-27T14:41:32.450936Z",
     "iopub.status.idle": "2022-09-27T14:41:32.458841Z",
     "shell.execute_reply": "2022-09-27T14:41:32.457718Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015957,
     "end_time": "2022-09-27T14:41:32.462148",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.446191",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a8d068f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.470491Z",
     "iopub.status.busy": "2022-09-27T14:41:32.470069Z",
     "iopub.status.idle": "2022-09-27T14:41:32.478337Z",
     "shell.execute_reply": "2022-09-27T14:41:32.477233Z"
    },
    "papermill": {
     "duration": 0.016156,
     "end_time": "2022-09-27T14:41:32.481612",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.465456",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e2b8cfe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.490338Z",
     "iopub.status.busy": "2022-09-27T14:41:32.489906Z",
     "iopub.status.idle": "2022-09-27T14:41:32.501576Z",
     "shell.execute_reply": "2022-09-27T14:41:32.500463Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019838,
     "end_time": "2022-09-27T14:41:32.504930",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.485092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88780bd3",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003455,
     "end_time": "2022-09-27T14:41:32.512717",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.509262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a4fb95e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.521212Z",
     "iopub.status.busy": "2022-09-27T14:41:32.520771Z",
     "iopub.status.idle": "2022-09-27T14:41:32.537060Z",
     "shell.execute_reply": "2022-09-27T14:41:32.535934Z"
    },
    "papermill": {
     "duration": 0.024415,
     "end_time": "2022-09-27T14:41:32.540368",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.515953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6817eba1",
   "metadata": {
    "papermill": {
     "duration": 0.00372,
     "end_time": "2022-09-27T14:41:32.547823",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.544103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "94d4132f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.557273Z",
     "iopub.status.busy": "2022-09-27T14:41:32.556814Z",
     "iopub.status.idle": "2022-09-27T14:41:32.967419Z",
     "shell.execute_reply": "2022-09-27T14:41:32.966217Z"
    },
    "papermill": {
     "duration": 0.419281,
     "end_time": "2022-09-27T14:41:32.970881",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.551600",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5ce11ab",
   "metadata": {
    "papermill": {
     "duration": 0.0041,
     "end_time": "2022-09-27T14:41:32.979363",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.975263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d099cfff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T14:41:32.989642Z",
     "iopub.status.busy": "2022-09-27T14:41:32.989169Z",
     "iopub.status.idle": "2022-09-27T14:41:33.481191Z",
     "shell.execute_reply": "2022-09-27T14:41:33.479997Z"
    },
    "papermill": {
     "duration": 0.501197,
     "end_time": "2022-09-27T14:41:33.484592",
     "exception": false,
     "start_time": "2022-09-27T14:41:32.983395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.543046,
   "end_time": "2022-09-27T14:41:34.196763",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-27T14:41:26.653717",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}