{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "df34dee1",
   "metadata": {
    "papermill": {
     "duration": 0.003713,
     "end_time": "2023-11-01T19:24:20.929655",
     "exception": false,
     "start_time": "2023-11-01T19:24:20.925942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "55abd479",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:20.936267Z",
     "iopub.status.busy": "2023-11-01T19:24:20.935894Z",
     "iopub.status.idle": "2023-11-01T19:24:24.099485Z",
     "shell.execute_reply": "2023-11-01T19:24:24.097866Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.171466,
     "end_time": "2023-11-01T19:24:24.103670",
     "exception": false,
     "start_time": "2023-11-01T19:24:20.932204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5672cabd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.110635Z",
     "iopub.status.busy": "2023-11-01T19:24:24.110269Z",
     "iopub.status.idle": "2023-11-01T19:24:24.117014Z",
     "shell.execute_reply": "2023-11-01T19:24:24.114601Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014884,
     "end_time": "2023-11-01T19:24:24.121017",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.106133",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "87ca76fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.127681Z",
     "iopub.status.busy": "2023-11-01T19:24:24.127333Z",
     "iopub.status.idle": "2023-11-01T19:24:24.133491Z",
     "shell.execute_reply": "2023-11-01T19:24:24.131944Z"
    },
    "papermill": {
     "duration": 0.014362,
     "end_time": "2023-11-01T19:24:24.137868",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.123506",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5d30b593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.145828Z",
     "iopub.status.busy": "2023-11-01T19:24:24.144943Z",
     "iopub.status.idle": "2023-11-01T19:24:24.157277Z",
     "shell.execute_reply": "2023-11-01T19:24:24.155824Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.02191,
     "end_time": "2023-11-01T19:24:24.162433",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.140523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c354c5d3",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003273,
     "end_time": "2023-11-01T19:24:24.168613",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.165340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "846da5bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.176677Z",
     "iopub.status.busy": "2023-11-01T19:24:24.176256Z",
     "iopub.status.idle": "2023-11-01T19:24:24.189391Z",
     "shell.execute_reply": "2023-11-01T19:24:24.188125Z"
    },
    "papermill": {
     "duration": 0.022049,
     "end_time": "2023-11-01T19:24:24.193317",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.171268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d3dbe30",
   "metadata": {
    "papermill": {
     "duration": 0.002991,
     "end_time": "2023-11-01T19:24:24.199223",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.196232",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "11f95569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.206809Z",
     "iopub.status.busy": "2023-11-01T19:24:24.206445Z",
     "iopub.status.idle": "2023-11-01T19:24:24.488225Z",
     "shell.execute_reply": "2023-11-01T19:24:24.477072Z"
    },
    "papermill": {
     "duration": 0.312245,
     "end_time": "2023-11-01T19:24:24.514346",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.202101",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ca9d3fc",
   "metadata": {
    "papermill": {
     "duration": 0.003794,
     "end_time": "2023-11-01T19:24:24.522465",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.518671",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9cacde92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T19:24:24.545065Z",
     "iopub.status.busy": "2023-11-01T19:24:24.539850Z",
     "iopub.status.idle": "2023-11-01T19:24:24.907236Z",
     "shell.execute_reply": "2023-11-01T19:24:24.895344Z"
    },
    "papermill": {
     "duration": 0.396416,
     "end_time": "2023-11-01T19:24:24.922294",
     "exception": false,
     "start_time": "2023-11-01T19:24:24.525878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.975744,
   "end_time": "2023-11-01T19:24:25.781699",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T19:24:19.805955",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}