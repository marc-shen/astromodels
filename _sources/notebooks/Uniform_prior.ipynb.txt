{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0e01371",
   "metadata": {
    "papermill": {
     "duration": 0.001455,
     "end_time": "2024-05-17T21:08:07.864717",
     "exception": false,
     "start_time": "2024-05-17T21:08:07.863262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7fbc297",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:07.867913Z",
     "iopub.status.busy": "2024-05-17T21:08:07.867725Z",
     "iopub.status.idle": "2024-05-17T21:08:09.324780Z",
     "shell.execute_reply": "2024-05-17T21:08:09.324130Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.460359,
     "end_time": "2024-05-17T21:08:09.326321",
     "exception": false,
     "start_time": "2024-05-17T21:08:07.865962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d1787a35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.330208Z",
     "iopub.status.busy": "2024-05-17T21:08:09.329804Z",
     "iopub.status.idle": "2024-05-17T21:08:09.332386Z",
     "shell.execute_reply": "2024-05-17T21:08:09.332013Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005955,
     "end_time": "2024-05-17T21:08:09.333563",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.327608",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "924799d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.336345Z",
     "iopub.status.busy": "2024-05-17T21:08:09.336194Z",
     "iopub.status.idle": "2024-05-17T21:08:09.338160Z",
     "shell.execute_reply": "2024-05-17T21:08:09.337768Z"
    },
    "papermill": {
     "duration": 0.004791,
     "end_time": "2024-05-17T21:08:09.339480",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.334689",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "72c0d054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.342307Z",
     "iopub.status.busy": "2024-05-17T21:08:09.342141Z",
     "iopub.status.idle": "2024-05-17T21:08:09.350709Z",
     "shell.execute_reply": "2024-05-17T21:08:09.350240Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01138,
     "end_time": "2024-05-17T21:08:09.351975",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.340595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19b54566",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001021,
     "end_time": "2024-05-17T21:08:09.354067",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.353046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3f6783cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.356853Z",
     "iopub.status.busy": "2024-05-17T21:08:09.356712Z",
     "iopub.status.idle": "2024-05-17T21:08:09.366938Z",
     "shell.execute_reply": "2024-05-17T21:08:09.366513Z"
    },
    "papermill": {
     "duration": 0.013099,
     "end_time": "2024-05-17T21:08:09.368173",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.355074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93e6220f",
   "metadata": {
    "papermill": {
     "duration": 0.001163,
     "end_time": "2024-05-17T21:08:09.370479",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.369316",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6424ba02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.373341Z",
     "iopub.status.busy": "2024-05-17T21:08:09.373197Z",
     "iopub.status.idle": "2024-05-17T21:08:09.473709Z",
     "shell.execute_reply": "2024-05-17T21:08:09.473193Z"
    },
    "papermill": {
     "duration": 0.103343,
     "end_time": "2024-05-17T21:08:09.474960",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.371617",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c20723",
   "metadata": {
    "papermill": {
     "duration": 0.001338,
     "end_time": "2024-05-17T21:08:09.477859",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.476521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed66c67b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T21:08:09.481217Z",
     "iopub.status.busy": "2024-05-17T21:08:09.481067Z",
     "iopub.status.idle": "2024-05-17T21:08:09.603613Z",
     "shell.execute_reply": "2024-05-17T21:08:09.603198Z"
    },
    "papermill": {
     "duration": 0.125829,
     "end_time": "2024-05-17T21:08:09.605040",
     "exception": false,
     "start_time": "2024-05-17T21:08:09.479211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.656382,
   "end_time": "2024-05-17T21:08:10.025880",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-05-17T21:08:07.369498",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}