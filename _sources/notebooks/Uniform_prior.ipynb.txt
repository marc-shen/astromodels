{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f07047ba",
   "metadata": {
    "papermill": {
     "duration": 0.004041,
     "end_time": "2024-05-08T19:32:53.587003",
     "exception": false,
     "start_time": "2024-05-08T19:32:53.582962",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "82172d8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:53.596172Z",
     "iopub.status.busy": "2024-05-08T19:32:53.595291Z",
     "iopub.status.idle": "2024-05-08T19:32:55.933255Z",
     "shell.execute_reply": "2024-05-08T19:32:55.932280Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.345983,
     "end_time": "2024-05-08T19:32:55.936290",
     "exception": false,
     "start_time": "2024-05-08T19:32:53.590307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef9f522e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:55.941743Z",
     "iopub.status.busy": "2024-05-08T19:32:55.941196Z",
     "iopub.status.idle": "2024-05-08T19:32:55.944993Z",
     "shell.execute_reply": "2024-05-08T19:32:55.943942Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008778,
     "end_time": "2024-05-08T19:32:55.947243",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.938465",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c6d69371",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:55.952808Z",
     "iopub.status.busy": "2024-05-08T19:32:55.952557Z",
     "iopub.status.idle": "2024-05-08T19:32:55.956199Z",
     "shell.execute_reply": "2024-05-08T19:32:55.955336Z"
    },
    "papermill": {
     "duration": 0.008665,
     "end_time": "2024-05-08T19:32:55.958214",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.949549",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40b3d75d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:55.962385Z",
     "iopub.status.busy": "2024-05-08T19:32:55.962162Z",
     "iopub.status.idle": "2024-05-08T19:32:55.967188Z",
     "shell.execute_reply": "2024-05-08T19:32:55.966339Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009831,
     "end_time": "2024-05-08T19:32:55.969399",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.959568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e83bc2",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001447,
     "end_time": "2024-05-08T19:32:55.972351",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.970904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cfbde947",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:55.976847Z",
     "iopub.status.busy": "2024-05-08T19:32:55.976630Z",
     "iopub.status.idle": "2024-05-08T19:32:55.983841Z",
     "shell.execute_reply": "2024-05-08T19:32:55.982755Z"
    },
    "papermill": {
     "duration": 0.013001,
     "end_time": "2024-05-08T19:32:55.986725",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.973724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "132acf2a",
   "metadata": {
    "papermill": {
     "duration": 0.002085,
     "end_time": "2024-05-08T19:32:55.990448",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.988363",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb12b171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:55.995070Z",
     "iopub.status.busy": "2024-05-08T19:32:55.994790Z",
     "iopub.status.idle": "2024-05-08T19:32:56.140786Z",
     "shell.execute_reply": "2024-05-08T19:32:56.139210Z"
    },
    "papermill": {
     "duration": 0.152976,
     "end_time": "2024-05-08T19:32:56.144995",
     "exception": false,
     "start_time": "2024-05-08T19:32:55.992019",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "352255e9",
   "metadata": {
    "papermill": {
     "duration": 0.003888,
     "end_time": "2024-05-08T19:32:56.153564",
     "exception": false,
     "start_time": "2024-05-08T19:32:56.149676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2aefe771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T19:32:56.159012Z",
     "iopub.status.busy": "2024-05-08T19:32:56.158828Z",
     "iopub.status.idle": "2024-05-08T19:32:56.365359Z",
     "shell.execute_reply": "2024-05-08T19:32:56.363908Z"
    },
    "papermill": {
     "duration": 0.213132,
     "end_time": "2024-05-08T19:32:56.368625",
     "exception": false,
     "start_time": "2024-05-08T19:32:56.155493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.240822,
   "end_time": "2024-05-08T19:32:57.014352",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-05-08T19:32:52.773530",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}