{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "72da5226",
   "metadata": {
    "papermill": {
     "duration": 0.006097,
     "end_time": "2022-09-29T21:55:38.695928",
     "exception": false,
     "start_time": "2022-09-29T21:55:38.689831",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4e0115",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:38.705028Z",
     "iopub.status.busy": "2022-09-29T21:55:38.704570Z",
     "iopub.status.idle": "2022-09-29T21:55:43.420658Z",
     "shell.execute_reply": "2022-09-29T21:55:43.419331Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.725393,
     "end_time": "2022-09-29T21:55:43.425217",
     "exception": false,
     "start_time": "2022-09-29T21:55:38.699824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "24dc79f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:43.436053Z",
     "iopub.status.busy": "2022-09-29T21:55:43.435494Z",
     "iopub.status.idle": "2022-09-29T21:55:43.441042Z",
     "shell.execute_reply": "2022-09-29T21:55:43.439956Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014427,
     "end_time": "2022-09-29T21:55:43.444888",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.430461",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a28e89f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:43.453524Z",
     "iopub.status.busy": "2022-09-29T21:55:43.452952Z",
     "iopub.status.idle": "2022-09-29T21:55:43.459289Z",
     "shell.execute_reply": "2022-09-29T21:55:43.457806Z"
    },
    "papermill": {
     "duration": 0.015089,
     "end_time": "2022-09-29T21:55:43.463041",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.447952",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e84f230",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:43.472778Z",
     "iopub.status.busy": "2022-09-29T21:55:43.472239Z",
     "iopub.status.idle": "2022-09-29T21:55:43.480510Z",
     "shell.execute_reply": "2022-09-29T21:55:43.479394Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016909,
     "end_time": "2022-09-29T21:55:43.483734",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.466825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dae5910a",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00344,
     "end_time": "2022-09-29T21:55:43.490311",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.486871",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4bf50b04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:43.499756Z",
     "iopub.status.busy": "2022-09-29T21:55:43.499303Z",
     "iopub.status.idle": "2022-09-29T21:55:43.525941Z",
     "shell.execute_reply": "2022-09-29T21:55:43.524209Z"
    },
    "papermill": {
     "duration": 0.039677,
     "end_time": "2022-09-29T21:55:43.534050",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.494373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fadad3bf",
   "metadata": {
    "papermill": {
     "duration": 0.004472,
     "end_time": "2022-09-29T21:55:43.561679",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.557207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f20fb6b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:43.583501Z",
     "iopub.status.busy": "2022-09-29T21:55:43.582908Z",
     "iopub.status.idle": "2022-09-29T21:55:44.029458Z",
     "shell.execute_reply": "2022-09-29T21:55:44.028191Z"
    },
    "papermill": {
     "duration": 0.456566,
     "end_time": "2022-09-29T21:55:44.032959",
     "exception": false,
     "start_time": "2022-09-29T21:55:43.576393",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "511630ee",
   "metadata": {
    "papermill": {
     "duration": 0.005002,
     "end_time": "2022-09-29T21:55:44.042469",
     "exception": false,
     "start_time": "2022-09-29T21:55:44.037467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0a683ad3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T21:55:44.052529Z",
     "iopub.status.busy": "2022-09-29T21:55:44.052070Z",
     "iopub.status.idle": "2022-09-29T21:55:44.493493Z",
     "shell.execute_reply": "2022-09-29T21:55:44.492239Z"
    },
    "papermill": {
     "duration": 0.451015,
     "end_time": "2022-09-29T21:55:44.497368",
     "exception": false,
     "start_time": "2022-09-29T21:55:44.046353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.192483,
   "end_time": "2022-09-29T21:55:50.537106",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-29T21:55:37.344623",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}