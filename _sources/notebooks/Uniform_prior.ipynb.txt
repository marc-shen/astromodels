{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57216e40",
   "metadata": {
    "papermill": {
     "duration": 0.004526,
     "end_time": "2022-09-27T11:23:34.035582",
     "exception": false,
     "start_time": "2022-09-27T11:23:34.031056",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d555b082",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:34.043888Z",
     "iopub.status.busy": "2022-09-27T11:23:34.043449Z",
     "iopub.status.idle": "2022-09-27T11:23:37.732566Z",
     "shell.execute_reply": "2022-09-27T11:23:37.731270Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.696972,
     "end_time": "2022-09-27T11:23:37.736042",
     "exception": false,
     "start_time": "2022-09-27T11:23:34.039070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42f97e7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:37.744396Z",
     "iopub.status.busy": "2022-09-27T11:23:37.743990Z",
     "iopub.status.idle": "2022-09-27T11:23:37.750511Z",
     "shell.execute_reply": "2022-09-27T11:23:37.749476Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013956,
     "end_time": "2022-09-27T11:23:37.753690",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.739734",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89cbf901",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:37.761168Z",
     "iopub.status.busy": "2022-09-27T11:23:37.760742Z",
     "iopub.status.idle": "2022-09-27T11:23:37.767480Z",
     "shell.execute_reply": "2022-09-27T11:23:37.766454Z"
    },
    "papermill": {
     "duration": 0.013832,
     "end_time": "2022-09-27T11:23:37.770434",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.756602",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2eb432ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:37.778286Z",
     "iopub.status.busy": "2022-09-27T11:23:37.777842Z",
     "iopub.status.idle": "2022-09-27T11:23:37.784811Z",
     "shell.execute_reply": "2022-09-27T11:23:37.783602Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014743,
     "end_time": "2022-09-27T11:23:37.788119",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.773376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0696175",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002902,
     "end_time": "2022-09-27T11:23:37.794004",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.791102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "16eeb2e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:37.802049Z",
     "iopub.status.busy": "2022-09-27T11:23:37.801656Z",
     "iopub.status.idle": "2022-09-27T11:23:37.812512Z",
     "shell.execute_reply": "2022-09-27T11:23:37.811591Z"
    },
    "papermill": {
     "duration": 0.018414,
     "end_time": "2022-09-27T11:23:37.815654",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.797240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb47e419",
   "metadata": {
    "papermill": {
     "duration": 0.003221,
     "end_time": "2022-09-27T11:23:37.822232",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.819011",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f764f5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:37.830533Z",
     "iopub.status.busy": "2022-09-27T11:23:37.830107Z",
     "iopub.status.idle": "2022-09-27T11:23:38.212984Z",
     "shell.execute_reply": "2022-09-27T11:23:38.211844Z"
    },
    "papermill": {
     "duration": 0.391253,
     "end_time": "2022-09-27T11:23:38.216493",
     "exception": false,
     "start_time": "2022-09-27T11:23:37.825240",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3cAAAMICAYAAABrRxwCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA7J0lEQVR4nO3de5yWdZ34//fgOMKYowENjxU1ltYVTEBTIgjaNCnFB6xa7ep6qPW0lCmVB+RgGgdxcy0sLcXIUx4ST21q9c21LEQBYSs1Bw/5DfXnYQQNHQ7jMPfvD7/O7tz3DQ4X92Hm4/P5z8p1X4wfP8ujenm/P9dVk8vlcgEAAECP1qvaCwAAAGD7iTsAAIAEiDsAAIAEiDsAAIAEiDsAAIAEiDsAAIAEiDsAAIAEiDsAAIAE1FZ7Ad3Z448/Hq2trdGrV6/Yaaedqr0cAADgPWjTpk3R3t4edXV18eEPf3iL94m7rWhtbY329vZob2+Ptra2ai8HAAB4D2ttbd3q5+JuK3r16hXt7e3Rq1ev6NOnT7WXAwAAvAdt2LCho0u2RtxtxU477RRtbW3Rp0+fGDJkSLWXAwAAvAc1NTVFS0vLux4V80AVAACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABIg7AACABHSbuFu7dm3su+++sXbt2i3ek8vl4rLLLouPf/zjccABB8RXvvKVePXVVyu4SgAAgO6pW8TdK6+8EnPnzo3Nmzdv9b6FCxfGzTffHLNmzYobbrghNm7cGF/+8pcrtEoAAIDuq7baC/jGN74RP/nJT971vlwuF9dcc02ceeaZ8alPfSoiImbNmhUHH3xwPProozFs2LByLxUAAKDbqnrcTZ48OY499th47LHHYubMmVu87+mnn45XX301xo0b13Ft9913jz322CMefvhhcQdAt/THP22KJ55qjVyu2ivp3j64R22M+kjv6NWrptpLAeixqh53u+++e+y+++6xbt26rd63evXq6NWrVwwcOLDT9QEDBsSaNWvKuUQAyOTuX70Z377y9Wovo8f4p0nvi8lf2K3aywDo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x8aiRYvizTffLPUaAaDHKfbUR1OZhbwKAaB0MsXdTjvtFJ/5zGfiu9/9bixZsiS+9a1vxfvf//6YPXt2jBs3LmbOnBlNTU2lXisAAABbsN0PVKmvr49DDz00JkyYEPvvv39s2LAh7rjjjjjqqKPi5JNPjtWrV5dinQAAAGxF5rjbuHFj/PznP48zzzwzRo8eHeecc060tbXF7NmzY+nSpbFw4cJ47bXX4pxzzinlegGgxzKCWMieAJRObZbf9NWvfjUeeOCB2LBhQwwcODBOOumkOPLII2OvvfbquGfMmDFx6qmnijsA3pM80T8br0IAyC5T3P3ud7+Lww8/PI466qgYOXLkFu8bOnRo/Pu//3vmxQEAANA1meLu29/+dhxwwAHR0NBQ8Nnrr78eq1evjuHDh8egQYNi0KBB27tGAAAA3kWmM3eTJ0+ORx99tOhnS5YsieOPP367FgUAPV2x8ULnywrlb4mxTIDsuvzN3bXXXhvXXnttRLz97p5zzjkn6urqCu577bXXon///iVbIAAAAO+uy3G3xx57xOjRoyMi4s4774whQ4bEgAEDCu7beeed46ijjirdCgEAAHhXXY67Qw89NA499NCIiHj++efja1/7WgwbNqxsCwMA3gOMqgKUTJfjrr29PXr1evuI3nXXXddxbUveuRcA3pOcHcvEtgFk1+W4+/CHPxw//OEP4+Mf/3jsu+++UbOVU+E1NTXxpz/9qSQLBAAA4N11Oe5OP/30jpeUn3766VuNOwAAACqry3H3la98peOvzzjjjLIsBgBSUWy80L8XLVSwJ+YyATLrctw99NBD2/SD33myJgAAAOXX5bj713/916ipqYncVt4u+s7nNTU18cQTT5RkgQAAALy7Lsfd9ddfX851AEBSiv27UGOZhWry3oWwlX+HDMC76HLcffSjHy3nOgAAANgOXY67yy67LI466qjYa6+94rLLLtvqvTU1NXHmmWdu9+IAAADomi7H3Q9+8IM48MADY6+99oof/OAHW71X3AFAIa8RKmRLAEqny3HX1NRU9K8BgELOjmVj2wCy63LcFbNp06Z45plnorW1NfbYY4/o379/qdYFAADANsgUd7lcLubPnx/XX399bNy4seP6hz70ofjqV78ahx56aMkWCAAAwLvLFHcLFiyIq666Kj75yU/GhAkTom/fvvHSSy/FPffcE2eccUbMmzcvjjzyyBIvFQBITt6ZO+OsANlliruf/OQncdRRR8W8efM6Xf/c5z4XZ511Vlx11VXiDgAAoIJ6ZflNr776anzyk58s+tmnP/3peOGFF7ZnTQAAAGyjTHG3zz77xKpVq4p+9vzzz8egQYO2Z00A0OPljxd65H9xBdtiLhMgs0xxN3Xq1LjxxhvjrrvuitbW1oiIaG1tjbvvvjuuueaaOO+880q6SAAAALauy2fuhgwZ0unlq7lcLs4777yYNm1avO9974v169dHe3t71NbWxllnnRUPPfRQWRYMAABAoS7H3UUXXdQp7gAAAOg+uhx3Rx99dJfuW7t2bTz//POZFwQAKcjlnR3z70eLy98XJ+4Assv0KoSIiHXr1sWqVauira2t0/WHH344rrvuuvj973+/vWsDAACgizLF3YoVK+KUU06JjRs3Fv18zJgx27UoAAAAtk2muLviiiti0KBBce6558Ytt9wSO+64Y3z2s5+NBx98MH71q1/FZZddVup1AgAJKhjLNJcJkFmmVyE8/vjj8YUvfCFGjx4dRxxxRLz00ksxevToOPvss2P//feP73//+6VeJwAAAFuRKe5aW1ujvr4+IiIGDhwY//f//t+Ozw4++OC45557SrI4AAAAuiZT3O29995x3333RUTEBz/4wU5PyPzrX/8ab7zxRulWCAAJ8LRMAMot05m7U089NaZMmRIvvvhi3HDDDfHRj340TjnllBg3blz853/+Zxx44IGlXicA9CjOjmVk3wAyy/TN3fjx4+Omm26KSZMmRUTE7Nmzo2/fvnHbbbfFkCFDYtasWSVdJAAAAFuX+T13+++/f+y///4REbHnnnvGTTfdVKo1AQAAsI0yx92rr74at9xySzz++OPR2toaAwcOjDFjxsRhhx1WyvUBQI+UP5bpzF1xBa9CqM4yAJKQKe6eeuqpOOGEE+L111+PvfbaK/r27Ru/+93v4tZbb42hQ4fG1VdfHf379y/1WgEAANiCTHF38cUXR11dXdx+++3x4Q9/uOP6ihUrYsqUKTFv3ry49NJLS7ZIAAAAti7TA1VWrFgRp59+eqewi4g48MAD40tf+lI88MADJVkcAPRU+eOFpjKLKxjLNJcJkFmmuOvTp0/06dOn6Gf9+vWLXr0y/VgAAAAyylRhEydOjFtuuSU2b97c6Xoul4tFixZ5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\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5407567c",
   "metadata": {
    "papermill": {
     "duration": 0.004352,
     "end_time": "2022-09-27T11:23:38.224821",
     "exception": false,
     "start_time": "2022-09-27T11:23:38.220469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "63e6e4e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T11:23:38.233843Z",
     "iopub.status.busy": "2022-09-27T11:23:38.233428Z",
     "iopub.status.idle": "2022-09-27T11:23:38.610702Z",
     "shell.execute_reply": "2022-09-27T11:23:38.609666Z"
    },
    "papermill": {
     "duration": 0.385339,
     "end_time": "2022-09-27T11:23:38.613635",
     "exception": false,
     "start_time": "2022-09-27T11:23:38.228296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.632573,
   "end_time": "2022-09-27T11:23:39.289703",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-27T11:23:32.657130",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}