{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6578b9e4",
   "metadata": {
    "papermill": {
     "duration": 0.008479,
     "end_time": "2025-04-29T23:53:48.692716",
     "exception": false,
     "start_time": "2025-04-29T23:53:48.684237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "759da122",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:48.706317Z",
     "iopub.status.busy": "2025-04-29T23:53:48.705564Z",
     "iopub.status.idle": "2025-04-29T23:53:50.125701Z",
     "shell.execute_reply": "2025-04-29T23:53:50.125183Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.428258,
     "end_time": "2025-04-29T23:53:50.127026",
     "exception": false,
     "start_time": "2025-04-29T23:53:48.698768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7d8bc99f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.130144Z",
     "iopub.status.busy": "2025-04-29T23:53:50.129823Z",
     "iopub.status.idle": "2025-04-29T23:53:50.136533Z",
     "shell.execute_reply": "2025-04-29T23:53:50.136122Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009365,
     "end_time": "2025-04-29T23:53:50.137601",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.128236",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43162166",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.140159Z",
     "iopub.status.busy": "2025-04-29T23:53:50.140016Z",
     "iopub.status.idle": "2025-04-29T23:53:50.141873Z",
     "shell.execute_reply": "2025-04-29T23:53:50.141485Z"
    },
    "papermill": {
     "duration": 0.004359,
     "end_time": "2025-04-29T23:53:50.142945",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.138586",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "965cb5e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.145424Z",
     "iopub.status.busy": "2025-04-29T23:53:50.145284Z",
     "iopub.status.idle": "2025-04-29T23:53:50.154100Z",
     "shell.execute_reply": "2025-04-29T23:53:50.153638Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011233,
     "end_time": "2025-04-29T23:53:50.155186",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.143953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2d7ec4e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001032,
     "end_time": "2025-04-29T23:53:50.157254",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.156222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "78e295aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.159787Z",
     "iopub.status.busy": "2025-04-29T23:53:50.159640Z",
     "iopub.status.idle": "2025-04-29T23:53:50.163638Z",
     "shell.execute_reply": "2025-04-29T23:53:50.163220Z"
    },
    "papermill": {
     "duration": 0.006406,
     "end_time": "2025-04-29T23:53:50.164645",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.158239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5aeea22",
   "metadata": {
    "papermill": {
     "duration": 0.001131,
     "end_time": "2025-04-29T23:53:50.167011",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.165880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "82463f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.169719Z",
     "iopub.status.busy": "2025-04-29T23:53:50.169569Z",
     "iopub.status.idle": "2025-04-29T23:53:50.242582Z",
     "shell.execute_reply": "2025-04-29T23:53:50.242206Z"
    },
    "papermill": {
     "duration": 0.075761,
     "end_time": "2025-04-29T23:53:50.243832",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.168071",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48699e45",
   "metadata": {
    "papermill": {
     "duration": 0.00144,
     "end_time": "2025-04-29T23:53:50.246895",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.245455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec2def5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T23:53:50.250449Z",
     "iopub.status.busy": "2025-04-29T23:53:50.250300Z",
     "iopub.status.idle": "2025-04-29T23:53:50.345896Z",
     "shell.execute_reply": "2025-04-29T23:53:50.345486Z"
    },
    "papermill": {
     "duration": 0.098652,
     "end_time": "2025-04-29T23:53:50.347022",
     "exception": false,
     "start_time": "2025-04-29T23:53:50.248370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.715225,
   "end_time": "2025-04-29T23:53:50.671653",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-04-29T23:53:47.956428",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}