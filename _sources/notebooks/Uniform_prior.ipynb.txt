{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b9e7f87e",
   "metadata": {
    "papermill": {
     "duration": 0.001581,
     "end_time": "2024-06-07T07:00:54.655102",
     "exception": false,
     "start_time": "2024-06-07T07:00:54.653521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90c95c6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:54.658267Z",
     "iopub.status.busy": "2024-06-07T07:00:54.658060Z",
     "iopub.status.idle": "2024-06-07T07:00:56.536763Z",
     "shell.execute_reply": "2024-06-07T07:00:56.535964Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.88278,
     "end_time": "2024-06-07T07:00:56.539017",
     "exception": false,
     "start_time": "2024-06-07T07:00:54.656237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a4d8bfdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.543668Z",
     "iopub.status.busy": "2024-06-07T07:00:56.543198Z",
     "iopub.status.idle": "2024-06-07T07:00:56.546948Z",
     "shell.execute_reply": "2024-06-07T07:00:56.545964Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008545,
     "end_time": "2024-06-07T07:00:56.548968",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.540423",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b125fc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.553123Z",
     "iopub.status.busy": "2024-06-07T07:00:56.552910Z",
     "iopub.status.idle": "2024-06-07T07:00:56.555781Z",
     "shell.execute_reply": "2024-06-07T07:00:56.554936Z"
    },
    "papermill": {
     "duration": 0.00779,
     "end_time": "2024-06-07T07:00:56.558140",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.550350",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0d41c16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.562048Z",
     "iopub.status.busy": "2024-06-07T07:00:56.561744Z",
     "iopub.status.idle": "2024-06-07T07:00:56.566154Z",
     "shell.execute_reply": "2024-06-07T07:00:56.565249Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008464,
     "end_time": "2024-06-07T07:00:56.568085",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.559621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "467b2851",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001201,
     "end_time": "2024-06-07T07:00:56.570619",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.569418",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7c9293ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.574289Z",
     "iopub.status.busy": "2024-06-07T07:00:56.574011Z",
     "iopub.status.idle": "2024-06-07T07:00:56.580190Z",
     "shell.execute_reply": "2024-06-07T07:00:56.579269Z"
    },
    "papermill": {
     "duration": 0.010666,
     "end_time": "2024-06-07T07:00:56.582421",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.571755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89202942",
   "metadata": {
    "papermill": {
     "duration": 0.001503,
     "end_time": "2024-06-07T07:00:56.585516",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.584013",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad2991ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.589458Z",
     "iopub.status.busy": "2024-06-07T07:00:56.589178Z",
     "iopub.status.idle": "2024-06-07T07:00:56.712625Z",
     "shell.execute_reply": "2024-06-07T07:00:56.710932Z"
    },
    "papermill": {
     "duration": 0.129147,
     "end_time": "2024-06-07T07:00:56.716008",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.586861",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31daa2e8",
   "metadata": {
    "papermill": {
     "duration": 0.00187,
     "end_time": "2024-06-07T07:00:56.719785",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.717915",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef7dec95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T07:00:56.730343Z",
     "iopub.status.busy": "2024-06-07T07:00:56.729573Z",
     "iopub.status.idle": "2024-06-07T07:00:56.893811Z",
     "shell.execute_reply": "2024-06-07T07:00:56.893449Z"
    },
    "papermill": {
     "duration": 0.170417,
     "end_time": "2024-06-07T07:00:56.895303",
     "exception": false,
     "start_time": "2024-06-07T07:00:56.724886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.256095,
   "end_time": "2024-06-07T07:00:57.332853",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-06-07T07:00:54.076758",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}