{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9696e1e5",
   "metadata": {
    "papermill": {
     "duration": 0.007515,
     "end_time": "2024-09-10T13:53:27.399262",
     "exception": false,
     "start_time": "2024-09-10T13:53:27.391747",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d8eee616",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:27.412191Z",
     "iopub.status.busy": "2024-09-10T13:53:27.411097Z",
     "iopub.status.idle": "2024-09-10T13:53:28.822843Z",
     "shell.execute_reply": "2024-09-10T13:53:28.822331Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.419777,
     "end_time": "2024-09-10T13:53:28.824394",
     "exception": false,
     "start_time": "2024-09-10T13:53:27.404617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5833dcf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.827618Z",
     "iopub.status.busy": "2024-09-10T13:53:28.827297Z",
     "iopub.status.idle": "2024-09-10T13:53:28.829486Z",
     "shell.execute_reply": "2024-09-10T13:53:28.829019Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005124,
     "end_time": "2024-09-10T13:53:28.830719",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.825595",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cfa62271",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.833243Z",
     "iopub.status.busy": "2024-09-10T13:53:28.833100Z",
     "iopub.status.idle": "2024-09-10T13:53:28.839351Z",
     "shell.execute_reply": "2024-09-10T13:53:28.838958Z"
    },
    "papermill": {
     "duration": 0.008892,
     "end_time": "2024-09-10T13:53:28.840556",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.831664",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0066d0ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.843126Z",
     "iopub.status.busy": "2024-09-10T13:53:28.842985Z",
     "iopub.status.idle": "2024-09-10T13:53:28.851802Z",
     "shell.execute_reply": "2024-09-10T13:53:28.851446Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011552,
     "end_time": "2024-09-10T13:53:28.853094",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.841542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72fc713",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000986,
     "end_time": "2024-09-10T13:53:28.855084",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.854098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "73ca7511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.857682Z",
     "iopub.status.busy": "2024-09-10T13:53:28.857542Z",
     "iopub.status.idle": "2024-09-10T13:53:28.861593Z",
     "shell.execute_reply": "2024-09-10T13:53:28.861237Z"
    },
    "papermill": {
     "duration": 0.006854,
     "end_time": "2024-09-10T13:53:28.862950",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.856096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22fb1ee",
   "metadata": {
    "papermill": {
     "duration": 0.001145,
     "end_time": "2024-09-10T13:53:28.865240",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.864095",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2ef5edc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.868135Z",
     "iopub.status.busy": "2024-09-10T13:53:28.867984Z",
     "iopub.status.idle": "2024-09-10T13:53:28.963216Z",
     "shell.execute_reply": "2024-09-10T13:53:28.962829Z"
    },
    "papermill": {
     "duration": 0.098295,
     "end_time": "2024-09-10T13:53:28.964589",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.866294",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08b5de40",
   "metadata": {
    "papermill": {
     "duration": 0.001392,
     "end_time": "2024-09-10T13:53:28.967557",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.966165",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b5322da2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T13:53:28.970876Z",
     "iopub.status.busy": "2024-09-10T13:53:28.970725Z",
     "iopub.status.idle": "2024-09-10T13:53:29.082952Z",
     "shell.execute_reply": "2024-09-10T13:53:29.082621Z"
    },
    "papermill": {
     "duration": 0.115457,
     "end_time": "2024-09-10T13:53:29.084350",
     "exception": false,
     "start_time": "2024-09-10T13:53:28.968893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.754239,
   "end_time": "2024-09-10T13:53:29.423075",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-09-10T13:53:26.668836",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}