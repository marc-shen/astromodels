{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ed86dd70",
   "metadata": {
    "papermill": {
     "duration": 0.001611,
     "end_time": "2024-05-13T23:11:50.753874",
     "exception": false,
     "start_time": "2024-05-13T23:11:50.752263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c0a9b09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:50.757451Z",
     "iopub.status.busy": "2024-05-13T23:11:50.757240Z",
     "iopub.status.idle": "2024-05-13T23:11:52.286399Z",
     "shell.execute_reply": "2024-05-13T23:11:52.285738Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.533078,
     "end_time": "2024-05-13T23:11:52.288208",
     "exception": false,
     "start_time": "2024-05-13T23:11:50.755130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "610e55b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.292474Z",
     "iopub.status.busy": "2024-05-13T23:11:52.291878Z",
     "iopub.status.idle": "2024-05-13T23:11:52.294451Z",
     "shell.execute_reply": "2024-05-13T23:11:52.294045Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006098,
     "end_time": "2024-05-13T23:11:52.295665",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.289567",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "44036aed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.298665Z",
     "iopub.status.busy": "2024-05-13T23:11:52.298489Z",
     "iopub.status.idle": "2024-05-13T23:11:52.300709Z",
     "shell.execute_reply": "2024-05-13T23:11:52.300246Z"
    },
    "papermill": {
     "duration": 0.00535,
     "end_time": "2024-05-13T23:11:52.302143",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.296793",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c62bb465",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.305339Z",
     "iopub.status.busy": "2024-05-13T23:11:52.305154Z",
     "iopub.status.idle": "2024-05-13T23:11:52.313864Z",
     "shell.execute_reply": "2024-05-13T23:11:52.313246Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011927,
     "end_time": "2024-05-13T23:11:52.315341",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.303414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c03bd32",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001097,
     "end_time": "2024-05-13T23:11:52.317731",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.316634",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4ea34554",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.320649Z",
     "iopub.status.busy": "2024-05-13T23:11:52.320462Z",
     "iopub.status.idle": "2024-05-13T23:11:52.325003Z",
     "shell.execute_reply": "2024-05-13T23:11:52.324566Z"
    },
    "papermill": {
     "duration": 0.007801,
     "end_time": "2024-05-13T23:11:52.326533",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.318732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "633f9d03",
   "metadata": {
    "papermill": {
     "duration": 0.001242,
     "end_time": "2024-05-13T23:11:52.329085",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.327843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ce5970f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.332206Z",
     "iopub.status.busy": "2024-05-13T23:11:52.332017Z",
     "iopub.status.idle": "2024-05-13T23:11:52.437185Z",
     "shell.execute_reply": "2024-05-13T23:11:52.436714Z"
    },
    "papermill": {
     "duration": 0.10846,
     "end_time": "2024-05-13T23:11:52.438648",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.330188",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3931094",
   "metadata": {
    "papermill": {
     "duration": 0.001401,
     "end_time": "2024-05-13T23:11:52.441736",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.440335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed507d38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T23:11:52.445337Z",
     "iopub.status.busy": "2024-05-13T23:11:52.445162Z",
     "iopub.status.idle": "2024-05-13T23:11:52.572977Z",
     "shell.execute_reply": "2024-05-13T23:11:52.572556Z"
    },
    "papermill": {
     "duration": 0.131403,
     "end_time": "2024-05-13T23:11:52.574545",
     "exception": false,
     "start_time": "2024-05-13T23:11:52.443142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.988456,
   "end_time": "2024-05-13T23:11:53.015492",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-05-13T23:11:50.027036",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}