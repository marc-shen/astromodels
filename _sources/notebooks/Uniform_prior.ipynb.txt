{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b7d01fab",
   "metadata": {
    "papermill": {
     "duration": 0.001468,
     "end_time": "2024-05-08T21:31:40.087002",
     "exception": false,
     "start_time": "2024-05-08T21:31:40.085534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0f67e38c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:40.090179Z",
     "iopub.status.busy": "2024-05-08T21:31:40.089992Z",
     "iopub.status.idle": "2024-05-08T21:31:41.680979Z",
     "shell.execute_reply": "2024-05-08T21:31:41.680311Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.594332,
     "end_time": "2024-05-08T21:31:41.682515",
     "exception": false,
     "start_time": "2024-05-08T21:31:40.088183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d809f90c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.686580Z",
     "iopub.status.busy": "2024-05-08T21:31:41.686171Z",
     "iopub.status.idle": "2024-05-08T21:31:41.688544Z",
     "shell.execute_reply": "2024-05-08T21:31:41.688167Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005947,
     "end_time": "2024-05-08T21:31:41.689811",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.683864",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea4bf925",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.692908Z",
     "iopub.status.busy": "2024-05-08T21:31:41.692721Z",
     "iopub.status.idle": "2024-05-08T21:31:41.695299Z",
     "shell.execute_reply": "2024-05-08T21:31:41.694872Z"
    },
    "papermill": {
     "duration": 0.005704,
     "end_time": "2024-05-08T21:31:41.696735",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.691031",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9aa74808",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.699668Z",
     "iopub.status.busy": "2024-05-08T21:31:41.699504Z",
     "iopub.status.idle": "2024-05-08T21:31:41.706710Z",
     "shell.execute_reply": "2024-05-08T21:31:41.706241Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01014,
     "end_time": "2024-05-08T21:31:41.708072",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.697932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebcaa1ec",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001192,
     "end_time": "2024-05-08T21:31:41.710467",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.709275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "219cbd8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.713633Z",
     "iopub.status.busy": "2024-05-08T21:31:41.713446Z",
     "iopub.status.idle": "2024-05-08T21:31:41.718044Z",
     "shell.execute_reply": "2024-05-08T21:31:41.717657Z"
    },
    "papermill": {
     "duration": 0.007696,
     "end_time": "2024-05-08T21:31:41.719336",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.711640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f6f9aea",
   "metadata": {
    "papermill": {
     "duration": 0.001429,
     "end_time": "2024-05-08T21:31:41.722156",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.720727",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1fbf683b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.726120Z",
     "iopub.status.busy": "2024-05-08T21:31:41.725937Z",
     "iopub.status.idle": "2024-05-08T21:31:41.821024Z",
     "shell.execute_reply": "2024-05-08T21:31:41.820698Z"
    },
    "papermill": {
     "duration": 0.098834,
     "end_time": "2024-05-08T21:31:41.822508",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.723674",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22514f87",
   "metadata": {
    "papermill": {
     "duration": 0.001443,
     "end_time": "2024-05-08T21:31:41.825550",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.824107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ac940d6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-08T21:31:41.829831Z",
     "iopub.status.busy": "2024-05-08T21:31:41.829684Z",
     "iopub.status.idle": "2024-05-08T21:31:41.956351Z",
     "shell.execute_reply": "2024-05-08T21:31:41.955273Z"
    },
    "papermill": {
     "duration": 0.130076,
     "end_time": "2024-05-08T21:31:41.957747",
     "exception": false,
     "start_time": "2024-05-08T21:31:41.827671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.846374,
   "end_time": "2024-05-08T21:31:42.382689",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-05-08T21:31:39.536315",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}