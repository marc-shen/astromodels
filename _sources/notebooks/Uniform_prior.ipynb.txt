{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "af145fbb",
   "metadata": {
    "papermill": {
     "duration": 0.007206,
     "end_time": "2024-09-10T16:12:55.482641",
     "exception": false,
     "start_time": "2024-09-10T16:12:55.475435",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "35f33cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:55.493486Z",
     "iopub.status.busy": "2024-09-10T16:12:55.492986Z",
     "iopub.status.idle": "2024-09-10T16:12:57.323036Z",
     "shell.execute_reply": "2024-09-10T16:12:57.322267Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.837686,
     "end_time": "2024-09-10T16:12:57.325319",
     "exception": false,
     "start_time": "2024-09-10T16:12:55.487633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9b584940",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.329550Z",
     "iopub.status.busy": "2024-09-10T16:12:57.329058Z",
     "iopub.status.idle": "2024-09-10T16:12:57.332741Z",
     "shell.execute_reply": "2024-09-10T16:12:57.331695Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007786,
     "end_time": "2024-09-10T16:12:57.334558",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.326772",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "613d7b45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.338388Z",
     "iopub.status.busy": "2024-09-10T16:12:57.338152Z",
     "iopub.status.idle": "2024-09-10T16:12:57.347447Z",
     "shell.execute_reply": "2024-09-10T16:12:57.346682Z"
    },
    "papermill": {
     "duration": 0.013833,
     "end_time": "2024-09-10T16:12:57.349738",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.335905",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16073ff9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.353631Z",
     "iopub.status.busy": "2024-09-10T16:12:57.353361Z",
     "iopub.status.idle": "2024-09-10T16:12:57.363675Z",
     "shell.execute_reply": "2024-09-10T16:12:57.362894Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014548,
     "end_time": "2024-09-10T16:12:57.365729",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.351181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15ea27d2",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001168,
     "end_time": "2024-09-10T16:12:57.368294",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.367126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fcdf3251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.371788Z",
     "iopub.status.busy": "2024-09-10T16:12:57.371553Z",
     "iopub.status.idle": "2024-09-10T16:12:57.378237Z",
     "shell.execute_reply": "2024-09-10T16:12:57.377306Z"
    },
    "papermill": {
     "duration": 0.011438,
     "end_time": "2024-09-10T16:12:57.380844",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.369406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cd5ffff",
   "metadata": {
    "papermill": {
     "duration": 0.001489,
     "end_time": "2024-09-10T16:12:57.383965",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.382476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "908da165",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.388121Z",
     "iopub.status.busy": "2024-09-10T16:12:57.387883Z",
     "iopub.status.idle": "2024-09-10T16:12:57.514909Z",
     "shell.execute_reply": "2024-09-10T16:12:57.514411Z"
    },
    "papermill": {
     "duration": 0.13109,
     "end_time": "2024-09-10T16:12:57.516609",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.385519",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6cc18d",
   "metadata": {
    "papermill": {
     "duration": 0.00157,
     "end_time": "2024-09-10T16:12:57.519904",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.518334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2be56820",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T16:12:57.524386Z",
     "iopub.status.busy": "2024-09-10T16:12:57.524164Z",
     "iopub.status.idle": "2024-09-10T16:12:57.681676Z",
     "shell.execute_reply": "2024-09-10T16:12:57.680603Z"
    },
    "papermill": {
     "duration": 0.163472,
     "end_time": "2024-09-10T16:12:57.684701",
     "exception": false,
     "start_time": "2024-09-10T16:12:57.521229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.409179,
   "end_time": "2024-09-10T16:12:58.231507",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-09-10T16:12:54.822328",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}