{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "331bdffa",
   "metadata": {
    "papermill": {
     "duration": 0.003917,
     "end_time": "2024-02-03T01:37:07.397461",
     "exception": false,
     "start_time": "2024-02-03T01:37:07.393544",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb620263",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:07.403952Z",
     "iopub.status.busy": "2024-02-03T01:37:07.403531Z",
     "iopub.status.idle": "2024-02-03T01:37:09.964351Z",
     "shell.execute_reply": "2024-02-03T01:37:09.962042Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.569347,
     "end_time": "2024-02-03T01:37:09.969258",
     "exception": false,
     "start_time": "2024-02-03T01:37:07.399911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8c2a07af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:09.976940Z",
     "iopub.status.busy": "2024-02-03T01:37:09.976498Z",
     "iopub.status.idle": "2024-02-03T01:37:09.982120Z",
     "shell.execute_reply": "2024-02-03T01:37:09.980867Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013995,
     "end_time": "2024-02-03T01:37:09.986034",
     "exception": false,
     "start_time": "2024-02-03T01:37:09.972039",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14c8eed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:09.992841Z",
     "iopub.status.busy": "2024-02-03T01:37:09.992491Z",
     "iopub.status.idle": "2024-02-03T01:37:09.999590Z",
     "shell.execute_reply": "2024-02-03T01:37:09.998406Z"
    },
    "papermill": {
     "duration": 0.014674,
     "end_time": "2024-02-03T01:37:10.003210",
     "exception": false,
     "start_time": "2024-02-03T01:37:09.988536",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0db75e3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:10.009767Z",
     "iopub.status.busy": "2024-02-03T01:37:10.009436Z",
     "iopub.status.idle": "2024-02-03T01:37:10.017806Z",
     "shell.execute_reply": "2024-02-03T01:37:10.016719Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01561,
     "end_time": "2024-02-03T01:37:10.021362",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.005752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2595c95d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002335,
     "end_time": "2024-02-03T01:37:10.025989",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.023654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "920bff47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:10.032005Z",
     "iopub.status.busy": "2024-02-03T01:37:10.031662Z",
     "iopub.status.idle": "2024-02-03T01:37:10.042562Z",
     "shell.execute_reply": "2024-02-03T01:37:10.041305Z"
    },
    "papermill": {
     "duration": 0.017903,
     "end_time": "2024-02-03T01:37:10.046136",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.028233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfb31de0",
   "metadata": {
    "papermill": {
     "duration": 0.002761,
     "end_time": "2024-02-03T01:37:10.051557",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.048796",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "87486261",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:10.058188Z",
     "iopub.status.busy": "2024-02-03T01:37:10.057874Z",
     "iopub.status.idle": "2024-02-03T01:37:10.267224Z",
     "shell.execute_reply": "2024-02-03T01:37:10.265063Z"
    },
    "papermill": {
     "duration": 0.217153,
     "end_time": "2024-02-03T01:37:10.271367",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.054214",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06b972c9",
   "metadata": {
    "papermill": {
     "duration": 0.002918,
     "end_time": "2024-02-03T01:37:10.277355",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.274437",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "31a0c64f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-03T01:37:10.284694Z",
     "iopub.status.busy": "2024-02-03T01:37:10.284235Z",
     "iopub.status.idle": "2024-02-03T01:37:10.553495Z",
     "shell.execute_reply": "2024-02-03T01:37:10.552286Z"
    },
    "papermill": {
     "duration": 0.277111,
     "end_time": "2024-02-03T01:37:10.557197",
     "exception": false,
     "start_time": "2024-02-03T01:37:10.280086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.513686,
   "end_time": "2024-02-03T01:37:11.095120",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-02-03T01:37:06.581434",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}