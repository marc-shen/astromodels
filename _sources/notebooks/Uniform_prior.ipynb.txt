{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f652867e",
   "metadata": {
    "papermill": {
     "duration": 0.011127,
     "end_time": "2024-09-11T21:49:39.426116",
     "exception": false,
     "start_time": "2024-09-11T21:49:39.414989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06c3f217",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:39.440756Z",
     "iopub.status.busy": "2024-09-11T21:49:39.440035Z",
     "iopub.status.idle": "2024-09-11T21:49:40.839538Z",
     "shell.execute_reply": "2024-09-11T21:49:40.839026Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.407872,
     "end_time": "2024-09-11T21:49:40.841072",
     "exception": false,
     "start_time": "2024-09-11T21:49:39.433200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0745b5e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.844207Z",
     "iopub.status.busy": "2024-09-11T21:49:40.843903Z",
     "iopub.status.idle": "2024-09-11T21:49:40.852279Z",
     "shell.execute_reply": "2024-09-11T21:49:40.851860Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011321,
     "end_time": "2024-09-11T21:49:40.853585",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.842264",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea11a178",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.856219Z",
     "iopub.status.busy": "2024-09-11T21:49:40.856079Z",
     "iopub.status.idle": "2024-09-11T21:49:40.857987Z",
     "shell.execute_reply": "2024-09-11T21:49:40.857597Z"
    },
    "papermill": {
     "duration": 0.004603,
     "end_time": "2024-09-11T21:49:40.859227",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.854624",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4dc4994",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.861836Z",
     "iopub.status.busy": "2024-09-11T21:49:40.861703Z",
     "iopub.status.idle": "2024-09-11T21:49:40.868270Z",
     "shell.execute_reply": "2024-09-11T21:49:40.867880Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009227,
     "end_time": "2024-09-11T21:49:40.869460",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.860233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eec8244c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000995,
     "end_time": "2024-09-11T21:49:40.871452",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.870457",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bdc9490d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.874012Z",
     "iopub.status.busy": "2024-09-11T21:49:40.873872Z",
     "iopub.status.idle": "2024-09-11T21:49:40.884260Z",
     "shell.execute_reply": "2024-09-11T21:49:40.883868Z"
    },
    "papermill": {
     "duration": 0.013098,
     "end_time": "2024-09-11T21:49:40.885517",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.872419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9052f2ee",
   "metadata": {
    "papermill": {
     "duration": 0.001162,
     "end_time": "2024-09-11T21:49:40.887839",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.886677",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "502faf74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.890651Z",
     "iopub.status.busy": "2024-09-11T21:49:40.890496Z",
     "iopub.status.idle": "2024-09-11T21:49:40.990891Z",
     "shell.execute_reply": "2024-09-11T21:49:40.990517Z"
    },
    "papermill": {
     "duration": 0.103377,
     "end_time": "2024-09-11T21:49:40.992271",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.888894",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2b0f7f5",
   "metadata": {
    "papermill": {
     "duration": 0.001343,
     "end_time": "2024-09-11T21:49:40.995242",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.993899",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "064dcb05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T21:49:40.998550Z",
     "iopub.status.busy": "2024-09-11T21:49:40.998385Z",
     "iopub.status.idle": "2024-09-11T21:49:41.122380Z",
     "shell.execute_reply": "2024-09-11T21:49:41.121979Z"
    },
    "papermill": {
     "duration": 0.127136,
     "end_time": "2024-09-11T21:49:41.123649",
     "exception": false,
     "start_time": "2024-09-11T21:49:40.996513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.533555,
   "end_time": "2024-09-11T21:49:41.456757",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-09-11T21:49:38.923202",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}