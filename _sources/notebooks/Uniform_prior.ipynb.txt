{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "90819879",
   "metadata": {
    "papermill": {
     "duration": 0.003909,
     "end_time": "2023-11-01T01:15:06.251637",
     "exception": false,
     "start_time": "2023-11-01T01:15:06.247728",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2e241d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:06.261399Z",
     "iopub.status.busy": "2023-11-01T01:15:06.260804Z",
     "iopub.status.idle": "2023-11-01T01:15:10.204704Z",
     "shell.execute_reply": "2023-11-01T01:15:10.202450Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.955905,
     "end_time": "2023-11-01T01:15:10.211290",
     "exception": false,
     "start_time": "2023-11-01T01:15:06.255385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "13c7af04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.222879Z",
     "iopub.status.busy": "2023-11-01T01:15:10.222247Z",
     "iopub.status.idle": "2023-11-01T01:15:10.230794Z",
     "shell.execute_reply": "2023-11-01T01:15:10.228733Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.021202,
     "end_time": "2023-11-01T01:15:10.236140",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.214938",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3168667e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.245153Z",
     "iopub.status.busy": "2023-11-01T01:15:10.244673Z",
     "iopub.status.idle": "2023-11-01T01:15:10.253280Z",
     "shell.execute_reply": "2023-11-01T01:15:10.251166Z"
    },
    "papermill": {
     "duration": 0.020647,
     "end_time": "2023-11-01T01:15:10.259883",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.239236",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1081d47f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.270418Z",
     "iopub.status.busy": "2023-11-01T01:15:10.269877Z",
     "iopub.status.idle": "2023-11-01T01:15:10.282721Z",
     "shell.execute_reply": "2023-11-01T01:15:10.280296Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.025601,
     "end_time": "2023-11-01T01:15:10.289429",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.263828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d55a30d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.004954,
     "end_time": "2023-11-01T01:15:10.298977",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.294023",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "13b58339",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.309846Z",
     "iopub.status.busy": "2023-11-01T01:15:10.309223Z",
     "iopub.status.idle": "2023-11-01T01:15:10.332412Z",
     "shell.execute_reply": "2023-11-01T01:15:10.329275Z"
    },
    "papermill": {
     "duration": 0.034481,
     "end_time": "2023-11-01T01:15:10.338050",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.303569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9a199aa",
   "metadata": {
    "papermill": {
     "duration": 0.003622,
     "end_time": "2023-11-01T01:15:10.345680",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.342058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fbcab5ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.355581Z",
     "iopub.status.busy": "2023-11-01T01:15:10.354916Z",
     "iopub.status.idle": "2023-11-01T01:15:10.677814Z",
     "shell.execute_reply": "2023-11-01T01:15:10.675627Z"
    },
    "papermill": {
     "duration": 0.334987,
     "end_time": "2023-11-01T01:15:10.684194",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.349207",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36763f8e",
   "metadata": {
    "papermill": {
     "duration": 0.004229,
     "end_time": "2023-11-01T01:15:10.694209",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.689980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "557460a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T01:15:10.709306Z",
     "iopub.status.busy": "2023-11-01T01:15:10.708438Z",
     "iopub.status.idle": "2023-11-01T01:15:11.157739Z",
     "shell.execute_reply": "2023-11-01T01:15:11.155446Z"
    },
    "papermill": {
     "duration": 0.46381,
     "end_time": "2023-11-01T01:15:11.164497",
     "exception": false,
     "start_time": "2023-11-01T01:15:10.700687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.879077,
   "end_time": "2023-11-01T01:15:11.905660",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T01:15:05.026583",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}