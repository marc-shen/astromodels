{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "875abec8",
   "metadata": {
    "papermill": {
     "duration": 0.007248,
     "end_time": "2025-02-01T01:04:02.575714",
     "exception": false,
     "start_time": "2025-02-01T01:04:02.568466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b27cd7c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:02.589242Z",
     "iopub.status.busy": "2025-02-01T01:04:02.588540Z",
     "iopub.status.idle": "2025-02-01T01:04:04.144292Z",
     "shell.execute_reply": "2025-02-01T01:04:04.143812Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.563511,
     "end_time": "2025-02-01T01:04:04.145588",
     "exception": false,
     "start_time": "2025-02-01T01:04:02.582077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fdeaa08a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.148844Z",
     "iopub.status.busy": "2025-02-01T01:04:04.148491Z",
     "iopub.status.idle": "2025-02-01T01:04:04.156871Z",
     "shell.execute_reply": "2025-02-01T01:04:04.156381Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011112,
     "end_time": "2025-02-01T01:04:04.157946",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.146834",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d8768f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.160540Z",
     "iopub.status.busy": "2025-02-01T01:04:04.160400Z",
     "iopub.status.idle": "2025-02-01T01:04:04.168257Z",
     "shell.execute_reply": "2025-02-01T01:04:04.167895Z"
    },
    "papermill": {
     "duration": 0.010351,
     "end_time": "2025-02-01T01:04:04.169308",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.158957",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa051893",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.171857Z",
     "iopub.status.busy": "2025-02-01T01:04:04.171726Z",
     "iopub.status.idle": "2025-02-01T01:04:04.174651Z",
     "shell.execute_reply": "2025-02-01T01:04:04.174273Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00545,
     "end_time": "2025-02-01T01:04:04.175766",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.170316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e558bdf5",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00101,
     "end_time": "2025-02-01T01:04:04.177787",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.176777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "35b9cf25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.180438Z",
     "iopub.status.busy": "2025-02-01T01:04:04.180286Z",
     "iopub.status.idle": "2025-02-01T01:04:04.184516Z",
     "shell.execute_reply": "2025-02-01T01:04:04.184156Z"
    },
    "papermill": {
     "duration": 0.006849,
     "end_time": "2025-02-01T01:04:04.185683",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.178834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c384bf2e",
   "metadata": {
    "papermill": {
     "duration": 0.001162,
     "end_time": "2025-02-01T01:04:04.188095",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.186933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e27d019b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.190929Z",
     "iopub.status.busy": "2025-02-01T01:04:04.190794Z",
     "iopub.status.idle": "2025-02-01T01:04:04.263339Z",
     "shell.execute_reply": "2025-02-01T01:04:04.262958Z"
    },
    "papermill": {
     "duration": 0.075307,
     "end_time": "2025-02-01T01:04:04.264559",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.189252",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94fb8cf1",
   "metadata": {
    "papermill": {
     "duration": 0.001479,
     "end_time": "2025-02-01T01:04:04.267709",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.266230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e9ae79fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-01T01:04:04.271132Z",
     "iopub.status.busy": "2025-02-01T01:04:04.270992Z",
     "iopub.status.idle": "2025-02-01T01:04:04.367012Z",
     "shell.execute_reply": "2025-02-01T01:04:04.366616Z"
    },
    "papermill": {
     "duration": 0.099071,
     "end_time": "2025-02-01T01:04:04.368155",
     "exception": false,
     "start_time": "2025-02-01T01:04:04.269084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.011995,
   "end_time": "2025-02-01T01:04:04.810982",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-02-01T01:04:01.798987",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}