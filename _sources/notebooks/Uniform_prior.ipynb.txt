{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "952e39ab",
   "metadata": {
    "papermill": {
     "duration": 0.005711,
     "end_time": "2025-02-05T00:54:00.953386",
     "exception": false,
     "start_time": "2025-02-05T00:54:00.947675",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "55936da7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:00.963535Z",
     "iopub.status.busy": "2025-02-05T00:54:00.962777Z",
     "iopub.status.idle": "2025-02-05T00:54:02.369638Z",
     "shell.execute_reply": "2025-02-05T00:54:02.369133Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.413749,
     "end_time": "2025-02-05T00:54:02.370924",
     "exception": false,
     "start_time": "2025-02-05T00:54:00.957175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ccd5fcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.374149Z",
     "iopub.status.busy": "2025-02-05T00:54:02.373800Z",
     "iopub.status.idle": "2025-02-05T00:54:02.375932Z",
     "shell.execute_reply": "2025-02-05T00:54:02.375592Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004811,
     "end_time": "2025-02-05T00:54:02.376990",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.372179",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce3f0919",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.379611Z",
     "iopub.status.busy": "2025-02-05T00:54:02.379464Z",
     "iopub.status.idle": "2025-02-05T00:54:02.383213Z",
     "shell.execute_reply": "2025-02-05T00:54:02.382748Z"
    },
    "papermill": {
     "duration": 0.006427,
     "end_time": "2025-02-05T00:54:02.384514",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.378087",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1eac7587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.387643Z",
     "iopub.status.busy": "2025-02-05T00:54:02.387459Z",
     "iopub.status.idle": "2025-02-05T00:54:02.390554Z",
     "shell.execute_reply": "2025-02-05T00:54:02.390193Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005863,
     "end_time": "2025-02-05T00:54:02.391638",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.385775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9bbf873",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000997,
     "end_time": "2025-02-05T00:54:02.393735",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.392738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "47d91e74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.396281Z",
     "iopub.status.busy": "2025-02-05T00:54:02.396102Z",
     "iopub.status.idle": "2025-02-05T00:54:02.400298Z",
     "shell.execute_reply": "2025-02-05T00:54:02.399887Z"
    },
    "papermill": {
     "duration": 0.006645,
     "end_time": "2025-02-05T00:54:02.401339",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.394694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c28de105",
   "metadata": {
    "papermill": {
     "duration": 0.001132,
     "end_time": "2025-02-05T00:54:02.403687",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.402555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c49e92dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.406472Z",
     "iopub.status.busy": "2025-02-05T00:54:02.406338Z",
     "iopub.status.idle": "2025-02-05T00:54:02.474390Z",
     "shell.execute_reply": "2025-02-05T00:54:02.474062Z"
    },
    "papermill": {
     "duration": 0.070805,
     "end_time": "2025-02-05T00:54:02.475619",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.404814",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "175d5e60",
   "metadata": {
    "papermill": {
     "duration": 0.001401,
     "end_time": "2025-02-05T00:54:02.478685",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.477284",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c61b89b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T00:54:02.482272Z",
     "iopub.status.busy": "2025-02-05T00:54:02.482125Z",
     "iopub.status.idle": "2025-02-05T00:54:02.579980Z",
     "shell.execute_reply": "2025-02-05T00:54:02.579457Z"
    },
    "papermill": {
     "duration": 0.100931,
     "end_time": "2025-02-05T00:54:02.581042",
     "exception": false,
     "start_time": "2025-02-05T00:54:02.480111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.494202,
   "end_time": "2025-02-05T00:54:02.923566",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-02-05T00:54:00.429364",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}