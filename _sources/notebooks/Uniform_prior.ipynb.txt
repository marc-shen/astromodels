{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "17ae15dc",
   "metadata": {
    "papermill": {
     "duration": 0.005096,
     "end_time": "2023-11-01T17:26:34.463194",
     "exception": false,
     "start_time": "2023-11-01T17:26:34.458098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9acd7ab1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:34.474027Z",
     "iopub.status.busy": "2023-11-01T17:26:34.473453Z",
     "iopub.status.idle": "2023-11-01T17:26:38.189476Z",
     "shell.execute_reply": "2023-11-01T17:26:38.186590Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.728218,
     "end_time": "2023-11-01T17:26:38.195652",
     "exception": false,
     "start_time": "2023-11-01T17:26:34.467434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9613f27d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.213162Z",
     "iopub.status.busy": "2023-11-01T17:26:38.212287Z",
     "iopub.status.idle": "2023-11-01T17:26:38.225064Z",
     "shell.execute_reply": "2023-11-01T17:26:38.222545Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.029876,
     "end_time": "2023-11-01T17:26:38.230004",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.200128",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd1b1319",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.237849Z",
     "iopub.status.busy": "2023-11-01T17:26:38.237175Z",
     "iopub.status.idle": "2023-11-01T17:26:38.244976Z",
     "shell.execute_reply": "2023-11-01T17:26:38.243580Z"
    },
    "papermill": {
     "duration": 0.016764,
     "end_time": "2023-11-01T17:26:38.249359",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.232595",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27fc557d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.256752Z",
     "iopub.status.busy": "2023-11-01T17:26:38.256316Z",
     "iopub.status.idle": "2023-11-01T17:26:38.268190Z",
     "shell.execute_reply": "2023-11-01T17:26:38.266725Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.020708,
     "end_time": "2023-11-01T17:26:38.272726",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.252018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcd95155",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002931,
     "end_time": "2023-11-01T17:26:38.278379",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.275448",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64b61f02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.286813Z",
     "iopub.status.busy": "2023-11-01T17:26:38.285393Z",
     "iopub.status.idle": "2023-11-01T17:26:38.302735Z",
     "shell.execute_reply": "2023-11-01T17:26:38.301272Z"
    },
    "papermill": {
     "duration": 0.02617,
     "end_time": "2023-11-01T17:26:38.307182",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.281012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fd313b4",
   "metadata": {
    "papermill": {
     "duration": 0.003073,
     "end_time": "2023-11-01T17:26:38.313358",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.310285",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c6367b37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.321270Z",
     "iopub.status.busy": "2023-11-01T17:26:38.320850Z",
     "iopub.status.idle": "2023-11-01T17:26:38.569678Z",
     "shell.execute_reply": "2023-11-01T17:26:38.567970Z"
    },
    "papermill": {
     "duration": 0.258546,
     "end_time": "2023-11-01T17:26:38.574655",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.316109",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3a99200",
   "metadata": {
    "papermill": {
     "duration": 0.004999,
     "end_time": "2023-11-01T17:26:38.584608",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.579609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e01968cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T17:26:38.596620Z",
     "iopub.status.busy": "2023-11-01T17:26:38.596047Z",
     "iopub.status.idle": "2023-11-01T17:26:38.930290Z",
     "shell.execute_reply": "2023-11-01T17:26:38.928669Z"
    },
    "papermill": {
     "duration": 0.347164,
     "end_time": "2023-11-01T17:26:38.935874",
     "exception": false,
     "start_time": "2023-11-01T17:26:38.588710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.31515,
   "end_time": "2023-11-01T17:26:39.673079",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T17:26:33.357929",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}