{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "65163298",
   "metadata": {
    "papermill": {
     "duration": 0.009229,
     "end_time": "2025-04-30T17:03:14.868381",
     "exception": false,
     "start_time": "2025-04-30T17:03:14.859152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dbb1f4c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:14.883605Z",
     "iopub.status.busy": "2025-04-30T17:03:14.882949Z",
     "iopub.status.idle": "2025-04-30T17:03:16.316994Z",
     "shell.execute_reply": "2025-04-30T17:03:16.316275Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.442685,
     "end_time": "2025-04-30T17:03:16.318355",
     "exception": false,
     "start_time": "2025-04-30T17:03:14.875670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "515bc29f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.322199Z",
     "iopub.status.busy": "2025-04-30T17:03:16.321774Z",
     "iopub.status.idle": "2025-04-30T17:03:16.328589Z",
     "shell.execute_reply": "2025-04-30T17:03:16.328038Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010106,
     "end_time": "2025-04-30T17:03:16.329909",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.319803",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "45179d9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.333116Z",
     "iopub.status.busy": "2025-04-30T17:03:16.332916Z",
     "iopub.status.idle": "2025-04-30T17:03:16.340360Z",
     "shell.execute_reply": "2025-04-30T17:03:16.339794Z"
    },
    "papermill": {
     "duration": 0.010426,
     "end_time": "2025-04-30T17:03:16.341661",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.331235",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "603604a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.344983Z",
     "iopub.status.busy": "2025-04-30T17:03:16.344794Z",
     "iopub.status.idle": "2025-04-30T17:03:16.354220Z",
     "shell.execute_reply": "2025-04-30T17:03:16.353588Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012451,
     "end_time": "2025-04-30T17:03:16.355478",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.343027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12f94d9c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001067,
     "end_time": "2025-04-30T17:03:16.357837",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.356770",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1daceb8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.360827Z",
     "iopub.status.busy": "2025-04-30T17:03:16.360630Z",
     "iopub.status.idle": "2025-04-30T17:03:16.370942Z",
     "shell.execute_reply": "2025-04-30T17:03:16.370377Z"
    },
    "papermill": {
     "duration": 0.013273,
     "end_time": "2025-04-30T17:03:16.372187",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.358914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "018eca89",
   "metadata": {
    "papermill": {
     "duration": 0.001263,
     "end_time": "2025-04-30T17:03:16.374988",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.373725",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "beabe367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.378628Z",
     "iopub.status.busy": "2025-04-30T17:03:16.378411Z",
     "iopub.status.idle": "2025-04-30T17:03:16.508215Z",
     "shell.execute_reply": "2025-04-30T17:03:16.507839Z"
    },
    "papermill": {
     "duration": 0.133314,
     "end_time": "2025-04-30T17:03:16.509621",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.376307",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20bbbcf4",
   "metadata": {
    "papermill": {
     "duration": 0.008348,
     "end_time": "2025-04-30T17:03:16.524862",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.516514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a89e7883",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-30T17:03:16.556222Z",
     "iopub.status.busy": "2025-04-30T17:03:16.556024Z",
     "iopub.status.idle": "2025-04-30T17:03:16.667153Z",
     "shell.execute_reply": "2025-04-30T17:03:16.666088Z"
    },
    "papermill": {
     "duration": 0.134505,
     "end_time": "2025-04-30T17:03:16.669152",
     "exception": false,
     "start_time": "2025-04-30T17:03:16.534647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.777182,
   "end_time": "2025-04-30T17:03:17.117342",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-04-30T17:03:14.340160",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}