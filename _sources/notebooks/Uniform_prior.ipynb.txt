{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "321e6a71",
   "metadata": {
    "papermill": {
     "duration": 0.003662,
     "end_time": "2025-05-01T00:24:05.370441",
     "exception": false,
     "start_time": "2025-05-01T00:24:05.366779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b161ec59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:05.375938Z",
     "iopub.status.busy": "2025-05-01T00:24:05.375685Z",
     "iopub.status.idle": "2025-05-01T00:24:06.782392Z",
     "shell.execute_reply": "2025-05-01T00:24:06.781905Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.410926,
     "end_time": "2025-05-01T00:24:06.783716",
     "exception": false,
     "start_time": "2025-05-01T00:24:05.372790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea0365d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.786888Z",
     "iopub.status.busy": "2025-05-01T00:24:06.786564Z",
     "iopub.status.idle": "2025-05-01T00:24:06.788714Z",
     "shell.execute_reply": "2025-05-01T00:24:06.788339Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004797,
     "end_time": "2025-05-01T00:24:06.789752",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.784955",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dea6abcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.792224Z",
     "iopub.status.busy": "2025-05-01T00:24:06.792093Z",
     "iopub.status.idle": "2025-05-01T00:24:06.799102Z",
     "shell.execute_reply": "2025-05-01T00:24:06.798537Z"
    },
    "papermill": {
     "duration": 0.009599,
     "end_time": "2025-05-01T00:24:06.800343",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.790744",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8f6897db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.803065Z",
     "iopub.status.busy": "2025-05-01T00:24:06.802922Z",
     "iopub.status.idle": "2025-05-01T00:24:06.811852Z",
     "shell.execute_reply": "2025-05-01T00:24:06.811398Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011524,
     "end_time": "2025-05-01T00:24:06.812984",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.801460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6ae11f9",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001013,
     "end_time": "2025-05-01T00:24:06.815105",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.814092",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "889ad888",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.817623Z",
     "iopub.status.busy": "2025-05-01T00:24:06.817494Z",
     "iopub.status.idle": "2025-05-01T00:24:06.821514Z",
     "shell.execute_reply": "2025-05-01T00:24:06.821075Z"
    },
    "papermill": {
     "duration": 0.006466,
     "end_time": "2025-05-01T00:24:06.822574",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.816108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2704f96d",
   "metadata": {
    "papermill": {
     "duration": 0.001087,
     "end_time": "2025-05-01T00:24:06.824868",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.823781",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "333b9e7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.827637Z",
     "iopub.status.busy": "2025-05-01T00:24:06.827488Z",
     "iopub.status.idle": "2025-05-01T00:24:06.898075Z",
     "shell.execute_reply": "2025-05-01T00:24:06.897662Z"
    },
    "papermill": {
     "duration": 0.073421,
     "end_time": "2025-05-01T00:24:06.899305",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.825884",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1baa209",
   "metadata": {
    "papermill": {
     "duration": 0.001388,
     "end_time": "2025-05-01T00:24:06.902353",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.900965",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fe0f80dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-01T00:24:06.905998Z",
     "iopub.status.busy": "2025-05-01T00:24:06.905826Z",
     "iopub.status.idle": "2025-05-01T00:24:06.999721Z",
     "shell.execute_reply": "2025-05-01T00:24:06.999371Z"
    },
    "papermill": {
     "duration": 0.097077,
     "end_time": "2025-05-01T00:24:07.000811",
     "exception": false,
     "start_time": "2025-05-01T00:24:06.903734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.462207,
   "end_time": "2025-05-01T00:24:07.329252",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-05-01T00:24:04.867045",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}