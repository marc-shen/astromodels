{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7d5625aa",
   "metadata": {
    "papermill": {
     "duration": 0.005189,
     "end_time": "2023-11-01T02:00:38.731311",
     "exception": false,
     "start_time": "2023-11-01T02:00:38.726122",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b9b1b7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:38.741145Z",
     "iopub.status.busy": "2023-11-01T02:00:38.740436Z",
     "iopub.status.idle": "2023-11-01T02:00:41.980024Z",
     "shell.execute_reply": "2023-11-01T02:00:41.976700Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.250857,
     "end_time": "2023-11-01T02:00:41.985923",
     "exception": false,
     "start_time": "2023-11-01T02:00:38.735066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d5f22c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:41.996262Z",
     "iopub.status.busy": "2023-11-01T02:00:41.995677Z",
     "iopub.status.idle": "2023-11-01T02:00:42.006823Z",
     "shell.execute_reply": "2023-11-01T02:00:42.005129Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.023577,
     "end_time": "2023-11-01T02:00:42.012951",
     "exception": false,
     "start_time": "2023-11-01T02:00:41.989374",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aac3e29f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:42.022657Z",
     "iopub.status.busy": "2023-11-01T02:00:42.022129Z",
     "iopub.status.idle": "2023-11-01T02:00:42.030655Z",
     "shell.execute_reply": "2023-11-01T02:00:42.027882Z"
    },
    "papermill": {
     "duration": 0.019211,
     "end_time": "2023-11-01T02:00:42.035846",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.016635",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8486271f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:42.044536Z",
     "iopub.status.busy": "2023-11-01T02:00:42.043995Z",
     "iopub.status.idle": "2023-11-01T02:00:42.058740Z",
     "shell.execute_reply": "2023-11-01T02:00:42.056278Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.025546,
     "end_time": "2023-11-01T02:00:42.064501",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.038955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "994872d6",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003541,
     "end_time": "2023-11-01T02:00:42.071460",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.067919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "838bbcb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:42.080922Z",
     "iopub.status.busy": "2023-11-01T02:00:42.080013Z",
     "iopub.status.idle": "2023-11-01T02:00:42.100131Z",
     "shell.execute_reply": "2023-11-01T02:00:42.098161Z"
    },
    "papermill": {
     "duration": 0.031285,
     "end_time": "2023-11-01T02:00:42.105891",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.074606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b11531a",
   "metadata": {
    "papermill": {
     "duration": 0.004103,
     "end_time": "2023-11-01T02:00:42.114156",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.110053",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3bf5f7c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:42.126449Z",
     "iopub.status.busy": "2023-11-01T02:00:42.125884Z",
     "iopub.status.idle": "2023-11-01T02:00:42.408029Z",
     "shell.execute_reply": "2023-11-01T02:00:42.406118Z"
    },
    "papermill": {
     "duration": 0.295741,
     "end_time": "2023-11-01T02:00:42.415432",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.119691",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e57bb68b",
   "metadata": {
    "papermill": {
     "duration": 0.005314,
     "end_time": "2023-11-01T02:00:42.425695",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.420381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "09986230",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T02:00:42.438288Z",
     "iopub.status.busy": "2023-11-01T02:00:42.437634Z",
     "iopub.status.idle": "2023-11-01T02:00:42.838074Z",
     "shell.execute_reply": "2023-11-01T02:00:42.836349Z"
    },
    "papermill": {
     "duration": 0.413022,
     "end_time": "2023-11-01T02:00:42.843831",
     "exception": false,
     "start_time": "2023-11-01T02:00:42.430809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.891674,
   "end_time": "2023-11-01T02:00:43.590256",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T02:00:37.698582",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}