{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fd9b84c2",
   "metadata": {
    "papermill": {
     "duration": 0.004959,
     "end_time": "2024-05-13T22:11:12.306636",
     "exception": false,
     "start_time": "2024-05-13T22:11:12.301677",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d09fa8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:12.314737Z",
     "iopub.status.busy": "2024-05-13T22:11:12.314261Z",
     "iopub.status.idle": "2024-05-13T22:11:13.805483Z",
     "shell.execute_reply": "2024-05-13T22:11:13.804926Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.497123,
     "end_time": "2024-05-13T22:11:13.806967",
     "exception": false,
     "start_time": "2024-05-13T22:11:12.309844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9b8a43dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.810567Z",
     "iopub.status.busy": "2024-05-13T22:11:13.810191Z",
     "iopub.status.idle": "2024-05-13T22:11:13.818688Z",
     "shell.execute_reply": "2024-05-13T22:11:13.818248Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01181,
     "end_time": "2024-05-13T22:11:13.819949",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.808139",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74f9d522",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.822566Z",
     "iopub.status.busy": "2024-05-13T22:11:13.822422Z",
     "iopub.status.idle": "2024-05-13T22:11:13.829292Z",
     "shell.execute_reply": "2024-05-13T22:11:13.828888Z"
    },
    "papermill": {
     "duration": 0.009505,
     "end_time": "2024-05-13T22:11:13.830467",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.820962",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "847c91f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.833229Z",
     "iopub.status.busy": "2024-05-13T22:11:13.833088Z",
     "iopub.status.idle": "2024-05-13T22:11:13.842005Z",
     "shell.execute_reply": "2024-05-13T22:11:13.841617Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011807,
     "end_time": "2024-05-13T22:11:13.843306",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.831499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6133a4",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00106,
     "end_time": "2024-05-13T22:11:13.845392",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.844332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d3acbbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.847995Z",
     "iopub.status.busy": "2024-05-13T22:11:13.847852Z",
     "iopub.status.idle": "2024-05-13T22:11:13.851956Z",
     "shell.execute_reply": "2024-05-13T22:11:13.851503Z"
    },
    "papermill": {
     "duration": 0.006736,
     "end_time": "2024-05-13T22:11:13.853099",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.846363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eaa50e6",
   "metadata": {
    "papermill": {
     "duration": 0.001251,
     "end_time": "2024-05-13T22:11:13.855519",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.854268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c95c866d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.858319Z",
     "iopub.status.busy": "2024-05-13T22:11:13.858174Z",
     "iopub.status.idle": "2024-05-13T22:11:13.953203Z",
     "shell.execute_reply": "2024-05-13T22:11:13.952863Z"
    },
    "papermill": {
     "duration": 0.098025,
     "end_time": "2024-05-13T22:11:13.954607",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.856582",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "880a3574",
   "metadata": {
    "papermill": {
     "duration": 0.001566,
     "end_time": "2024-05-13T22:11:13.957778",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.956212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4e38cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-13T22:11:13.961168Z",
     "iopub.status.busy": "2024-05-13T22:11:13.961026Z",
     "iopub.status.idle": "2024-05-13T22:11:14.078962Z",
     "shell.execute_reply": "2024-05-13T22:11:14.078620Z"
    },
    "papermill": {
     "duration": 0.121292,
     "end_time": "2024-05-13T22:11:14.080359",
     "exception": false,
     "start_time": "2024-05-13T22:11:13.959067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.812057,
   "end_time": "2024-05-13T22:11:14.425250",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-05-13T22:11:11.613193",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}