{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3fa75cd3",
   "metadata": {
    "papermill": {
     "duration": 0.00578,
     "end_time": "2024-02-06T23:23:53.786467",
     "exception": false,
     "start_time": "2024-02-06T23:23:53.780687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a6028bea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:53.797776Z",
     "iopub.status.busy": "2024-02-06T23:23:53.797137Z",
     "iopub.status.idle": "2024-02-06T23:23:57.634709Z",
     "shell.execute_reply": "2024-02-06T23:23:57.629050Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.856047,
     "end_time": "2024-02-06T23:23:57.646990",
     "exception": false,
     "start_time": "2024-02-06T23:23:53.790943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ebadf159",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:57.656475Z",
     "iopub.status.busy": "2024-02-06T23:23:57.655949Z",
     "iopub.status.idle": "2024-02-06T23:23:57.667395Z",
     "shell.execute_reply": "2024-02-06T23:23:57.663708Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.022737,
     "end_time": "2024-02-06T23:23:57.672974",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.650237",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8624057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:57.680321Z",
     "iopub.status.busy": "2024-02-06T23:23:57.679857Z",
     "iopub.status.idle": "2024-02-06T23:23:57.687887Z",
     "shell.execute_reply": "2024-02-06T23:23:57.686270Z"
    },
    "papermill": {
     "duration": 0.016963,
     "end_time": "2024-02-06T23:23:57.692714",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.675751",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db9497c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:57.699990Z",
     "iopub.status.busy": "2024-02-06T23:23:57.699616Z",
     "iopub.status.idle": "2024-02-06T23:23:57.707843Z",
     "shell.execute_reply": "2024-02-06T23:23:57.706346Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01706,
     "end_time": "2024-02-06T23:23:57.712509",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.695449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0817c70d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002686,
     "end_time": "2024-02-06T23:23:57.718072",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.715386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1cb50597",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:57.725444Z",
     "iopub.status.busy": "2024-02-06T23:23:57.725048Z",
     "iopub.status.idle": "2024-02-06T23:23:57.740373Z",
     "shell.execute_reply": "2024-02-06T23:23:57.739021Z"
    },
    "papermill": {
     "duration": 0.024357,
     "end_time": "2024-02-06T23:23:57.745025",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.720668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10d18400",
   "metadata": {
    "papermill": {
     "duration": 0.003339,
     "end_time": "2024-02-06T23:23:57.752363",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.749024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d0ef26ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:57.761030Z",
     "iopub.status.busy": "2024-02-06T23:23:57.760651Z",
     "iopub.status.idle": "2024-02-06T23:23:57.984995Z",
     "shell.execute_reply": "2024-02-06T23:23:57.983717Z"
    },
    "papermill": {
     "duration": 0.233244,
     "end_time": "2024-02-06T23:23:57.989184",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.755940",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05208713",
   "metadata": {
    "papermill": {
     "duration": 0.003381,
     "end_time": "2024-02-06T23:23:57.995930",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.992549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "581a6d2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T23:23:58.004367Z",
     "iopub.status.busy": "2024-02-06T23:23:58.003983Z",
     "iopub.status.idle": "2024-02-06T23:23:58.294448Z",
     "shell.execute_reply": "2024-02-06T23:23:58.293249Z"
    },
    "papermill": {
     "duration": 0.299559,
     "end_time": "2024-02-06T23:23:58.298711",
     "exception": false,
     "start_time": "2024-02-06T23:23:57.999152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.137496,
   "end_time": "2024-02-06T23:23:58.940910",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-02-06T23:23:52.803414",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}