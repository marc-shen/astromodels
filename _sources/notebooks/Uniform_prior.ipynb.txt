{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "27a2e7a0",
   "metadata": {
    "papermill": {
     "duration": 0.044956,
     "end_time": "2023-11-01T20:30:06.321310",
     "exception": false,
     "start_time": "2023-11-01T20:30:06.276354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b5aef50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:06.329865Z",
     "iopub.status.busy": "2023-11-01T20:30:06.329398Z",
     "iopub.status.idle": "2023-11-01T20:30:09.607938Z",
     "shell.execute_reply": "2023-11-01T20:30:09.606189Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.288434,
     "end_time": "2023-11-01T20:30:09.613100",
     "exception": false,
     "start_time": "2023-11-01T20:30:06.324666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "56a071b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:09.623162Z",
     "iopub.status.busy": "2023-11-01T20:30:09.622663Z",
     "iopub.status.idle": "2023-11-01T20:30:09.629401Z",
     "shell.execute_reply": "2023-11-01T20:30:09.627948Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017534,
     "end_time": "2023-11-01T20:30:09.634261",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.616727",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4c0a5c65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:09.645690Z",
     "iopub.status.busy": "2023-11-01T20:30:09.644955Z",
     "iopub.status.idle": "2023-11-01T20:30:09.653839Z",
     "shell.execute_reply": "2023-11-01T20:30:09.651904Z"
    },
    "papermill": {
     "duration": 0.022179,
     "end_time": "2023-11-01T20:30:09.659961",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.637782",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f20d229a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:09.669020Z",
     "iopub.status.busy": "2023-11-01T20:30:09.668595Z",
     "iopub.status.idle": "2023-11-01T20:30:09.679693Z",
     "shell.execute_reply": "2023-11-01T20:30:09.676992Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.021344,
     "end_time": "2023-11-01T20:30:09.684495",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.663151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec0dacbc",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003719,
     "end_time": "2023-11-01T20:30:09.691282",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.687563",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b169d0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:09.701807Z",
     "iopub.status.busy": "2023-11-01T20:30:09.701323Z",
     "iopub.status.idle": "2023-11-01T20:30:09.716420Z",
     "shell.execute_reply": "2023-11-01T20:30:09.714972Z"
    },
    "papermill": {
     "duration": 0.025131,
     "end_time": "2023-11-01T20:30:09.720960",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.695829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f733d653",
   "metadata": {
    "papermill": {
     "duration": 0.003661,
     "end_time": "2023-11-01T20:30:09.728636",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.724975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1d0b577f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:09.738742Z",
     "iopub.status.busy": "2023-11-01T20:30:09.737535Z",
     "iopub.status.idle": "2023-11-01T20:30:10.063541Z",
     "shell.execute_reply": "2023-11-01T20:30:10.062104Z"
    },
    "papermill": {
     "duration": 0.33683,
     "end_time": "2023-11-01T20:30:10.069034",
     "exception": false,
     "start_time": "2023-11-01T20:30:09.732204",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a81a7755",
   "metadata": {
    "papermill": {
     "duration": 0.004536,
     "end_time": "2023-11-01T20:30:10.078149",
     "exception": false,
     "start_time": "2023-11-01T20:30:10.073613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ec3e674",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T20:30:10.089439Z",
     "iopub.status.busy": "2023-11-01T20:30:10.088944Z",
     "iopub.status.idle": "2023-11-01T20:30:10.451261Z",
     "shell.execute_reply": "2023-11-01T20:30:10.449535Z"
    },
    "papermill": {
     "duration": 0.373277,
     "end_time": "2023-11-01T20:30:10.455778",
     "exception": false,
     "start_time": "2023-11-01T20:30:10.082501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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kNgDAAAokNgDAAAokNgDAAAokNgDAAAokNM4AfqAUx8BgL5mZw8AAKBAYg8AAKBAYg8AAKBAYg8AAKBAYg8AAKBANR97bW1tmTlzZsaPH59x48bl3HPPzbp165IklUoll19+ecaPH5+DDjooZ5xxRtasWVPliQEAAKqv5mPvwgsvzC9/+ctcfvnl+drXvpaHH3445513XpJk/vz5WbRoUWbPnp2FCxdm48aNmTp1apUnBgAAqL6ajr2Ojo789Kc/zbRp03LIIYdk3LhxOeuss3LXXXflpZdeyoIFC3LmmWdm4sSJOeCAAzJ79uz86le/yqOPPlrt0QEAAKqqpmOvra0tmzdvTkNDQ9fazjvvnM7Ozjz++ONZs2ZNDj/88K5rzc3NGT58eO6///5qjAsAAFAz+ld7gNey2267ZdSoUbn66qszcuTIJMnVV1+dQw45JM8//3zq6uoybNiwbl8zdOjQtLa29vp7TpgwYavXpk2blhEjRvT6uQEAAPpKTcdeksyaNSuf/OQnM27cuCRJ//79873vfS/PPPNM6uvrU1fXfXOyoaEhbW1t1RgVAACgZtR07K1evTpTpkzJhAkTcsoppyRJvve972XKlCmZOXNm2tvb09nZ2S342tvb09jY2OvvuXjx4q1eW758uZAEAAB2CDUde7fddlvWr1+fyy67LPX19UmS0aNH57DDDsvKlStTqVSyatWqNDc3d33NqlWrcvTRR1drZAAAgJpQ0we0vPzyy+nXr1+3tZ122ik77bRTmpqaMmTIkCxZsqTr2sqVK7NixYrX/NwdAADAm0FN7+xNnDgx8+bNy1lnnZVTTz01/fv3zw033JBKpZKWlpY899xzmTdvXpqamjJgwIBcfPHFaWlpyV577VXt0QEAAKqqpmNvjz32yA033JArrrgip59+eiqVSkaNGpVrr702u+++e6ZMmZINGzbknHPOyaZNm9LS0pJZs2ZVe2wAAICq61epVCrVHmJH8coBLYMGDer6qyCqreXpBdUeAQAAinb38JOrPUI329olNf2ZPQAAAHpo/7Y+8IQTTtjmJ+3Xr1+uvfbaXg0EAADA67fNsbdp06b069fvNR+zatWq/O///u9ffRwAAABvrG2OvUWLFm312ssvv5z58+fnG9/4RnbbbbfMmDFjuwwHAABA72xz7G3NI488kpkzZ+a3v/1tJk2alHPPPTe77bbb9pgNAACAXup17K1fvz5f+9rX8v3vfz/Nzc359re/nfHjx2/P2QAAAOilXsXe7bffnrlz56a1tTUnnnhipk2blgEDBmzv2QAAAOilHsXeH//4x1x44YW55557st9+++Wb3/xm9t9//zdqNgAAAHppm2NvwYIF+frXv55KpZJzzjknJ510Uurq/DV9AAAAtWibY+9LX/pS+vXrl+bm5tx111256667tvrYfv365brrrtsuAwIAANBz2xx7Y8aMeSPnAAAAYDva5thbuHDhGzkHAAAA25EP3QEAABRoh4i9q6++Ou973/syatSofPSjH80jjzySJKlUKrn88sszfvz4HHTQQTnjjDOyZs2aKk8LAABQfTUfe9/5zncyf/78TJ8+PTfccEPe/va353Of+1w2bdqU+fPnZ9GiRZk9e3YWLlyYjRs3ZurUqdUeGQAAoOpqOvY6Ojpy9dVX53Of+1yOOeaYjBo1KhdffHE2bNiQp556KgsWLMiZZ56ZiRMn5oADDsjs2bPzq1/9Ko8++mi1RwcAAKiqmo69X//613n++efzoQ99qGtt8ODBue+++7LTTjtlzZo1Ofzww7uuNTc3Z/jw4bn//vurMS4AAEDN2ObTOKvhd7/7XXbZZZfce++9+eY3v5m1a9dm9OjROeecc7JixYrU1dVl2LBh3b5m6NChaW1t7fX3nDBhwlavTZs2LSNGjOj1cwMAAPSVmt7Ze+GFF9Le3p7//M//zLnnnpurrroqdXV1Oemkk9LW1pb6+vrU1XV/CQ0NDWlra6vSxAAAALWhpnf2Ojs7s2nTplx66aXZf//9kyR777131+5be3t7Ojs7uwVfe3t7Ghsbe/09Fy9evNVry5cvF5IAAMAOoaZ39nbfffckyd///d93rTU2NqapqSnPPfdcKpVKVq1a1e1rVq1alebm5j6dEwAAoNbUdOy9+93vTpL85je/6Vp74YUX8uyzz+ad73xnhgwZkiVLlnRdW7lyZVasWPGan7sDAAB4M6jpt3G+613vyvve976cd955Oe+88/K2t70t3/jGNzJixIgcccQRmTx5cubNm5empqYMGDAgF198cVpaWrLXXntVe3QAAICqqunYS5LLLrssl156ac4666xs3rw5hx56aL71rW+lrq4uU6ZMyYYNG3LOOedk06ZNaWlpyaxZs6o9MgAAQNX1q1QqlWoPsaN45YCWQYMGZeTIkdUeJ0nS8vSCao8AAABFu3v4ydUeoZtt7ZKa/sweAAAAvSP2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACiT2AAAACrRDxd4tt9ySffbZJ2vXrk2SdHR05IILLsjYsWMzZsyYnHfeeWlra6vylAAAANW3w8Tes88+m7lz53Zbu+SSS7J06dLMmzcv11xzTZYvX57zzz+/ShMCAADUjh0m9s4///zsu+++XX9et25dbrrppnzhC1/IuHHjctBBB+Xcc8/N7bffntbW1ipOCgAAUH07ROzdeOONWb16dU4//fSutYcffjhJMm7cuK610aNHp3///lm2bFmfzwgAAFBL+ld7gL/mmWeeyX/8x3/ku9/9btatW9e1vmLFijQ1NaW+vr5rrb6+PoMHD35dO3sTJkzY6rVp06ZlxIgRvX5uAACAvlLTO3uVSiXnnXdePvWpT3V7C2eStLW1ZcCAAVt8TUNDg0NaAACAN72a3tm74YYb8vzzz2fKlClbXGtsbMzGjRu3WG9vb09jY2Ovv+fixYu3em358uVCEgAA2CHUdOwtWbIkTz75ZA4++OAkf97pS5L3vve9ecc73pHVq1eno6Oj662cmzdvzurVqzNs2LCqzQwAAFALajr2Lrjggqxfv77rz48++mimT5+ehQsXZo899sh73/vePPTQQznssMOSJA8++GAqlUrGjBlTrZEBAABqQk3H3tChQzN06NCuP69ZsyZJsueee2bw4ME59thjc9FFF2X27Nl56aWXMmvWrBx//PFpaGio1sgAAAA1oaZj76+ZOXNm5s6dmylTpqR///6ZNGlSpk+fXu2xAAAAqq5f5ZUPwvFXvXJAy6BBgzJy5Mhqj5MkaXl6QbVHAACAot09/ORqj9DNtnZJTf/VCwAAAPSO2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAACiQ2AMAAChQzcdea2trPv/5z2fMmDE58MAD86lPfSqPP/54kqRSqeTyyy/P+PHjc9BBB+WMM87ImjVrqjwxAABA9dV87E2bNi1PPfVUrrzyylx33XVpbGzMZz7zmWzYsCHz58/PokWLMnv27CxcuDAbN27M1KlTqz0yAABA1fWv9gCv5fe//30efPDB3HjjjRk9enSS5Ctf+UrGjh2bO+64IwsWLMiZZ56ZiRMnJklmz56dI488Mo8++mhGjRpVzdEBAACqqqZ39p599tkMHTo0++67b9faoEGDMnDgwDzzzDNZs2ZNDj/88K5rzc3NGT58eO6///5qjAsAAFAzanpn79BDD80vfvGLbms//elPs27duuy9996pq6vLsGHDul0fOnRoWltbe/09J0yYsNVr06ZNy4gRI3r93AAAAH2lpmPvL23evDnz58/P17/+9Rx11FFpa2tLfX196uq6b042NDSkra2tSlMCAADUhh0i9h577LHMmDEjTz31VE455ZRMmzYtS5YsSXt7ezo7O7sFX3t7exobG3v9vRYvXrzVa8uXLxeSAADADqGmP7OXJD//+c8zefLkNDQ05Oabb87ZZ5+dt7zlLWlqakqlUsmqVau6PX7VqlVpbm6u0rQAAAC1oaZjb/369ZkxY0YmTpyY66+/PiNHjuy6NnLkyAwZMiRLlizpWlu5cmVWrFjxmp+7AwAAeDOo6bdxLl26NG1tbTnttNPyzDPPdLu26667ZvLkyZk3b16ampoyYMCAXHzxxWlpaclee+1VpYkBAABqQ03H3ooVK7Jp06Z85CMf2eLaGWeckalTp2bDhg0555xzsmnTprS0tGTWrFl9PygAAECN6VepVCrVHmJH8coBLYMGDer2ltJqanl6QbVHAACAot09/ORqj9DNtnZJTX9mDwAAgN4RewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAUSewAAAAXa4WOvo6MjF1xwQcaOHZsxY8bkvPPOS1tbW7XHAgAAqKodPvYuueSSLF26NPPmzcs111yT5cuX5/zzz6/2WAAAAFXVv9oDvB7r1q3LTTfdlKuuuirjxo1Lkpx77rk54YQT0tramt13373KEwIAAFTHDr2z9/DDDydJV+glyejRo9O/f/8sW7asWmMBAABU3Q69s7dixYo0NTWlvr6+a62+vj6DBw9Oa2trr55zwoQJW7120UUXpbGxMRs2bMjy5ct79fzb29SOv6/2CAAAULTl62vjd/9XbNiwIUnS3t7+mo/boWOvra0tAwYM2GK9oaHhDTmk5ZWo7OzsrJlDYP4ug6o9AgAAFK1tU2387v9/dXZ2vub1HTr2Ghsbs3Hjxi3W29vb09jY2KvnXLx48VavPfbYY+no6EhdXV123nnnXj3/9vToo48mSUaNGlXlSdjRuZfYHtxHbC/uJbYX9xLbQy3eR+3t7ens7Oz2DsdXs0PHXlNTU1avXp2Ojo6uF7p58+asXr06w4YN2+7fb//999/uz/l6nHbaaUleO1BhW7iX2B7cR2wv7iW2F/cS28OOfB/t0Ae0jB07NpVKJQ899FDX2oMPPphKpZIxY8ZUcTIAAIDq2qFjr7GxMccee2wuuuiiPPjgg7n33ntz3nnn5fjjj09DQ0O1xwMAAKiaHfptnEkyc+bMzJ07N1OmTEn//v0zadKkTJ8+vdpjAQAAVNUOH3sDBw7MnDlzMmfOnGqPAgAAUDN26LdxAgAA8Or6VSqVSrWHAAAAYPuyswcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsQcAAFAgsVfjOjo6csEFF2Ts2LEZM2ZMzjvvvLS1tW318ddff32OPPLIvPvd785JJ52U3//+9304LbWqJ/fR5s2bc9lll+WII47IAQcckA9+8IP52c9+1scTU6t6+jPpFf/zP/+T0aNH57bbbuuDKal1Pb2P7r777kyaNCmjRo3K+9///vzoRz/qw2mpZT25lyqVShYsWJCjjjoqBx98cE488cQ8+eSTfTwxtWzt2rXZb7/9snbt2q0+plKp5PLLL8/48eNz0EEH5YwzzsiaNWv6cMqeEXs17pJLLsnSpUszb968XHPNNVm+fHnOP//8V33srbfemi9/+cuZNm1avv/972fo0KE59dRTs3Hjxj6emlrTk/voG9/4Rm644YbMmDEjP/zhD/OP//iP+fznP5/HHnusj6emFvXkXnrFyy+/nBkzZvhZRJee3Ee//OUvc+aZZ2bSpEm56aab8qEPfSjnn39+nnrqqT6emlrUk3vpv/7rv3LllVfmrLPOyrXXXpuGhoacdtpp2/Q/rCjfc889l7lz5+bll19+zcfNnz8/ixYtyuzZs7Nw4cJs3LgxU6dO7aMpe6FCzXrhhRcq+++/f+Wee+7pWnvggQcqI0eOrKxZs2aLxx933HGVL3/5y11/3rBhQ2X06NGVW2+9tU/mpTb19D4aP3585eqrr+629i//8i+VL3zhC2/4rNS2nt5Lr7j66qsrn/70pyt77723n0f0+D46/fTTK9OmTeu2dvzxx1euu+66N3pUalxP76VPfOITlTlz5nT9ee3atZV99tmncu+99/bJvNSumTNnVvbee++uf1pbW1/1cZ2dnZXDDjuscv3113etPfPMM5W999678sgjj/TVuD1iZ6+GPfzww0mScePGda2NHj06/fv3z7Jly7o9dv369Xnsscdy+OGHd60NGDAgBx54YO6///6+GZia1JP7qL29PTvttFNGjx7dbX333XfP6tWr3/hhqWk9uZde8dvf/jbz58/P3Llz+2RGal9P7qPNmzfn/vvvz4c+9KFu64sWLconP/nJN35YalpPfyatW7cuDQ0NXX/eeeed069fv3R0dLzxw1LTpkyZkltuuSVz5sx5zcc9+eSTWbNmTbfft5ubmzN8+PCa/X1b7NWwFStWpKmpKfX19V1r9fX1GTx4cFpbW7s99umnn05nZ2f22GOPbutDhw7d4rG8ufTkPtp5551z7733ZuzYsV1rf/jDH7J06dLsu+++fTYztakn91Ly51/UZ8yYkTPPPHOLn028efXkPlq5cmU2bNiQ559/PpMnT86YMWNy3HHH5e677+7rsalBPf2ZdPjhh+fmm2/OE088kfb29nzta19LQ0NDxowZ05djU4Oam5uz7777Zs8993zNx61YsSJ1dXUZNmxYt/Va/n1b7NWwtra2DBgwYIv1hoaGLd5f/sqf/+/jX+2xvLn05D76v+68885Mnjw5gwcPzimnnPJGjcgOoqf30re+9a0MGjQon/jEJ/piPHYQPbmPXnjhhSTJZZddlo9+9KOZP39+DjvssPzbv/1bHnrooT6Zl9rV059Jn/3sZzNw4MAce+yxGT16dBYuXJjTTz89u+66a1+MSwHa2tpSX1+furruCVXLv2/3r/YAbF1jY+OrHmjQ3t6exsbGLR6bJBs2bOi23tHRscVjeXPpyX30irVr12bmzJm58847c+SRR2bOnDl561vf+kaPSo3ryb30+OOP59prr83NN9+cfv369dWI7AB6ch91dnYmSf71X/81xx13XJLkwAMPzLJly3LLLbfkkEMOeeMHpmb19L9vU6dOTX19fa6++uq8/e1vzz333JPLLrss73rXu3LkkUf2xcjs4BobG9Pe3p7Ozs5uwfdav1NVm9irYU1NTVm9enU6Ojq63qKwefPmrF69eovt4yFDhiRJ/vjHP2b48OFd63/84x+z33779d3Q1Jye3EfJn9829elPfzqdnZ258sorc9RRR/X1yNSontxLy5Yty/r16/PBD36w2/rZZ5+d+fPn56abbuqzuaktPbmPdt999yTJiBEjuq2/853v9DlienQvPfHEE3nggQdy/fXXd/1PggMOOCC//vWv86Mf/UjssU2amppSqVSyatWqNDc3d62vWrUqRx99dBUn2zpv46xhY8eOTaVS6fZWlQcffDCVSmWL95e/7W1vy4EHHpjFixd3ra1fvz6/+tWvMmHChD6bmdrTk/soSb74xS9m4MCBueWWW4Qe3fTkXvrnf/7n/OQnP8ktt9zS9U+SnHPOObnsssv6cmxqTE/uoz322CO77757Hn/88W7rv/vd77YIQN58enIvbe04/fr6+uy8885v6JyUY+TIkRkyZEiWLFnStbZy5cqsWLGiZn/ftrNXwxobG3PsscfmoosuyuzZs/PSSy9l1qxZOf7449PQ0JDW1tZs3Lix6/9effKTn8yFF16YffbZJ+94xztyxRVX5G//9m9z6KGHVvmVUE09uY/Wrl2b++67LxdddFFefPHFvPjii13PM2DAgAwdOrSKr4Rq68m9tOuuu77q52Campq6vfuAN5+e3Ed1dXU59dRTc9VVV2XIkCHZb7/9ctttt+V3v/tdrrjiimq/FKqsJ/fSyJEjs/fee+fCCy/M//t//y9Dhw7Nfffdl7vuuivf/va3q/1SqGHPPvtskj8fwlJXV5fJkydn3rx5aWpqyoABA3LxxRenpaUle+21V5UnfXX9KpVKpdpDsHUbNmzI3Llzc+utt6Z///6ZNGlSpk+fnre85S2ZMWNGHnjggW6nkn3nO9/JggUL8uKLL2bs2LGZPXu2X9DZ5vvokUceycc+9rFXfY73vOc9WbhwYR9PTq3p6c+kv7TPPvvk8ssvr9m3utB3enofffe73813v/vdrFmzJiNHjsz06dOdoEiSnt1La9asyRVXXJF77rkn69aty4gRIzJ16tS8//3vr/KroFYsW7YsJ5xwQu67774MHjw4SfLpT386Sbp+B3r55Zdz2WWX5aabbsqmTZvS0tKSWbNmZZdddqna3K9F7AEAABTIZ/YAAAAKJPYAAAAKJPYAAAAKJPYAAAAKJPYAAAAKJPYAAAAKJPYAAAAKJPYAoA8sW7Ys++yzT5YuXVrtUQB4kxB7AAAABRJ7AAAABRJ7APBXnHLKKRkzZkw2bdrUbf3cc8/NIYcckvb29txxxx352Mc+loMOOihjx47NySefnIceemirzzljxowcccQR3daefvrp7LPPPrnpppu61jZs2JBLL700RxxxRA488MB8/OMfz9133719XyAARRJ7APBXTJo0KevWrcsDDzzQtbZp06bcddddOfroo/P444/nzDPPzJ577plLLrkkM2bMyJ/+9Keceuqpef7553v9fV9++eWcfvrp+dGPfpRTTjklX/3qV7Pnnnvms5/9bH72s59th1cGQMn6V3sAAKh1Rx11VGbNmpU77rgj48ePT5Lcd999eeGFF/LhD384v/3tb3PwwQfnq1/9avr165ck+Zu/+ZucdNJJeeKJJzJ27Nhefd9bb701y5Yty/e///0cdNBBSZIPfOAD+dOf/pR58+blgx/84PZ5gQAUyc4eAPwVu+yyS1paWnLnnXemUqkkSW6//fYMGzYshxxySD7+8Y/n+uuvz/r16/PrX/86t99+exYtWpTkz7tzvXXvvfdm6NCh2XvvvdPW1tb1zxFHHJE//OEPaW1t3S6vD4Ay2dkDgG1w7LHH5mc/+1l++ctfZtSoUbnzzjszefLk9OvXLytXrszMmTOzbNmyDB48OHvttVfe8Y539Ph7vBKSr1izZk2effbZHHzwwa/6+D/96U/Zfffde/V6ACif2AOAbTBhwoTstttuueOOO9LW1pbnn38+H/7wh5Mk06dPT2tra26//fbsueeeSZKlS5fmJz/5yVaf75W3e/6l//v5vre+9a1dnwN8Nc3Nzb18NQC8GYg9ANgGb3nLW3LMMcfkzjvvzIsvvpgDDzwwf/d3f5ckefzxx3Pcccd1hV6Sv/qXpzc0NKStrS2VSqUr/B588MFuj3nPe96Te+65J3vuuWeampq61q+55prcd999mT9//vZ6eQAUSOwBwDaaNGlSbrjhhqxatSrTp0/vWh81alR+/OMf553vfGd23XXX/PznP89///d/J/nzQS4jR47c4rn+4R/+Idddd12++c1v5rjjjstvfvObXHvttd0ec9xxx+WGG27IKaeckhNPPDG77LJLlixZkh/+8Ic599xzU1fno/cAbJ3/SgDANjr44IOzxx57pLOzM8ccc0zX+iWXXJJRo0blS1/6Ui6++OIMHjw4N998c8aPH59rr702K1eu3OK5jjnmmEyZMiXXXXddPvCBD+Saa67JpZde2u0xAwcOzHXXXZcDDjggX/nKVzJ9+vQ88sgjmTNnTk488cQ3/PUCsGPrV/m/nwYHAABgh2dnDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoEBiDwAAoED/H4SdxkT6P16JAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.186415,
   "end_time": "2023-11-01T20:30:11.094236",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T20:30:04.907821",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}