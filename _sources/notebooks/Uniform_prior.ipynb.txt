{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "37cbabf9",
   "metadata": {
    "papermill": {
     "duration": 0.003843,
     "end_time": "2022-09-27T12:55:59.902563",
     "exception": false,
     "start_time": "2022-09-27T12:55:59.898720",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0cb47df4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:55:59.910107Z",
     "iopub.status.busy": "2022-09-27T12:55:59.909661Z",
     "iopub.status.idle": "2022-09-27T12:56:03.664070Z",
     "shell.execute_reply": "2022-09-27T12:56:03.662707Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.761784,
     "end_time": "2022-09-27T12:56:03.667326",
     "exception": false,
     "start_time": "2022-09-27T12:55:59.905542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc373e61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:03.675335Z",
     "iopub.status.busy": "2022-09-27T12:56:03.674951Z",
     "iopub.status.idle": "2022-09-27T12:56:03.684050Z",
     "shell.execute_reply": "2022-09-27T12:56:03.682742Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016224,
     "end_time": "2022-09-27T12:56:03.687292",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.671068",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20a87cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:03.694699Z",
     "iopub.status.busy": "2022-09-27T12:56:03.694252Z",
     "iopub.status.idle": "2022-09-27T12:56:03.703178Z",
     "shell.execute_reply": "2022-09-27T12:56:03.701986Z"
    },
    "papermill": {
     "duration": 0.015857,
     "end_time": "2022-09-27T12:56:03.706056",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.690199",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cff75ea5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:03.713362Z",
     "iopub.status.busy": "2022-09-27T12:56:03.712999Z",
     "iopub.status.idle": "2022-09-27T12:56:03.721678Z",
     "shell.execute_reply": "2022-09-27T12:56:03.720744Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015829,
     "end_time": "2022-09-27T12:56:03.724752",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.708923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad875ecd",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002804,
     "end_time": "2022-09-27T12:56:03.730560",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.727756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "45e0963d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:03.738161Z",
     "iopub.status.busy": "2022-09-27T12:56:03.737706Z",
     "iopub.status.idle": "2022-09-27T12:56:03.749856Z",
     "shell.execute_reply": "2022-09-27T12:56:03.748879Z"
    },
    "papermill": {
     "duration": 0.019034,
     "end_time": "2022-09-27T12:56:03.752697",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.733663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4155a21a",
   "metadata": {
    "papermill": {
     "duration": 0.003258,
     "end_time": "2022-09-27T12:56:03.759221",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.755963",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "390f3d9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:03.766890Z",
     "iopub.status.busy": "2022-09-27T12:56:03.766496Z",
     "iopub.status.idle": "2022-09-27T12:56:04.109582Z",
     "shell.execute_reply": "2022-09-27T12:56:04.108629Z"
    },
    "papermill": {
     "duration": 0.350632,
     "end_time": "2022-09-27T12:56:04.112765",
     "exception": false,
     "start_time": "2022-09-27T12:56:03.762133",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1c7508f",
   "metadata": {
    "papermill": {
     "duration": 0.004333,
     "end_time": "2022-09-27T12:56:04.121174",
     "exception": false,
     "start_time": "2022-09-27T12:56:04.116841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e53b4421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-27T12:56:04.129838Z",
     "iopub.status.busy": "2022-09-27T12:56:04.129447Z",
     "iopub.status.idle": "2022-09-27T12:56:04.501670Z",
     "shell.execute_reply": "2022-09-27T12:56:04.500392Z"
    },
    "papermill": {
     "duration": 0.381372,
     "end_time": "2022-09-27T12:56:04.505845",
     "exception": false,
     "start_time": "2022-09-27T12:56:04.124473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.620212,
   "end_time": "2022-09-27T12:56:05.226845",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-27T12:55:58.606633",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}