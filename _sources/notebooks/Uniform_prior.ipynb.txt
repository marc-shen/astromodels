{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51bbc5cd",
   "metadata": {
    "papermill": {
     "duration": 0.003252,
     "end_time": "2023-11-01T23:57:26.971586",
     "exception": false,
     "start_time": "2023-11-01T23:57:26.968334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4ab20658",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:26.978167Z",
     "iopub.status.busy": "2023-11-01T23:57:26.977830Z",
     "iopub.status.idle": "2023-11-01T23:57:29.426718Z",
     "shell.execute_reply": "2023-11-01T23:57:29.424906Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.45721,
     "end_time": "2023-11-01T23:57:29.431337",
     "exception": false,
     "start_time": "2023-11-01T23:57:26.974127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e8ce4d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.443485Z",
     "iopub.status.busy": "2023-11-01T23:57:29.442979Z",
     "iopub.status.idle": "2023-11-01T23:57:29.453046Z",
     "shell.execute_reply": "2023-11-01T23:57:29.451296Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.020726,
     "end_time": "2023-11-01T23:57:29.457094",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.436368",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72fc58d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.464333Z",
     "iopub.status.busy": "2023-11-01T23:57:29.463972Z",
     "iopub.status.idle": "2023-11-01T23:57:29.471008Z",
     "shell.execute_reply": "2023-11-01T23:57:29.469596Z"
    },
    "papermill": {
     "duration": 0.017786,
     "end_time": "2023-11-01T23:57:29.477348",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.459562",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad98301f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.484558Z",
     "iopub.status.busy": "2023-11-01T23:57:29.484134Z",
     "iopub.status.idle": "2023-11-01T23:57:29.493602Z",
     "shell.execute_reply": "2023-11-01T23:57:29.490956Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.018485,
     "end_time": "2023-11-01T23:57:29.498229",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.479744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ce79a21",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002482,
     "end_time": "2023-11-01T23:57:29.503170",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.500688",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e58f8193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.510285Z",
     "iopub.status.busy": "2023-11-01T23:57:29.509917Z",
     "iopub.status.idle": "2023-11-01T23:57:29.523774Z",
     "shell.execute_reply": "2023-11-01T23:57:29.522325Z"
    },
    "papermill": {
     "duration": 0.022523,
     "end_time": "2023-11-01T23:57:29.527957",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.505434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fe19b8b",
   "metadata": {
    "papermill": {
     "duration": 0.002651,
     "end_time": "2023-11-01T23:57:29.533383",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.530732",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "24dd325e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.540096Z",
     "iopub.status.busy": "2023-11-01T23:57:29.539758Z",
     "iopub.status.idle": "2023-11-01T23:57:29.730043Z",
     "shell.execute_reply": "2023-11-01T23:57:29.728657Z"
    },
    "papermill": {
     "duration": 0.197883,
     "end_time": "2023-11-01T23:57:29.733800",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.535917",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cd8820",
   "metadata": {
    "papermill": {
     "duration": 0.003069,
     "end_time": "2023-11-01T23:57:29.740384",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.737315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f3dabc7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:57:29.748715Z",
     "iopub.status.busy": "2023-11-01T23:57:29.748301Z",
     "iopub.status.idle": "2023-11-01T23:57:30.003331Z",
     "shell.execute_reply": "2023-11-01T23:57:30.001624Z"
    },
    "papermill": {
     "duration": 0.2652,
     "end_time": "2023-11-01T23:57:30.008578",
     "exception": false,
     "start_time": "2023-11-01T23:57:29.743378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.562598,
   "end_time": "2023-11-01T23:57:30.541636",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T23:57:25.979038",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}