{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2255dec1",
   "metadata": {
    "papermill": {
     "duration": 0.009265,
     "end_time": "2025-04-26T01:25:04.960037",
     "exception": false,
     "start_time": "2025-04-26T01:25:04.950772",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d93545f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:04.975167Z",
     "iopub.status.busy": "2025-04-26T01:25:04.974364Z",
     "iopub.status.idle": "2025-04-26T01:25:06.379506Z",
     "shell.execute_reply": "2025-04-26T01:25:06.378976Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.413666,
     "end_time": "2025-04-26T01:25:06.380785",
     "exception": false,
     "start_time": "2025-04-26T01:25:04.967119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b990122e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.383779Z",
     "iopub.status.busy": "2025-04-26T01:25:06.383466Z",
     "iopub.status.idle": "2025-04-26T01:25:06.391950Z",
     "shell.execute_reply": "2025-04-26T01:25:06.391535Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010927,
     "end_time": "2025-04-26T01:25:06.392946",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.382019",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf90f1c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.395571Z",
     "iopub.status.busy": "2025-04-26T01:25:06.395428Z",
     "iopub.status.idle": "2025-04-26T01:25:06.403557Z",
     "shell.execute_reply": "2025-04-26T01:25:06.403136Z"
    },
    "papermill": {
     "duration": 0.010628,
     "end_time": "2025-04-26T01:25:06.404641",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.394013",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "10482153",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.407527Z",
     "iopub.status.busy": "2025-04-26T01:25:06.407376Z",
     "iopub.status.idle": "2025-04-26T01:25:06.416440Z",
     "shell.execute_reply": "2025-04-26T01:25:06.416071Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011614,
     "end_time": "2025-04-26T01:25:06.417457",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.405843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e9ca4df",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001021,
     "end_time": "2025-04-26T01:25:06.419536",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.418515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a8d1620",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.422018Z",
     "iopub.status.busy": "2025-04-26T01:25:06.421884Z",
     "iopub.status.idle": "2025-04-26T01:25:06.426012Z",
     "shell.execute_reply": "2025-04-26T01:25:06.425541Z"
    },
    "papermill": {
     "duration": 0.006492,
     "end_time": "2025-04-26T01:25:06.426993",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.420501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8cae1e3",
   "metadata": {
    "papermill": {
     "duration": 0.001135,
     "end_time": "2025-04-26T01:25:06.429266",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.428131",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6106132c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.432059Z",
     "iopub.status.busy": "2025-04-26T01:25:06.431918Z",
     "iopub.status.idle": "2025-04-26T01:25:06.500173Z",
     "shell.execute_reply": "2025-04-26T01:25:06.499806Z"
    },
    "papermill": {
     "duration": 0.071084,
     "end_time": "2025-04-26T01:25:06.501463",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.430379",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "317e7342",
   "metadata": {
    "papermill": {
     "duration": 0.001472,
     "end_time": "2025-04-26T01:25:06.504601",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.503129",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "43da7692",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-26T01:25:06.507917Z",
     "iopub.status.busy": "2025-04-26T01:25:06.507773Z",
     "iopub.status.idle": "2025-04-26T01:25:06.598176Z",
     "shell.execute_reply": "2025-04-26T01:25:06.597810Z"
    },
    "papermill": {
     "duration": 0.093363,
     "end_time": "2025-04-26T01:25:06.599232",
     "exception": false,
     "start_time": "2025-04-26T01:25:06.505869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.684916,
   "end_time": "2025-04-26T01:25:06.933556",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-04-26T01:25:04.248640",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}