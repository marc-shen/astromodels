{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "017d046f",
   "metadata": {
    "papermill": {
     "duration": 0.004094,
     "end_time": "2023-11-01T23:06:16.492503",
     "exception": false,
     "start_time": "2023-11-01T23:06:16.488409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bff63654",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:16.499748Z",
     "iopub.status.busy": "2023-11-01T23:06:16.499247Z",
     "iopub.status.idle": "2023-11-01T23:06:18.810852Z",
     "shell.execute_reply": "2023-11-01T23:06:18.807786Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.319859,
     "end_time": "2023-11-01T23:06:18.814851",
     "exception": false,
     "start_time": "2023-11-01T23:06:16.494992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ae5b19c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:18.821359Z",
     "iopub.status.busy": "2023-11-01T23:06:18.820988Z",
     "iopub.status.idle": "2023-11-01T23:06:18.830254Z",
     "shell.execute_reply": "2023-11-01T23:06:18.828829Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016702,
     "end_time": "2023-11-01T23:06:18.833987",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.817285",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4d2cae15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:18.840209Z",
     "iopub.status.busy": "2023-11-01T23:06:18.839846Z",
     "iopub.status.idle": "2023-11-01T23:06:18.844862Z",
     "shell.execute_reply": "2023-11-01T23:06:18.843659Z"
    },
    "papermill": {
     "duration": 0.012055,
     "end_time": "2023-11-01T23:06:18.848432",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.836377",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2664d966",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:18.854982Z",
     "iopub.status.busy": "2023-11-01T23:06:18.854009Z",
     "iopub.status.idle": "2023-11-01T23:06:18.860823Z",
     "shell.execute_reply": "2023-11-01T23:06:18.859756Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013597,
     "end_time": "2023-11-01T23:06:18.864280",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.850683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "693431d1",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002367,
     "end_time": "2023-11-01T23:06:18.868980",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.866613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "358a6780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:18.875229Z",
     "iopub.status.busy": "2023-11-01T23:06:18.874857Z",
     "iopub.status.idle": "2023-11-01T23:06:18.886107Z",
     "shell.execute_reply": "2023-11-01T23:06:18.884824Z"
    },
    "papermill": {
     "duration": 0.018467,
     "end_time": "2023-11-01T23:06:18.889618",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.871151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a4687b9",
   "metadata": {
    "papermill": {
     "duration": 0.002569,
     "end_time": "2023-11-01T23:06:18.894879",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.892310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "59246447",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:18.901490Z",
     "iopub.status.busy": "2023-11-01T23:06:18.901125Z",
     "iopub.status.idle": "2023-11-01T23:06:19.090124Z",
     "shell.execute_reply": "2023-11-01T23:06:19.087419Z"
    },
    "papermill": {
     "duration": 0.196742,
     "end_time": "2023-11-01T23:06:19.094135",
     "exception": false,
     "start_time": "2023-11-01T23:06:18.897393",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd9f94ae",
   "metadata": {
    "papermill": {
     "duration": 0.002911,
     "end_time": "2023-11-01T23:06:19.100163",
     "exception": false,
     "start_time": "2023-11-01T23:06:19.097252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9b85e732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-01T23:06:19.107394Z",
     "iopub.status.busy": "2023-11-01T23:06:19.106976Z",
     "iopub.status.idle": "2023-11-01T23:06:19.361901Z",
     "shell.execute_reply": "2023-11-01T23:06:19.360582Z"
    },
    "papermill": {
     "duration": 0.262588,
     "end_time": "2023-11-01T23:06:19.365509",
     "exception": false,
     "start_time": "2023-11-01T23:06:19.102921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.110799,
   "end_time": "2023-11-01T23:06:19.804635",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2023-11-01T23:06:15.693836",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}