{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d0b18aac",
   "metadata": {
    "papermill": {
     "duration": 0.005663,
     "end_time": "2025-04-28T22:57:48.884694",
     "exception": false,
     "start_time": "2025-04-28T22:57:48.879031",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b7800144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:48.895025Z",
     "iopub.status.busy": "2025-04-28T22:57:48.893924Z",
     "iopub.status.idle": "2025-04-28T22:57:50.295993Z",
     "shell.execute_reply": "2025-04-28T22:57:50.295532Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.408732,
     "end_time": "2025-04-28T22:57:50.297253",
     "exception": false,
     "start_time": "2025-04-28T22:57:48.888521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f15c6299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.300367Z",
     "iopub.status.busy": "2025-04-28T22:57:50.300049Z",
     "iopub.status.idle": "2025-04-28T22:57:50.308301Z",
     "shell.execute_reply": "2025-04-28T22:57:50.307941Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010974,
     "end_time": "2025-04-28T22:57:50.309455",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.298481",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d19666f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.312136Z",
     "iopub.status.busy": "2025-04-28T22:57:50.311975Z",
     "iopub.status.idle": "2025-04-28T22:57:50.314018Z",
     "shell.execute_reply": "2025-04-28T22:57:50.313599Z"
    },
    "papermill": {
     "duration": 0.00466,
     "end_time": "2025-04-28T22:57:50.315171",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.310511",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f4e686d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.318184Z",
     "iopub.status.busy": "2025-04-28T22:57:50.318009Z",
     "iopub.status.idle": "2025-04-28T22:57:50.321086Z",
     "shell.execute_reply": "2025-04-28T22:57:50.320683Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005857,
     "end_time": "2025-04-28T22:57:50.322247",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.316390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10cd756c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000981,
     "end_time": "2025-04-28T22:57:50.324319",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.323338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dae054e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.326782Z",
     "iopub.status.busy": "2025-04-28T22:57:50.326636Z",
     "iopub.status.idle": "2025-04-28T22:57:50.336738Z",
     "shell.execute_reply": "2025-04-28T22:57:50.336343Z"
    },
    "papermill": {
     "duration": 0.012606,
     "end_time": "2025-04-28T22:57:50.337832",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.325226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d352e70e",
   "metadata": {
    "papermill": {
     "duration": 0.001111,
     "end_time": "2025-04-28T22:57:50.340141",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.339030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba84e9f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.342811Z",
     "iopub.status.busy": "2025-04-28T22:57:50.342663Z",
     "iopub.status.idle": "2025-04-28T22:57:50.411050Z",
     "shell.execute_reply": "2025-04-28T22:57:50.410739Z"
    },
    "papermill": {
     "duration": 0.07112,
     "end_time": "2025-04-28T22:57:50.412302",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.341182",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af06ab5f",
   "metadata": {
    "papermill": {
     "duration": 0.001354,
     "end_time": "2025-04-28T22:57:50.415242",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.413888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9aa43734",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T22:57:50.418483Z",
     "iopub.status.busy": "2025-04-28T22:57:50.418345Z",
     "iopub.status.idle": "2025-04-28T22:57:50.515776Z",
     "shell.execute_reply": "2025-04-28T22:57:50.515382Z"
    },
    "papermill": {
     "duration": 0.100398,
     "end_time": "2025-04-28T22:57:50.516922",
     "exception": false,
     "start_time": "2025-04-28T22:57:50.416524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.641681,
   "end_time": "2025-04-28T22:57:50.847293",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-04-28T22:57:48.205612",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}