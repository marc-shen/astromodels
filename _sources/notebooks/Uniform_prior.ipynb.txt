{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "27466882",
   "metadata": {
    "papermill": {
     "duration": 0.009139,
     "end_time": "2024-09-10T20:05:10.493790",
     "exception": false,
     "start_time": "2024-09-10T20:05:10.484651",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "49a00235",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:10.507617Z",
     "iopub.status.busy": "2024-09-10T20:05:10.507013Z",
     "iopub.status.idle": "2024-09-10T20:05:11.911634Z",
     "shell.execute_reply": "2024-09-10T20:05:11.911142Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.41276,
     "end_time": "2024-09-10T20:05:11.913092",
     "exception": false,
     "start_time": "2024-09-10T20:05:10.500332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4ad29ee3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:11.916304Z",
     "iopub.status.busy": "2024-09-10T20:05:11.915974Z",
     "iopub.status.idle": "2024-09-10T20:05:11.924371Z",
     "shell.execute_reply": "2024-09-10T20:05:11.923987Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011398,
     "end_time": "2024-09-10T20:05:11.925707",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.914309",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "24bca50f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:11.928268Z",
     "iopub.status.busy": "2024-09-10T20:05:11.928133Z",
     "iopub.status.idle": "2024-09-10T20:05:11.936035Z",
     "shell.execute_reply": "2024-09-10T20:05:11.935649Z"
    },
    "papermill": {
     "duration": 0.010607,
     "end_time": "2024-09-10T20:05:11.937323",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.926716",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40ce6892",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:11.939899Z",
     "iopub.status.busy": "2024-09-10T20:05:11.939753Z",
     "iopub.status.idle": "2024-09-10T20:05:11.947897Z",
     "shell.execute_reply": "2024-09-10T20:05:11.947516Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010839,
     "end_time": "2024-09-10T20:05:11.949174",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.938335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1208f76c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001018,
     "end_time": "2024-09-10T20:05:11.951261",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.950243",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11dd1a0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:11.953902Z",
     "iopub.status.busy": "2024-09-10T20:05:11.953754Z",
     "iopub.status.idle": "2024-09-10T20:05:11.957845Z",
     "shell.execute_reply": "2024-09-10T20:05:11.957403Z"
    },
    "papermill": {
     "duration": 0.006794,
     "end_time": "2024-09-10T20:05:11.959057",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.952263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c90924e6",
   "metadata": {
    "papermill": {
     "duration": 0.001131,
     "end_time": "2024-09-10T20:05:11.961329",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.960198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5db7f0dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:11.964246Z",
     "iopub.status.busy": "2024-09-10T20:05:11.964101Z",
     "iopub.status.idle": "2024-09-10T20:05:12.053344Z",
     "shell.execute_reply": "2024-09-10T20:05:12.053003Z"
    },
    "papermill": {
     "duration": 0.092418,
     "end_time": "2024-09-10T20:05:12.054828",
     "exception": false,
     "start_time": "2024-09-10T20:05:11.962410",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adedeefa",
   "metadata": {
    "papermill": {
     "duration": 0.001455,
     "end_time": "2024-09-10T20:05:12.057882",
     "exception": false,
     "start_time": "2024-09-10T20:05:12.056427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "909bc371",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T20:05:12.061256Z",
     "iopub.status.busy": "2024-09-10T20:05:12.061114Z",
     "iopub.status.idle": "2024-09-10T20:05:12.170652Z",
     "shell.execute_reply": "2024-09-10T20:05:12.170341Z"
    },
    "papermill": {
     "duration": 0.112842,
     "end_time": "2024-09-10T20:05:12.172032",
     "exception": false,
     "start_time": "2024-09-10T20:05:12.059190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.599811,
   "end_time": "2024-09-10T20:05:12.505972",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-09-10T20:05:09.906161",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}