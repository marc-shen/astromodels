{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7bf37f70",
   "metadata": {
    "papermill": {
     "duration": 0.004736,
     "end_time": "2022-10-26T10:29:48.207717",
     "exception": false,
     "start_time": "2022-10-26T10:29:48.202981",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65c073d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:48.216528Z",
     "iopub.status.busy": "2022-10-26T10:29:48.216045Z",
     "iopub.status.idle": "2022-10-26T10:29:52.152555Z",
     "shell.execute_reply": "2022-10-26T10:29:52.151326Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.946114,
     "end_time": "2022-10-26T10:29:52.157096",
     "exception": false,
     "start_time": "2022-10-26T10:29:48.210982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6cdf3570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.169127Z",
     "iopub.status.busy": "2022-10-26T10:29:52.168692Z",
     "iopub.status.idle": "2022-10-26T10:29:52.173527Z",
     "shell.execute_reply": "2022-10-26T10:29:52.172571Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013493,
     "end_time": "2022-10-26T10:29:52.176454",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.162961",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7599bdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.183561Z",
     "iopub.status.busy": "2022-10-26T10:29:52.183199Z",
     "iopub.status.idle": "2022-10-26T10:29:52.191743Z",
     "shell.execute_reply": "2022-10-26T10:29:52.190721Z"
    },
    "papermill": {
     "duration": 0.015363,
     "end_time": "2022-10-26T10:29:52.194649",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.179286",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "932f6e68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.203696Z",
     "iopub.status.busy": "2022-10-26T10:29:52.203239Z",
     "iopub.status.idle": "2022-10-26T10:29:52.214194Z",
     "shell.execute_reply": "2022-10-26T10:29:52.213266Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.018252,
     "end_time": "2022-10-26T10:29:52.217056",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.198804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b622543",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002923,
     "end_time": "2022-10-26T10:29:52.222930",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.220007",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eec60749",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.230828Z",
     "iopub.status.busy": "2022-10-26T10:29:52.230457Z",
     "iopub.status.idle": "2022-10-26T10:29:52.245294Z",
     "shell.execute_reply": "2022-10-26T10:29:52.244120Z"
    },
    "papermill": {
     "duration": 0.022775,
     "end_time": "2022-10-26T10:29:52.248587",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.225812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ddc395c",
   "metadata": {
    "papermill": {
     "duration": 0.003614,
     "end_time": "2022-10-26T10:29:52.255739",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.252125",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "167e4d16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.264116Z",
     "iopub.status.busy": "2022-10-26T10:29:52.263684Z",
     "iopub.status.idle": "2022-10-26T10:29:52.678248Z",
     "shell.execute_reply": "2022-10-26T10:29:52.677071Z"
    },
    "papermill": {
     "duration": 0.42239,
     "end_time": "2022-10-26T10:29:52.681268",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.258878",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dcdfa9a",
   "metadata": {
    "papermill": {
     "duration": 0.003815,
     "end_time": "2022-10-26T10:29:52.689642",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.685827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ae29ea1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-26T10:29:52.699603Z",
     "iopub.status.busy": "2022-10-26T10:29:52.699156Z",
     "iopub.status.idle": "2022-10-26T10:29:53.127831Z",
     "shell.execute_reply": "2022-10-26T10:29:53.126726Z"
    },
    "papermill": {
     "duration": 0.437419,
     "end_time": "2022-10-26T10:29:53.131292",
     "exception": false,
     "start_time": "2022-10-26T10:29:52.693873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.11871,
   "end_time": "2022-10-26T10:29:54.045219",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-10-26T10:29:46.926509",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}