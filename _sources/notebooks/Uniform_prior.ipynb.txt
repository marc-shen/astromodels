{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "464395a2",
   "metadata": {
    "papermill": {
     "duration": 0.006145,
     "end_time": "2024-09-10T15:23:54.661568",
     "exception": false,
     "start_time": "2024-09-10T15:23:54.655423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d1f42f41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:54.671726Z",
     "iopub.status.busy": "2024-09-10T15:23:54.671089Z",
     "iopub.status.idle": "2024-09-10T15:23:56.340542Z",
     "shell.execute_reply": "2024-09-10T15:23:56.339957Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.676229,
     "end_time": "2024-09-10T15:23:56.342169",
     "exception": false,
     "start_time": "2024-09-10T15:23:54.665940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "96cf4873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.345814Z",
     "iopub.status.busy": "2024-09-10T15:23:56.345405Z",
     "iopub.status.idle": "2024-09-10T15:23:56.353944Z",
     "shell.execute_reply": "2024-09-10T15:23:56.353455Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011676,
     "end_time": "2024-09-10T15:23:56.355263",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.343587",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "86d6d786",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.357969Z",
     "iopub.status.busy": "2024-09-10T15:23:56.357821Z",
     "iopub.status.idle": "2024-09-10T15:23:56.359782Z",
     "shell.execute_reply": "2024-09-10T15:23:56.359387Z"
    },
    "papermill": {
     "duration": 0.004963,
     "end_time": "2024-09-10T15:23:56.361299",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.356336",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5715db3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.364405Z",
     "iopub.status.busy": "2024-09-10T15:23:56.364223Z",
     "iopub.status.idle": "2024-09-10T15:23:56.374269Z",
     "shell.execute_reply": "2024-09-10T15:23:56.373565Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013521,
     "end_time": "2024-09-10T15:23:56.376052",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.362531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93fa437",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.0011,
     "end_time": "2024-09-10T15:23:56.378442",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.377342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3adaa97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.381351Z",
     "iopub.status.busy": "2024-09-10T15:23:56.381165Z",
     "iopub.status.idle": "2024-09-10T15:23:56.386070Z",
     "shell.execute_reply": "2024-09-10T15:23:56.385628Z"
    },
    "papermill": {
     "duration": 0.008206,
     "end_time": "2024-09-10T15:23:56.387644",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.379438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4df52757",
   "metadata": {
    "papermill": {
     "duration": 0.001242,
     "end_time": "2024-09-10T15:23:56.390287",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.389045",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "958edd06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.393498Z",
     "iopub.status.busy": "2024-09-10T15:23:56.393326Z",
     "iopub.status.idle": "2024-09-10T15:23:56.494095Z",
     "shell.execute_reply": "2024-09-10T15:23:56.493574Z"
    },
    "papermill": {
     "duration": 0.104095,
     "end_time": "2024-09-10T15:23:56.495549",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.391454",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d9a61a7",
   "metadata": {
    "papermill": {
     "duration": 0.001379,
     "end_time": "2024-09-10T15:23:56.498608",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.497229",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "434a3352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-10T15:23:56.502223Z",
     "iopub.status.busy": "2024-09-10T15:23:56.502063Z",
     "iopub.status.idle": "2024-09-10T15:23:56.615559Z",
     "shell.execute_reply": "2024-09-10T15:23:56.615195Z"
    },
    "papermill": {
     "duration": 0.117003,
     "end_time": "2024-09-10T15:23:56.617055",
     "exception": false,
     "start_time": "2024-09-10T15:23:56.500052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.890048,
   "end_time": "2024-09-10T15:23:56.945958",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-09-10T15:23:54.055910",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}