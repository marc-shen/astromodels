{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1670190e",
   "metadata": {
    "papermill": {
     "duration": 0.007105,
     "end_time": "2025-05-21T19:18:48.095011",
     "exception": false,
     "start_time": "2025-05-21T19:18:48.087906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b7cf0e3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:48.108565Z",
     "iopub.status.busy": "2025-05-21T19:18:48.107942Z",
     "iopub.status.idle": "2025-05-21T19:18:49.710330Z",
     "shell.execute_reply": "2025-05-21T19:18:49.709302Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.61125,
     "end_time": "2025-05-21T19:18:49.712526",
     "exception": false,
     "start_time": "2025-05-21T19:18:48.101276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "44fdf2f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.716182Z",
     "iopub.status.busy": "2025-05-21T19:18:49.715799Z",
     "iopub.status.idle": "2025-05-21T19:18:49.718231Z",
     "shell.execute_reply": "2025-05-21T19:18:49.717827Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005425,
     "end_time": "2025-05-21T19:18:49.719375",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.713950",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9953c454",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.722374Z",
     "iopub.status.busy": "2025-05-21T19:18:49.722204Z",
     "iopub.status.idle": "2025-05-21T19:18:49.724197Z",
     "shell.execute_reply": "2025-05-21T19:18:49.723835Z"
    },
    "papermill": {
     "duration": 0.004734,
     "end_time": "2025-05-21T19:18:49.725367",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.720633",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3406afc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.727903Z",
     "iopub.status.busy": "2025-05-21T19:18:49.727765Z",
     "iopub.status.idle": "2025-05-21T19:18:49.735613Z",
     "shell.execute_reply": "2025-05-21T19:18:49.735223Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010348,
     "end_time": "2025-05-21T19:18:49.736737",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.726389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15ff61ca",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000972,
     "end_time": "2025-05-21T19:18:49.738732",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.737760",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bd50547d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.741301Z",
     "iopub.status.busy": "2025-05-21T19:18:49.741160Z",
     "iopub.status.idle": "2025-05-21T19:18:49.745309Z",
     "shell.execute_reply": "2025-05-21T19:18:49.744842Z"
    },
    "papermill": {
     "duration": 0.006666,
     "end_time": "2025-05-21T19:18:49.746394",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.739728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "904fe887",
   "metadata": {
    "papermill": {
     "duration": 0.001109,
     "end_time": "2025-05-21T19:18:49.748723",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.747614",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0eb74b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.751366Z",
     "iopub.status.busy": "2025-05-21T19:18:49.751221Z",
     "iopub.status.idle": "2025-05-21T19:18:49.821385Z",
     "shell.execute_reply": "2025-05-21T19:18:49.821048Z"
    },
    "papermill": {
     "duration": 0.072878,
     "end_time": "2025-05-21T19:18:49.822641",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.749763",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "537ce7fa",
   "metadata": {
    "papermill": {
     "duration": 0.001646,
     "end_time": "2025-05-21T19:18:49.825981",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.824335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b72ad9f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T19:18:49.832194Z",
     "iopub.status.busy": "2025-05-21T19:18:49.831507Z",
     "iopub.status.idle": "2025-05-21T19:18:49.972697Z",
     "shell.execute_reply": "2025-05-21T19:18:49.971425Z"
    },
    "papermill": {
     "duration": 0.147576,
     "end_time": "2025-05-21T19:18:49.975002",
     "exception": false,
     "start_time": "2025-05-21T19:18:49.827426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.172654,
   "end_time": "2025-05-21T19:18:50.531653",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-05-21T19:18:47.358999",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}