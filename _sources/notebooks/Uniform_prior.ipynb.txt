{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7d6c8124",
   "metadata": {
    "papermill": {
     "duration": 0.004098,
     "end_time": "2022-09-28T23:39:37.417857",
     "exception": false,
     "start_time": "2022-09-28T23:39:37.413759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9009a8f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:37.425848Z",
     "iopub.status.busy": "2022-09-28T23:39:37.425406Z",
     "iopub.status.idle": "2022-09-28T23:39:41.995093Z",
     "shell.execute_reply": "2022-09-28T23:39:41.994049Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.57724,
     "end_time": "2022-09-28T23:39:41.998240",
     "exception": false,
     "start_time": "2022-09-28T23:39:37.421000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f248dce5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.006536Z",
     "iopub.status.busy": "2022-09-28T23:39:42.006119Z",
     "iopub.status.idle": "2022-09-28T23:39:42.025799Z",
     "shell.execute_reply": "2022-09-28T23:39:42.024450Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.027214,
     "end_time": "2022-09-28T23:39:42.029017",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.001803",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "626985e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.037289Z",
     "iopub.status.busy": "2022-09-28T23:39:42.036876Z",
     "iopub.status.idle": "2022-09-28T23:39:42.045025Z",
     "shell.execute_reply": "2022-09-28T23:39:42.043883Z"
    },
    "papermill": {
     "duration": 0.022395,
     "end_time": "2022-09-28T23:39:42.054542",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.032147",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "01ecca72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.062642Z",
     "iopub.status.busy": "2022-09-28T23:39:42.062191Z",
     "iopub.status.idle": "2022-09-28T23:39:42.073652Z",
     "shell.execute_reply": "2022-09-28T23:39:42.072557Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019283,
     "end_time": "2022-09-28T23:39:42.077049",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.057766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cf32bbe",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003134,
     "end_time": "2022-09-28T23:39:42.084358",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.081224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63ab551b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.092019Z",
     "iopub.status.busy": "2022-09-28T23:39:42.091589Z",
     "iopub.status.idle": "2022-09-28T23:39:42.102689Z",
     "shell.execute_reply": "2022-09-28T23:39:42.101607Z"
    },
    "papermill": {
     "duration": 0.018577,
     "end_time": "2022-09-28T23:39:42.105764",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.087187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0c04d67",
   "metadata": {
    "papermill": {
     "duration": 0.003353,
     "end_time": "2022-09-28T23:39:42.112974",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.109621",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "62aff595",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.122042Z",
     "iopub.status.busy": "2022-09-28T23:39:42.121287Z",
     "iopub.status.idle": "2022-09-28T23:39:42.524093Z",
     "shell.execute_reply": "2022-09-28T23:39:42.523028Z"
    },
    "papermill": {
     "duration": 0.41093,
     "end_time": "2022-09-28T23:39:42.527219",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.116289",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3472ecb",
   "metadata": {
    "papermill": {
     "duration": 0.004026,
     "end_time": "2022-09-28T23:39:42.536495",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.532469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1c2dfe1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T23:39:42.546112Z",
     "iopub.status.busy": "2022-09-28T23:39:42.545694Z",
     "iopub.status.idle": "2022-09-28T23:39:42.976686Z",
     "shell.execute_reply": "2022-09-28T23:39:42.975605Z"
    },
    "papermill": {
     "duration": 0.439734,
     "end_time": "2022-09-28T23:39:42.980109",
     "exception": false,
     "start_time": "2022-09-28T23:39:42.540375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.765474,
   "end_time": "2022-09-28T23:39:43.867117",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2022-09-28T23:39:36.101643",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}