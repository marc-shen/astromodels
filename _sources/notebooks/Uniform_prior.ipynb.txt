{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "014cc987",
   "metadata": {
    "papermill": {
     "duration": 0.004007,
     "end_time": "2025-04-29T00:16:40.189470",
     "exception": false,
     "start_time": "2025-04-29T00:16:40.185463",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b59ac2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:40.198823Z",
     "iopub.status.busy": "2025-04-29T00:16:40.197970Z",
     "iopub.status.idle": "2025-04-29T00:16:42.506835Z",
     "shell.execute_reply": "2025-04-29T00:16:42.505466Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.318264,
     "end_time": "2025-04-29T00:16:42.511282",
     "exception": false,
     "start_time": "2025-04-29T00:16:40.193018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9eb2f0dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.523453Z",
     "iopub.status.busy": "2025-04-29T00:16:42.522420Z",
     "iopub.status.idle": "2025-04-29T00:16:42.532871Z",
     "shell.execute_reply": "2025-04-29T00:16:42.531518Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.018538,
     "end_time": "2025-04-29T00:16:42.535326",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.516788",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "406b4c9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.542700Z",
     "iopub.status.busy": "2025-04-29T00:16:42.542220Z",
     "iopub.status.idle": "2025-04-29T00:16:42.550456Z",
     "shell.execute_reply": "2025-04-29T00:16:42.549430Z"
    },
    "papermill": {
     "duration": 0.013699,
     "end_time": "2025-04-29T00:16:42.552960",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.539261",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c6161b3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.566232Z",
     "iopub.status.busy": "2025-04-29T00:16:42.565128Z",
     "iopub.status.idle": "2025-04-29T00:16:42.574729Z",
     "shell.execute_reply": "2025-04-29T00:16:42.572603Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019784,
     "end_time": "2025-04-29T00:16:42.576250",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.556466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dbd1f7d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001234,
     "end_time": "2025-04-29T00:16:42.578979",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.577745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa57736c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.585078Z",
     "iopub.status.busy": "2025-04-29T00:16:42.584402Z",
     "iopub.status.idle": "2025-04-29T00:16:42.591443Z",
     "shell.execute_reply": "2025-04-29T00:16:42.590623Z"
    },
    "papermill": {
     "duration": 0.014074,
     "end_time": "2025-04-29T00:16:42.594204",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.580130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5c76265",
   "metadata": {
    "papermill": {
     "duration": 0.001413,
     "end_time": "2025-04-29T00:16:42.597418",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.596005",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcc4edb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.601253Z",
     "iopub.status.busy": "2025-04-29T00:16:42.601011Z",
     "iopub.status.idle": "2025-04-29T00:16:42.717853Z",
     "shell.execute_reply": "2025-04-29T00:16:42.717389Z"
    },
    "papermill": {
     "duration": 0.120938,
     "end_time": "2025-04-29T00:16:42.719716",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.598778",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c1261e9",
   "metadata": {
    "papermill": {
     "duration": 0.005881,
     "end_time": "2025-04-29T00:16:42.727954",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.722073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f35293bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-29T00:16:42.734506Z",
     "iopub.status.busy": "2025-04-29T00:16:42.734270Z",
     "iopub.status.idle": "2025-04-29T00:16:42.910116Z",
     "shell.execute_reply": "2025-04-29T00:16:42.908193Z"
    },
    "papermill": {
     "duration": 0.182048,
     "end_time": "2025-04-29T00:16:42.911845",
     "exception": false,
     "start_time": "2025-04-29T00:16:42.729797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.258326,
   "end_time": "2025-04-29T00:16:43.567650",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-04-29T00:16:39.309324",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}