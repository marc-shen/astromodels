{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4e9c88ac",
   "metadata": {
    "papermill": {
     "duration": 0.004696,
     "end_time": "2024-02-06T22:37:37.044221",
     "exception": false,
     "start_time": "2024-02-06T22:37:37.039525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03453976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:37.055158Z",
     "iopub.status.busy": "2024-02-06T22:37:37.054529Z",
     "iopub.status.idle": "2024-02-06T22:37:42.108237Z",
     "shell.execute_reply": "2024-02-06T22:37:42.105590Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 5.067211,
     "end_time": "2024-02-06T22:37:42.115230",
     "exception": false,
     "start_time": "2024-02-06T22:37:37.048019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "20118bc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.127357Z",
     "iopub.status.busy": "2024-02-06T22:37:42.126708Z",
     "iopub.status.idle": "2024-02-06T22:37:42.136445Z",
     "shell.execute_reply": "2024-02-06T22:37:42.133772Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.023024,
     "end_time": "2024-02-06T22:37:42.143560",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.120536",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "584ee3d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.155563Z",
     "iopub.status.busy": "2024-02-06T22:37:42.155020Z",
     "iopub.status.idle": "2024-02-06T22:37:42.162996Z",
     "shell.execute_reply": "2024-02-06T22:37:42.161321Z"
    },
    "papermill": {
     "duration": 0.020723,
     "end_time": "2024-02-06T22:37:42.169100",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.148377",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc61e7f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.179580Z",
     "iopub.status.busy": "2024-02-06T22:37:42.179093Z",
     "iopub.status.idle": "2024-02-06T22:37:42.191559Z",
     "shell.execute_reply": "2024-02-06T22:37:42.188299Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.02552,
     "end_time": "2024-02-06T22:37:42.198117",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.172597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eda2d1fb",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003561,
     "end_time": "2024-02-06T22:37:42.205805",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.202244",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "866a37bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.215323Z",
     "iopub.status.busy": "2024-02-06T22:37:42.214843Z",
     "iopub.status.idle": "2024-02-06T22:37:42.236867Z",
     "shell.execute_reply": "2024-02-06T22:37:42.233589Z"
    },
    "papermill": {
     "duration": 0.034339,
     "end_time": "2024-02-06T22:37:42.243565",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.209226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "057a4055",
   "metadata": {
    "papermill": {
     "duration": 0.006033,
     "end_time": "2024-02-06T22:37:42.253708",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.247675",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "155d8c52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.267659Z",
     "iopub.status.busy": "2024-02-06T22:37:42.266951Z",
     "iopub.status.idle": "2024-02-06T22:37:42.596903Z",
     "shell.execute_reply": "2024-02-06T22:37:42.593851Z"
    },
    "papermill": {
     "duration": 0.344811,
     "end_time": "2024-02-06T22:37:42.604289",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.259478",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9e3ee08",
   "metadata": {
    "papermill": {
     "duration": 0.007346,
     "end_time": "2024-02-06T22:37:42.618437",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.611091",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7e0ac2d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-06T22:37:42.637416Z",
     "iopub.status.busy": "2024-02-06T22:37:42.636770Z",
     "iopub.status.idle": "2024-02-06T22:37:43.156116Z",
     "shell.execute_reply": "2024-02-06T22:37:43.151867Z"
    },
    "papermill": {
     "duration": 0.537832,
     "end_time": "2024-02-06T22:37:43.164131",
     "exception": false,
     "start_time": "2024-02-06T22:37:42.626299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.443779,
   "end_time": "2024-02-06T22:37:44.011297",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2024-02-06T22:37:35.567518",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}