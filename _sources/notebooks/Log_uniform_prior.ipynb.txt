{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6971e2da",
   "metadata": {
    "papermill": {
     "duration": 0.003583,
     "end_time": "2024-02-02T23:42:36.637691",
     "exception": false,
     "start_time": "2024-02-02T23:42:36.634108",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Log uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c0253de9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:36.644717Z",
     "iopub.status.busy": "2024-02-02T23:42:36.644209Z",
     "iopub.status.idle": "2024-02-02T23:42:39.106435Z",
     "shell.execute_reply": "2024-02-02T23:42:39.105032Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.470158,
     "end_time": "2024-02-02T23:42:39.110360",
     "exception": false,
     "start_time": "2024-02-02T23:42:36.640202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69ebba97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.117301Z",
     "iopub.status.busy": "2024-02-02T23:42:39.116931Z",
     "iopub.status.idle": "2024-02-02T23:42:39.122160Z",
     "shell.execute_reply": "2024-02-02T23:42:39.121030Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012683,
     "end_time": "2024-02-02T23:42:39.125725",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.113042",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d9294ae2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.131967Z",
     "iopub.status.busy": "2024-02-02T23:42:39.131632Z",
     "iopub.status.idle": "2024-02-02T23:42:39.136521Z",
     "shell.execute_reply": "2024-02-02T23:42:39.135436Z"
    },
    "papermill": {
     "duration": 0.011954,
     "end_time": "2024-02-02T23:42:39.140009",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.128055",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Log_uniform_prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be41b430",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.146383Z",
     "iopub.status.busy": "2024-02-02T23:42:39.146055Z",
     "iopub.status.idle": "2024-02-02T23:42:39.153004Z",
     "shell.execute_reply": "2024-02-02T23:42:39.151852Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014232,
     "end_time": "2024-02-02T23:42:39.156628",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.142396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2f0f3b6",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002406,
     "end_time": "2024-02-02T23:42:39.162410",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.160004",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "270efbca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.168774Z",
     "iopub.status.busy": "2024-02-02T23:42:39.168427Z",
     "iopub.status.idle": "2024-02-02T23:42:39.181007Z",
     "shell.execute_reply": "2024-02-02T23:42:39.179524Z"
    },
    "papermill": {
     "duration": 0.02021,
     "end_time": "2024-02-02T23:42:39.184912",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.164702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is K/x on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are NOT counted as part of the interval. Lower_bound must be >= 0.</li>\n",
       "\n",
       "<li>formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound} < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-20</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1e-21</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 100.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 10.0</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is K/x on the interval lower_bound - upper_bound and\n",
       "    * 0 outside the interval. The extremes of the interval are NOT counted as part of\n",
       "    * the interval. Lower_bound must be >= 0.\n",
       "  * formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound}\n",
       "    * < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 1.0e-20\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0e-21\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 100.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 10.0\n",
       "      * free: true\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: Normalization\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4439398",
   "metadata": {
    "papermill": {
     "duration": 0.00282,
     "end_time": "2024-02-02T23:42:39.190669",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.187849",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3e44462",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.197957Z",
     "iopub.status.busy": "2024-02-02T23:42:39.197591Z",
     "iopub.status.idle": "2024-02-02T23:42:39.409786Z",
     "shell.execute_reply": "2024-02-02T23:42:39.408023Z"
    },
    "papermill": {
     "duration": 0.220781,
     "end_time": "2024-02-02T23:42:39.414108",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.193327",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6924162a",
   "metadata": {
    "papermill": {
     "duration": 0.003629,
     "end_time": "2024-02-02T23:42:39.421065",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.417436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7e6caf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-02T23:42:39.429799Z",
     "iopub.status.busy": "2024-02-02T23:42:39.429362Z",
     "iopub.status.idle": "2024-02-02T23:42:39.693950Z",
     "shell.execute_reply": "2024-02-02T23:42:39.692717Z"
    },
    "papermill": {
     "duration": 0.273597,
     "end_time": "2024-02-02T23:42:39.697824",
     "exception": false,
     "start_time": "2024-02-02T23:42:39.424227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.390065,
   "end_time": "2024-02-02T23:42:40.229087",
   "environment_variables": {},
   "exception": null,
   "input_path": "Log_uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Log_uniform_prior.ipynb",
   "parameters": {
    "func_name": "Log_uniform_prior",
    "positive_prior": true
   },
   "start_time": "2024-02-02T23:42:35.839022",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}