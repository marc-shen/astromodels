{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6d19007",
   "metadata": {
    "papermill": {
     "duration": 0.007347,
     "end_time": "2024-08-14T21:25:48.649437",
     "exception": false,
     "start_time": "2024-08-14T21:25:48.642090",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Log uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b518d4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:48.662947Z",
     "iopub.status.busy": "2024-08-14T21:25:48.662336Z",
     "iopub.status.idle": "2024-08-14T21:25:50.204586Z",
     "shell.execute_reply": "2024-08-14T21:25:50.203887Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.550523,
     "end_time": "2024-08-14T21:25:50.206401",
     "exception": false,
     "start_time": "2024-08-14T21:25:48.655878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c98f20f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.210606Z",
     "iopub.status.busy": "2024-08-14T21:25:50.210135Z",
     "iopub.status.idle": "2024-08-14T21:25:50.213048Z",
     "shell.execute_reply": "2024-08-14T21:25:50.212611Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006572,
     "end_time": "2024-08-14T21:25:50.214540",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.207968",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7e10df1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.217876Z",
     "iopub.status.busy": "2024-08-14T21:25:50.217675Z",
     "iopub.status.idle": "2024-08-14T21:25:50.226323Z",
     "shell.execute_reply": "2024-08-14T21:25:50.225745Z"
    },
    "papermill": {
     "duration": 0.012456,
     "end_time": "2024-08-14T21:25:50.228263",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.215807",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Log_uniform_prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5ec6625",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.231600Z",
     "iopub.status.busy": "2024-08-14T21:25:50.231389Z",
     "iopub.status.idle": "2024-08-14T21:25:50.241152Z",
     "shell.execute_reply": "2024-08-14T21:25:50.240591Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013466,
     "end_time": "2024-08-14T21:25:50.243061",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.229595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3716dd8",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001116,
     "end_time": "2024-08-14T21:25:50.245475",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.244359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d512f451",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.248877Z",
     "iopub.status.busy": "2024-08-14T21:25:50.248657Z",
     "iopub.status.idle": "2024-08-14T21:25:50.255198Z",
     "shell.execute_reply": "2024-08-14T21:25:50.254386Z"
    },
    "papermill": {
     "duration": 0.011143,
     "end_time": "2024-08-14T21:25:50.257745",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.246602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is K/x on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are NOT counted as part of the interval. Lower_bound must be >= 0.</li>\n",
       "\n",
       "<li>formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound} < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-20</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1e-21</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 100.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 10.0</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is K/x on the interval lower_bound - upper_bound and\n",
       "    * 0 outside the interval. The extremes of the interval are NOT counted as part of\n",
       "    * the interval. Lower_bound must be >= 0.\n",
       "  * formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound}\n",
       "    * < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 1.0e-20\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0e-21\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 100.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 10.0\n",
       "      * free: true\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: Normalization\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a095f5ad",
   "metadata": {
    "papermill": {
     "duration": 0.001219,
     "end_time": "2024-08-14T21:25:50.260417",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.259198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4cf96eda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.263724Z",
     "iopub.status.busy": "2024-08-14T21:25:50.263500Z",
     "iopub.status.idle": "2024-08-14T21:25:50.388667Z",
     "shell.execute_reply": "2024-08-14T21:25:50.387599Z"
    },
    "papermill": {
     "duration": 0.130171,
     "end_time": "2024-08-14T21:25:50.391731",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.261560",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81e8c0da",
   "metadata": {
    "papermill": {
     "duration": 0.002997,
     "end_time": "2024-08-14T21:25:50.399464",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.396467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ab2950ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T21:25:50.406961Z",
     "iopub.status.busy": "2024-08-14T21:25:50.406738Z",
     "iopub.status.idle": "2024-08-14T21:25:50.558916Z",
     "shell.execute_reply": "2024-08-14T21:25:50.558559Z"
    },
    "papermill": {
     "duration": 0.15673,
     "end_time": "2024-08-14T21:25:50.560540",
     "exception": false,
     "start_time": "2024-08-14T21:25:50.403810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.911754,
   "end_time": "2024-08-14T21:25:51.005220",
   "environment_variables": {},
   "exception": null,
   "input_path": "Log_uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Log_uniform_prior.ipynb",
   "parameters": {
    "func_name": "Log_uniform_prior",
    "positive_prior": true
   },
   "start_time": "2024-08-14T21:25:48.093466",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}