{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "45a3be5b",
   "metadata": {
    "papermill": {
     "duration": 0.005258,
     "end_time": "2022-09-29T20:00:19.588373",
     "exception": false,
     "start_time": "2022-09-29T20:00:19.583115",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Log uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f532b27d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:19.598928Z",
     "iopub.status.busy": "2022-09-29T20:00:19.598306Z",
     "iopub.status.idle": "2022-09-29T20:00:24.413168Z",
     "shell.execute_reply": "2022-09-29T20:00:24.411958Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.824703,
     "end_time": "2022-09-29T20:00:24.417016",
     "exception": false,
     "start_time": "2022-09-29T20:00:19.592313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "51273a85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.426253Z",
     "iopub.status.busy": "2022-09-29T20:00:24.425395Z",
     "iopub.status.idle": "2022-09-29T20:00:24.431646Z",
     "shell.execute_reply": "2022-09-29T20:00:24.430518Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014418,
     "end_time": "2022-09-29T20:00:24.435139",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.420721",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2dc5eafb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.445478Z",
     "iopub.status.busy": "2022-09-29T20:00:24.444678Z",
     "iopub.status.idle": "2022-09-29T20:00:24.451167Z",
     "shell.execute_reply": "2022-09-29T20:00:24.450014Z"
    },
    "papermill": {
     "duration": 0.014432,
     "end_time": "2022-09-29T20:00:24.454602",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.440170",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Log_uniform_prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f7c05f59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.463054Z",
     "iopub.status.busy": "2022-09-29T20:00:24.462647Z",
     "iopub.status.idle": "2022-09-29T20:00:24.470514Z",
     "shell.execute_reply": "2022-09-29T20:00:24.469383Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016058,
     "end_time": "2022-09-29T20:00:24.473940",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.457882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a5d7434",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.003457,
     "end_time": "2022-09-29T20:00:24.482838",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.479381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e5d3221",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.491225Z",
     "iopub.status.busy": "2022-09-29T20:00:24.490830Z",
     "iopub.status.idle": "2022-09-29T20:00:24.504156Z",
     "shell.execute_reply": "2022-09-29T20:00:24.502996Z"
    },
    "papermill": {
     "duration": 0.021435,
     "end_time": "2022-09-29T20:00:24.507558",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.486123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is K/x on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are NOT counted as part of the interval. Lower_bound must be >= 0.</li>\n",
       "\n",
       "<li>formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound} < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-20</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1e-21</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 100.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 10.0</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is K/x on the interval lower_bound - upper_bound and\n",
       "    * 0 outside the interval. The extremes of the interval are NOT counted as part of\n",
       "    * the interval. Lower_bound must be >= 0.\n",
       "  * formula: $ f(x)=K~\\begin{cases}0 & x \\le \\text{lower_bound} \\\\\\frac{1}{x} & \\text{lower_bound}\n",
       "    * < x < \\text{upper_bound} \\\\ 0 & x \\ge \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 1.0e-20\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0e-21\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 100.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 10.0\n",
       "      * free: true\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: Normalization\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c869580c",
   "metadata": {
    "papermill": {
     "duration": 0.004187,
     "end_time": "2022-09-29T20:00:24.516085",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.511898",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1a763fc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.525176Z",
     "iopub.status.busy": "2022-09-29T20:00:24.524766Z",
     "iopub.status.idle": "2022-09-29T20:00:24.952047Z",
     "shell.execute_reply": "2022-09-29T20:00:24.950866Z"
    },
    "papermill": {
     "duration": 0.435964,
     "end_time": "2022-09-29T20:00:24.955646",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.519682",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67050f19",
   "metadata": {
    "papermill": {
     "duration": 0.00425,
     "end_time": "2022-09-29T20:00:24.965025",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.960775",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ac07e473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T20:00:24.975440Z",
     "iopub.status.busy": "2022-09-29T20:00:24.974944Z",
     "iopub.status.idle": "2022-09-29T20:00:25.528604Z",
     "shell.execute_reply": "2022-09-29T20:00:25.527351Z"
    },
    "papermill": {
     "duration": 0.563192,
     "end_time": "2022-09-29T20:00:25.532264",
     "exception": false,
     "start_time": "2022-09-29T20:00:24.969072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.473006,
   "end_time": "2022-09-29T20:00:26.215458",
   "environment_variables": {},
   "exception": null,
   "input_path": "Log_uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Log_uniform_prior.ipynb",
   "parameters": {
    "func_name": "Log_uniform_prior",
    "positive_prior": true
   },
   "start_time": "2022-09-29T20:00:17.742452",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}